#summary :r4 basic words

= Diccionario Basico de :r4 =

Estas palabras estan definidas en el diccionario basico de la maquina virtual de :r4.

Fin de palabra
{{{
;	| --	R: a -- 	
}}}
la palabra ; indica que termina la ejecucion, toma el tope de la pila R y lo asigna al IP (direccion de la proxima palabra a executarse)

== bloques ==

Palabras de bloques.
{{{
(	| Comienzo de bloque
)	| Fin de bloque
)(	| Separador de bloque doble
}}}
Los parentesis indican bloque de palabras, junto con los condicionales forman las estructuras de control del lenguaje.
A diferencia de FORTH, en :R4 no tenemos el control sobre el compilador, por esto, estas son las conbinaciones que conforman las estructuras de control.

{{{
( A B C 	| REPEAT
}}}
Sin condicional define REPETICION, para este ejemplo se repetire indefinidamente:
A B C A B C A B C ... etc

{{{
?? ( A )	| IF
}}}
Con condicional ANTES del comienzo de bloque, define IF, para este ejemplo A solo es ejecutado si el condicional da VERDADERO.

{{{
?? ( A )( B )	| IF-ELSE
}}}
Con condicional ANTES del comienzo de bloque doble, define IF-ELSE, para este ejemplo si el condicional es VERDADERO ejecuta A, sino B.

{{{
( A ?? )( B ) 	| WHILE
}}}
Con condicional ANTES del separador, define WHILE, para este ejemplo MIENTRAS el condicional sea verdadero se ejecuta B, luego A y se comprueba nuevamente el condicional, A se ejecuta siempre al menos una vez.

{{{
( A ?? )	| UNTIL
}}}
Con condicional ANTES del fin de bloque, define UNTIL, para este ejemplo se repite A por lo menos una vez y si el condicional da FALSO, se continuar ejecutando A.

== Condicionales ==

Condicionales simples
{{{
0? 		| --		0 el tope de la pila ?
+? 		| --		positivo el tope de la pila ?
-?		| --		negativo el tope de la pila ?
1? 		| --		distinto a 0 el tope de la pila ?
}}}
Comprueban el tope de la pila pero no la consumen.

Ej:
{{{
-? ( neg )  
5 ( 1? )( 1- ) 
}}}

Condicionales dobles
{{{
=?	| a b -- a		a = b ?
<?	| a b -- a		a < b ?
>?	| a b -- a		a > b ?
<=?	| a b -- a		a <= b ?
>=?	| a b -- a		a >= b ?
<>?	| a b -- a		a <> b ?
AND?	| a b -- a		a and b ?
NAND?	| a b -- a		a nand b ?
}}}

Comparan el tope de la pila con el segundo, consumen el tope de la pila.

Ej:
{{{
1 =? ( neg )  
0 ( 10 <? )( 1+ ) drop
}}}

Definicion anonima.
{{{
[
]
}}}
Definen una palabra anonima, no tiene nombre pero se apila su direccion.

_Cuidado_
debe tener un fin de palabra ";" para que termine correctamente la ejecucion de la palabra anonima, el compilador actual no emite error y es valido poner por ejemplo
{{{ 
[ dup ] 
}}}
sindo lo correcto poner 
{{{
[ dup ; ]
}}}

Ejecuta palabra por direccion.
{{{
EXEC  	| vector --  	
}}}
Lama al codigo del vector, si es 0 lo consume de la pila y no ejecuta nada.

Se puede definir como
{{{
:EXEC
    0? ( drop ; ) >r ;
}}}

Pila de Datos
{{{
DUP 	| a -- a a
DROP 	| a --
OVER 	| a b -- a b a
PICK2 	| a b c -- a b c a
PICK3 	| a b c d -- a b c d a
PICK4 	| a b c d e -- a b c d e a
SWAP 	| a b -- b a
NIP	| a b -- b
ROT 	| a b c -- b c a
2DUP 	| a b -- a b a b
2DROP   | a b --
3DROP   | a b c --
4DROP   | a b c d --
2OVER	| a b c d -- a b c d a b
2SWAP	| a b c d -- c d a b
}}}

Es un espacio de 2Kb de numeros entero con signo.
Palabras que acomodan parametros que se pasan en la pila.
Si para conectar dos palabras, aparecen juntas, muchas de estas, revisar la posicion de los parametros elegidos

Pila de Direcciones (pila R)
{{{
>R 	| a --      R: -- a
R> 	| -- a	    R: a --
R	| -- a      R: a -- a
R+	| v --	    R: a -- a+v
R@+	| -- v      R: a -- a+4
R!+	| v --	    R: a -- a+4
RDROP	| --	    R: a --
}}}

Pila de direcciones, tambien usada como pila auxiliar.
Tener en cuenta que desequilibra la pila utilizarlas.

Operaciones Logicas
{{{
AND 	| a b -- c     c = a AND b
OR 	| a b -- c     c = a OR b
XOR 	| a b -- c     c = a XOR b
NOT  	| a -- b       c = NOT b
}}}

Esas, las de boole y sus muchachos.

Operaciones Aritmeticas
{{{
+ 	| a b -- c	c=a+b
- 	| a b -- c	c=a-b
* 	| a b -- c	c=a*b
/ 	| a b -- c	c=a/b
*/ 	| a b c -- d	d=a*b/c	      resultado intermedio en 64 bits
*>>	| a b c -- d	d=(a*b)>>c    resultado intermedio en 64 bits
/MOD 	| a b -- c d	c=a/b  d=a resto b
MOD 	| a b -- c	c=a resto b
ABS	| a -- b	b=|a|
NEG 	| a -- b	b=-a
1+ 	| a -- b	b=a+1
4+	| a -- b	b=a+4
1- 	| a -- b	b=a-1
2/ 	| a -- b	b=a/2
2* 	| a -- b	b=a*2
<< 	| a b -- c	c=a<<b
>> 	| a b -- c	b=a>>b (arrastra signo)
}}}

Solo hay numeros enteros con signo de 32 bits.
Muchas palabras estan aqui por velocidad. 
las unicas siempre presentes son sumar y girar bits (+,>>,<<).

Acceso directo a Memoria
{{{
@ 	| a -- b		b=32(a)
C@ 	| a -- b		b=8 (a)
W@	| a -- b		b=16(a)
!	| v d --		32(d) = v
C!	| v d --		8(d) = v
W! 	| v d --		16(d) = v
+! 	| v d --		32(d)=32(d)+v
C+!	| v d --		8(d)=8(d)+v
W+!  	| v d --		16(d)=16(d)+v
@+	| d -- d+4	dword
!+	| v d -- d+4
C@+	| d -- d+1	byte
C!+	| v d -- d+1
W@+	| d -- d+2	word
W!+	| v d -- d+2
}}}

La mejor forma de manejar memoria RAM, ampliable a 64,128 o 256 bits.

Movimiento de memoria
{{{
MOVE	| de sr cnt --		Copia CNT dword de SR a DE
MOVE>   | de sr cnt --		Copia CNT dword de SR a DE (para atras)
CMOVE   | de sr cnt --		Copia CNT bytes de SR a DE
CMOVE>  | de sr cnt --		Copia CNT bytes de SR a DE (para atras)
MEM	| -- dir 		Direccion de inicio de memoria libre
}}}

El mapa de memoria del programa corriendo en la MV tiene la siguiente forma.

|| CODIGO || 256KB ||
|| DATO + MEMORIA LIBRE || 16MB ||

MEM es la primera posicion de la memoria libre.
los MOV son por velocidad.

Archivos
{{{
DIR	| "foldername" –	Cambia la carpeta actual
FILE	| n -- "filename"	Nombre del archivo n
FSIZE	| n -- cnt		Tamanio del archivo
VOL	| n -- "foldername"	Nombre de la carpeta n
LOAD	| d "filename" -- e	Carga un archivo en memoria
SAVE	| d n "filename" –	Graba memoria en un archivo
}}}

Borrar un archivo es grabar 0 bytes en si mismo (no implementado por seguridad :)

Eventos
{{{
UPDATE	| --		Actualiza las irq como el raton, el teclado, sonido, etc
END 	| --		Sale del :r4, finaliza TODO, apaga la maquina virtual
}}}

Es posible que desaparezca UPDATE, END no se usa.. por que sera ?

Sistema
{{{
MSEC 	| -- a 		milisegundos del sistema
TIME 	| -- h m s 	hora minutos y segundos
DATE 	| -- d m a	dia mes y anio
}}}
El tiempo, que hariamos sin el?

{{{
RUN  	| "main.txt" --	Carga, compila y ejecuta el archivo nom
}}}
En la MV actual carga, compila y ejecuta el archivo de nombre "main.txt".

Pantalla grafica
{{{
SW 	| -- w		Ancho de pantalla
SH 	| -- h		Alto de pantalla
CLS	| --		Limpia pantalla
REDRAW  | --		Dibuja nuevo FRAME
FRAMEV	| -- m		Memoria de video
}}}

Dibujar por pixel
{{{
SETXY	| x y --    pone cursor grafico en x y
PX+!	| cant --   suma cant al cursor grafico
PX!+	| color --	pone color y avanza siguiente pixel
PX@	| -- color	obtiene color del punto
}}}

Dibujo de lineas y poligonos
{{{
PAPER	| a –-		Asigna color de fondo
INK	| a --		Asigna color de dibujo
INK@	| -- a		color de dibujo
ALPHA 	| a --		Transparencia (canal alpha)
OP 	| x y –-	Punto de origen
CP 	| x y –-	Punto de curva
LINE 	| x y –-	Traza línea
CURVE 	| x y –-	Traza curva
PLINE 	| x y --	Traza línea poligono
PCURVE 	| x y --	Traza curva poligono
POLI	| --		Traza polígono
FCOL	| c1 c2 --	2colores para degrade
FCEN	| x y --	centro de degrade
FMAT	| a b --	matriz de degrade
SFILL	| --		poligonos con color solido (ink)
LFILL	| --		poligono con degrade lineal
RFILL	| --		poligono con degrade radial (algo parecido..)
}}}

Raton 
{{{
IPEN!	| v --  	vector de irq del mouse (o lapiz)
XYMOUSE | -- x y 	coordenadas de la pantalla del apuntador
BMOUSE	| -- b		estado del apuntado
}}}

Teclado
{{{
IKEY!	| v --    	vector de irq del teclado
KEY	| -- s		ultima tecla pulsada (scancode)
}}}

Joystick
{{{
CNTJOY	| -- cnt	cantidad de joysticks
GETJOY	| j -- a	direccion de los datos de joystick J
}}}

La direccion que retorna GETJOY apunta al estado actual del joystick j.

la estructura actual cumple con las ganas que tiene de andar en WINE.
A mi, me da asi. 

|| nro DWORD || Valor || Significado ||
|| 0 || $3f || ??
|| 1|| $ff || ??
|| 2 || $7fff || PAD 0
|| 3 || $7fff || PAD 1
|| 4 || $7fff || PAD 2
|| 5 || $7fff || PAD 3
|| 6 || 0 || ??
|| 7 || 0 || ??
|| 8 || 0 || BUTTONS
|| 9 || 0 || ANYBUTTON

buscar en test-joy.txt como hacer para leerlo