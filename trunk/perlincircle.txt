      import java.awt.*;

public class test2 extends MISApplet
{
   int mx = 0, my = 0;
   int white = pack(255,255,255);
   int black = pack(  0,  0,  0);
   int gray  = pack(128,128,128);
   int red   = pack(255,  0,  0);
   boolean isMouseDown = false;
   int radius = 30;

   int myColor = pack(200, 0, 0);

   public void initialize() {
      mx = W / 2;
      my = H / 2;
   }

   public void computeImage(double time) {

      // PAINT A BLACK AND WHITE CHECKBOARD AS THE BACKGROUND PATTERN

      int i = 0; 
      for (int y = 0 ; y < H ; y++)
      for (int x = 0 ; x < W ; x++) {
         int _i = x / 50;
         int _j = y / 50;
         pix[i++] = (_i + _j) % 2 == 0 ? black : white;
      }

      // DRAW THE MOVING SPOT

      for(int y = my - radius ; y < my + radius ; y++)
      for(int x = mx - radius ; x < mx + radius ; x++) {

         // LOOP THROUGH A SQUARE REGION, BUT ONLY DRAW THOSE
         // PIXELS THAT FALL INSIDE A CIRCULAR DISK

         int rr = (x - mx) * (x - mx) + (y - my) * (y - my);
         if (rr < radius * radius) {
            i = xy2i(x, y);
            if (i >= 0 && i < pix.length) {
               if (isMouseDown) {

                  // OPACITY DROPS OFF WITH RADIUS

                  int c = Math.max(0, 255 * rr / (radius * radius) - 128);

                  // OPAQUE PIXELS JUST GET WRITTEN TO THE FRAME BUFFER

                  if (c == 0)
                     pix[i] = myColor;

                  // TRANSLUCENT PIXELS NEED TO BE BLENDED IN

                  else {
                     int bg = pix[i];

                     int red = ilerp(c, 200, unpack(bg, 0));
                     int grn = ilerp(c,   0, unpack(bg, 1));
                     int blu = ilerp(c,   0, unpack(bg, 2));

                     pix[i] = pack(red, grn, blu);
                  } 
               } 
               else
                  pix[i] = gray;
            }
         }
      }
   }

   // TRACK WHERE THE USER DRAGS, AND IF MOUSE BUTTON IS PRESSED

   public boolean mouseDown(Event e, int x, int y) {
      isMouseDown = true;
      return true;
   }

   public boolean mouseUp(Event e, int x, int y) {
      isMouseDown = false;
      return true;
   }

   public boolean mouseDrag(Event e, int x, int y) {
      mx = x;
      my = y;
      return true;
   }

   // FIXED POINT VERSION OF LINEAR INTERPOLATION, WITH 256 AS UNITY

   int ilerp(int t, int a, int b) { return a + (t * (b - a) >> 8); }
}
