| :r4 base - bangle
|1 cuadrante  0 .. $1ff
|360 g = $7ff
|---------------------------------

#tsincos
0 201 402 603 804 1005 1206 1407 1608 1809 2010 2211 2412 2613 2814 3014 3215 3416 3617 3818 4018
4219 4420 4620 4821 5021 5222 5422 5622 5823 6023 6223 6423 6623 6823 7023 7223 7423 7623 7822 8022
8221 8421 8620 8819 9019 9218 9417 9616 9814 10013 10212 10410 10609 10807 11006 11204 11402 11600
11797 11995 12193 12390 12588 12785 12982 13179 13376 13573 13769 13966 14162 14359 14555 14751 
14946 15142 15338 15533 15728 15923 16118 16313 16508 16702 16897 17091 17285 17479 17672 17866
18059 18253 18446 18638 18831 19024 19216 19408 19600 19792 19983 20175 20366 20557 20748 20938 
21129 21319 21509 21699 21889 22078 22267 22456 22645 22833 23022 23210 23398 23586 23773 23960
24147 24334 24521 24707 24893 25079 25265 25450 25635 25820 26005 26189 26373 26557 26741 26925
27108 27291 27473 27656 27838 28020 28201 28383 28564 28745 28925 29105 29285 29465 29645 29824
30003 30181 30360 30538 30715 30893 31070 31247 31424 31600 31776 31952 32127 32302 32477 32651
32826 32999 33173 33346 33519 33692 33864 34036 34208 34379 34550 34721 34891 35061 35231 35400
35569 35738 35906 36074 36242 36409 36576 36743 36909 37075 37241 37406 37571 37736 37900 38064
38227 38390 38553 38716 38878 39039 39201 39362 39522 39682 39842 40002 40161 40319 40478 40636
40793 40950 41107 41263 41419 41575 41730 41885 42040 42194 42347 42501 42653 42806 42958 43110
43261 43412 43562 43712 43862 44011 44160 44308 44456 44603 44750 44897 45043 45189 45335 45480
45624 45768 45912 46055 46198 46340 46482 46624 46765 46906 47046 47186 47325 47464 47602 47740
47878 48015 48151 48288 48423 48558 48693 48828 48961 49095 49228 49360 49492 49624 49755 49886
50016 50146 50275 50403 50532 50660 50787 50914 51040 51166 51291 51416 51541 51665 51788 51911
52033 52155 52277 52398 52518 52639 52758 52877 52996 53114 53231 53348 53465 53581 53696 53811
53926 54040 54153 54266 54379 54491 54602 54713 54823 54933 55043 55152 55260 55368 55475 55582
55688 55794 55899 56004 56108 56212 56315 56417 56519 56621 56722 56822 56922 57022 57120 57219
57316 57414 57510 57606 57702 57797 57892 57986 58079 58172 58264 58356 58447 58538 58628 58718
58807 58895 58983 59070 59157 59243 59329 59414 59499 59583 59666 59749 59831 59913 59994 60075
60155 60235 60313 60392 60470 60547 60624 60700 60775 60850 60924 60998 61071 61144 61216 61288
61359 61429 61499 61568 61637 61705 61772 61839 61905 61971 62036 62100 62164 62228 62291 62353
62414 62475 62536 62596 62655 62714 62772 62829 62886 62942 62998 63053 63108 63162 63215 63268
63320 63371 63422 63473 63522 63571 63620 63668 63715 63762 63808 63854 63899 63943 63987 64030
64073 64115 64156 64197 64237 64276 64315 64353 64391 64428 64465 64501 64536 64571 64605 64638
64671 64703 64735 64766 64796 64826 64855 64884 64912 64939 64966 64992 65018 65043 65067 65091
65114 65136 65158 65179 65200 65220 65239 65258 65276 65294 65311 65327 65343 65358 65372 65386
65400 65412 65424 65436 65446 65457 65466 65475 65483 65491 65498 65505 65511 65516 65520 65524
65528 65531 65533 65534 65535 65536

::cos $1ff +
::sin 	| ( bangle -- sin )
	$200 and? ( $1ff xor )
	dup $1ff and 2 << 'tsincos + @ swap 
	$400 and? ( drop neg )( drop ) ; 

::sincos | angle -- sin cos
	dup sin swap cos ;	

::2DVECTOR   | .angle .length -- .x .y 
	>r DUP sin r * SWAP cos r> * ;

::ccircle | x y r bangle -- x y
	swap >r sincos r 16 *>> rot + swap r> 16 *>> rot + swap  ;

::xy+polar | x y bangle r -- x y
	>r sincos r 16 *>> rot + swap r> 16 *>> rot + swap  ;

::ar>xy | xc yc bangle r -- xc yc x y
	>r sincos r 16 *>> pick2 + swap r> 16 *>> pick3 + swap  ;

#sqrt-tabla		
$2D4   $103F  $16CD  $1BDB  $201F  $23E3  $274B  $2A6D $2D57  $3015  $32AC  $3524  $377F  $39C2  $3BEE  $3E08 
$400F  $4207  $43F0  $45CC  $479C  $4960  $4B19  $4CC9 $4E6F  $500C  $51A2  $532F  $54B6  $5635  $57AE  $5921 
$5A8D  $5BF4  $5D56  $5EB3  $600A  $615D  $62AB  $63F5 $653B  $667D  $67BA  $68F5  $6A2B  $6B5E  $6C8D  $6DBA 
$6EE3  $7009  $712C  $724C  $7369  $7484  $759C  $76B1 $77C4  $78D4  $79E2  $7AEE  $7BF7  $7CFE  $7E04  $7F07 
$8007  $8106  $8203  $82FF  $83F8  $84EF  $85E5  $86D9 $87CB  $88BB  $89AA  $8A97  $8B83  $8C6D  $8D56  $8E3D 
$8F22  $9007  $90E9  $91CB  $92AB  $938A  $9467  $9543 $961E  $96F8  $97D0  $98A8  $997E  $9A53  $9B26  $9BF9 
$9CCA  $9D9B  $9E6A  $9F39  $A006  $A0D2  $A19D  $A268 $A331  $A3F9  $A4C1  $A587  $A64D  $A711  $A7D5  $A898 
$A95A  $AA1B  $AADB  $AB9A  $AC59  $AD16  $ADD3  $AE8F $AF4B  $B005  $B0BF  $B178  $B230  $B2E8  $B39F  $B455 
$B50A  $B5BF  $B673  $B726  $B7D9  $B88A  $B93C  $B9EC $BA9C  $BB4B  $BBFA  $BCA8  $BD55  $BE02  $BEAE  $BF5A 
$C005  $C0AF  $C159  $C202  $C2AB  $C353  $C3FA  $C4A1 $C548  $C5ED  $C693  $C737  $C7DC  $C87F  $C923  $C9C5 
$CA67  $CB09  $CBAA  $CC4B  $CCEB  $CD8B  $CE2A  $CEC8 $CF67  $D004  $D0A2  $D13F  $D1DB  $D277  $D312  $D3AD 
$D448  $D4E2  $D57C  $D615  $D6AE  $D746  $D7DE  $D876 $D90D  $D9A4  $DA3A  $DAD0  $DB66  $DBFB  $DC90  $DD24 
$DDB8  $DE4C  $DEDF  $DF72  $E004  $E096  $E128  $E1B9 $E24A  $E2DB  $E36B  $E3FB  $E48B  $E51A  $E5A9  $E637 
$E6C5  $E753  $E7E1  $E86E  $E8FB  $E987  $EA13  $EA9F $EB2B  $EBB6  $EC41  $ECCB  $ED55  $EDDF  $EE69  $EEF2 
$EF7B  $F004  $F08C  $F114  $F19C  $F223  $F2AB  $F332 $F3B8  $F43E  $F4C4  $F54A  $F5D0  $F655  $F6DA  $F75E 
$F7E3  $F867  $F8EA  $F96E  $F9F1  $FA74  $FAF7  $FB79 $FBFB  $FC7D  $FCFF  $FD80  $FE02  $FE82  $FF03  $FF83

::sqrt | n -- sqrt
	-? ( 0 nip ; )
	$100 <? ( 2 << 'sqrt-tabla + @ 12 >> ; )
	$10000 <? ( 8 >> 2 << 'sqrt-tabla + @ $ff83 24 *>> ; )
	$1000000 <? ( 16 >> 2 << 'sqrt-tabla + @ $ff83 $ff83 * 24 *>> ; )
	255 nip ;

|if (n<1) return 0;
|else if (n<(1<<8)+1)	return (int)(_sqrt_table[n]>>12);
|else if (n<(1<<16)+1)	return (int)(((long)0xFF83*_sqrt_table[n>>8])>>24);
|else return 255; 
|// else if (n<(1<<24)+1)return (int)(((long)0xFF83*0xFF83*_sqrt_table[n>>16])>>24);


::2DANGLE   | .x .y -- .angle 
::atan2 | x y -- a
	+? (				| y x
		over abs	| y x |y|
		2dup +		| y x abs(y) x+absy
		>r -			| x-abs(y)	  x+abs(y)
		$ff swap		| 1ff x-abs(y)
		$ff swap r>	| 1ff 1ff x-abs(y) x+abs(y)
	)( 
		over abs	| y x |y|
		2dup swap -	| y x abs(y) absy-x
		>r +		| 
		$2ff swap	| 
		$ff swap r> 
	) 
	0? ( 4drop drop 0 ; )
	*/ - swap -? ( drop neg )( drop ) ;

|inline int distance(int dx,int dy)// fast
|int min,max;
|if (dx<0) dx=-dx;if (dy<0) dy=-dy;
|if (dx<dy) { min=dx;max=dy; } else { min=dy;max=dx; }
|// coefficients equivalent to ( 123/128 * max ) and ( 51/128 * min )
|return (((max<<8)+(max<<3)-(max<<4)-(max<<1)+(min<<7)-(min<<5)+(min<<3)-(min<<1))>> 8);
::distfast | dx dy -- dis
	-? ( neg ) swap -? ( neg ) swap
	over <? ( swap ) | min max 
	dup 8 << over 3 << + over 4 << - swap 2* -
	over 7 << + over 5 << - over 3 << + swap 2* -
	8 >> ;


