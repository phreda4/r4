| Colores
| PHREDA
|--------------------------------

|--- inkes
::negro $000000 ink ;		
::azul $0000ff ink ;		::azull $0000cc ink ;
::verde $00ff00 ink ;		::verdel $00cc00 ink ;
::rojo $ff0000 ink ;		::rojol $cc0000 ink ;
::violeta $ff00ff ink ;		::cyan $00ffff ink ;
::cyanl $00cccc ink ;		::amarillo $ffff00 ink ;
::amarillol $cccc00 ink ;	::blanco $ffffff ink ;
::gris $888888 ink ;		::naranja $ff7f00 ink ;
::celeste $8888ff ink ;		::verdor $88ff88 ink ;

::oscuro ink@ 2/ $7f7f7f and ink ;
::claro ink@ 2* $010101 or ink ;

|--------------------------------------------------
| a b n 

:h0  $ff and over 8 *>> pick2 + $ff >? ( $ff nip ) 8 <<  | g-c
	pick2 rot + $ff >? ( $ff nip ) 16 << or	| r-max
	or ;	| b-min
:h1  not $ff and over 8 *>> pick2 + $ff >? ( $ff nip ) 16 << | r-c
	pick2 rot + $ff >? ( $ff nip ) 8 << or |g-max
	or ; | b-min
:h2	$ff and over 8 *>> pick2 + $ff >? ( $ff nip ) | b-c
	pick2 rot + $ff >? ( $ff nip ) 8 << or | g -max
	swap 16 << or ; | r-min
:h3	not $ff and over 8 *>> pick2 + $ff >? ( $ff nip ) 8 <<  | g-c
	pick2 rot + $ff >? ( $ff nip ) or | b -max
	swap 16 << or ; | r-min
:h4	$ff and over 8 *>> pick2 + $ff >? ( $ff nip ) 16 << | r-c
	pick2 rot + $ff >? ( $ff nip ) or | b -max
	swap 8 << or ; | g-min
:h5	not $ff and over 8 *>> pick2 + $ff >? ( $ff nip )  | b-c
	pick2 rot + $ff >? ( $ff nip ) 16 << or	| r-max
	swap 8 << or ; | g-min

#ach h0 h1 h2 h3 h4 h5 h0 h1 

| sistema de color para :r4
| a.. +		0-255		0..$ff
| b.. *		0-255		0..$ff
| h..Color	0-1536		0..$5ff
::abh>rgb | a b n -- color
	dup 8 >> $7 and 2 << 'ach + @ >r ; | $f and -> $1f

| yuv <-> rgb
|-----------------------------
::rgb2yuv | rgb -- yuv
	over 2* pick3 - pick2 - 3 >>  >r
	pick2 over - 2 >> 128 + >r
	+ + 2 >> r> r> ;

:bound | i -- i
	$ff >? ( $ff nip ) -? ( 0 nip ) ;

::yuv2rgb | yuv -- rgb
	pick2 16 - 76283 * pick2 128 - 132252 * + 16 >> bound >r
	pick2 16 - 76283 * pick2 128 - 25624 *  - pick2 128 - 53281 * - 16 >> bound >r
	nip 128 - 104595 * swap 16 - 76283 * + 16 >> bound r> r> ;

::yuv32 | yuv -- col
	pick2 16 - 76283 * pick2 128 - 132252 * + 16 >> bound >r
	pick2 16 - 76283 * pick2 128 - 25624 *  - pick2 128 - 53281 * - 16 >> bound 8 << $ff00 and >r
	nip 128 - 104595 * swap 16 - 76283 * + 16 >> bound 16 << $ff0000 and r> or r> or ;

| degrade entre dos colores
|--------------------------------------
#col1
#col2
#rc #gc #bc
#sr #sg #sb

::pasocol | -- col
	rc sr + dup 'rc ! $ff0000 and 
	gc sg + dup 'gc ! 8 >> $ff00 and or
	bc sb + dup 'bc ! 16 >> $ff and or ;

| otra implementacion-------------
|:paso2 | r g b -- r g b col
|	rot sr + dup $ff0000 and >r
|	rot sg + dup 8 >> $ff00 and >r
|	rot sb + dup 16 >> $ff and r> or r> or ;

|------------------------------------
::cmorph | cant col1 col2 addr -- addr'
	>r over r!+
	over $ff0000 and dup 'rc ! over $ff0000 and swap - pick3  / 'sr !
	over 8 << $ff0000 and dup 'gc ! over 8 << $ff0000 and swap - pick3  / 'sg !
	swap 16 << $ff0000 and dup 'bc ! swap 16 << $ff0000 and swap - over  / 'sb !
	1- ( 1? )( 1- pasocol r!+ ) drop
	r> ;

|------------------------------------
::setcol1 | col1 --
	dup 'col1 !
	dup $ff0000 and 'rc !
	dup 8 << $ff0000 and 'gc !
	16 << $ff0000 and 'bc !
	;	

::setcol2 | cant col2 -- cant
	dup 'col2 !
	dup $ff0000 and rc - pick2 / 'sr !
	dup 8 << $ff0000 and gc - pick2 / 'sg !
	16 << $ff0000 and bc - over / 'sb !
	;

::colmorph | cant addr -- adr'
	>r col1 r!+
	1- ( 1? )( 1- pasocol r!+ ) drop 
|	col1 'col2 !	| si continua
	r> ;

::colsolid | cant addr -- addr'
	>r col1 swap
	( 1? )( 1- over r!+ ) 
	2drop r> ;

| diferencia de color
|--------------------------------------
|int DiffRGB2(unsigned long int a, unsigned long int b)
|  return abs((a>>16)-(b>>16)) + abs(((a>>8)&255)-((b>>8)&255)) + abs((a&255)-(b&255));
::diffrgb2 | a b -- v
	over 16 >> over 16 >> - abs | a b a1
	pick2 8 >> $ff and pick2 8 >> $ff and - abs + | a b a2
	rot $ff and rot $ff and - abs + ;

|int DiffRGB4(unsigned long int a, unsigned long int b, unsigned long int c, unsigned long int d)
| return abs((a>>16)-(b>>16)) + abs(((a>>8)&255)-((b>>8)&255)) + abs((a&255)-(b&255))
|       + abs((a>>16)-(d>>16)) + abs(((a>>8)&255)-((d>>8)&255)) + abs((a&255)-(d&255))
|       + abs((c>>16)-(d>>16)) + abs(((c>>8)&255)-((d>>8)&255)) + abs((c&255)-(d&255))
|       + abs((c>>16)-(b>>16)) + abs(((c>>8)&255)-((b>>8)&255)) + abs((c&255)-(b&255));
::diffRGB4 | a b c d -- v
	pick3 16 >> dup pick4 16 >> - abs swap pick2 16 >> - abs + | a b c d v
	pick3 8 >> $ff and dup pick4 8 >> $ff and - abs swap pick2 8 >> $ff and - abs + |
	pick3
	|*********
	;

|uint32 vdavgpixel(uint32 a, uint32 b) {
|	return (a|b) - (((a^b)&0xfefefefe)>>1);
::colavg | a b -- c
	2dup xor $fefefefe and 2/ >r or r> - ;

|uint32 vdlerppixel(uint32 a, uint32 b, unsigned alpha) {
|	return a + (((((b&0xff00ff) - (a&0xff00ff))*alpha + 0x00800080)>>8) & 0xff00ff) + 
|				(((((b&0xff00) - (a&0xff00))*alpha + 0x008000)>>8) & 0xff00);
:collerp | a b al --c
	>r dup 
	$ff00ff and pick2 $ff00ff and - r * $800080 + 8 >> $ff00ff and r> swap >r >r
	$ff00 and over $ff00 and - r> * $8000 + 8 >> $ff00 and + r> + ;


|---------- suma saturada 8 bit por canal
::sadd | color1 color2 -- col1+col2	 
	2dup + dup >r 			| col1 col2 res     r: res
	 xor xor $1010100 and	| overflow   r: result o $808080
	r> over -				| over result-over
	swap dup 8 >> -			| result over 8 >> 
	or $ffffff and ;			| result OR over 
