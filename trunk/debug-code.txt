| debug-code.txt
| PHREDA 2010
|---------------------------------------
^lib/reda4.txt
^lib/gui.txt
^lib/parse.txt
^lib/codecolor.txt
^lib/fontt.txt
^lib/dlgfile.txt
^lib/trace.txt

^lib/sort.txt
^lib/form.txt
^r4code.txt

#ncar 0
#nlin 0
#nombre )( 64

#mensaje )( 64
#consola )( 1024
#pagina
#actual

:mensaje! 'mensaje strcpy ;

:mkplain
	"r4plain.txt" run ;

:mkasm
	"r4fasm.txt" run ;

|---- pilav

|-------- VER PALABRA
#iniword 0
#actualw 0
#maxw 0
#usaw 0
#actw 0
#arrword )( 1024 | 128 palabras
#arrword> 'arrword

:+tok
	arrword> !+ !+ 'arrword> ! ;

:makeword
	'arrword 'arrword> !
    actual ind2nro
	dup nro>mov @ 24 << 24 >> 'usaw !
	nro>toklen dup 'maxw !
	swap 4 - swap 1+
	0 'actw !
	( 1? )( 1-
		swap @+
		dup tok>udr drop nip
		| maxw +
		swap +tok swap )
	2drop ;


:gridl | n
	3 << 'arrword +
	@+ dup tokenstr gcell
	tok>udr
	rot "%d" gcellc
	swap "%d" gcellc
    "%d" gcellc
	@ "%b" gcell
	;

#gridw 2 4 2 2 2 6
:gridword
	'gridw 6 0.96 grid
	"Nro" gcellc
	"token" gcellc
	"USO" gcellc
	"PILAD" gcellc
	"PILAR" gcellc
	"FORMA" gcellc
	cr
	iniword 21 ( 1? )( 1- swap
		maxw <=? ( rowg
			dup actualw =? ( blanco "* %d *" )( verde " %d" ) gcellc
			dup gridl cr )
		1+ swap ) 2drop
	gris $grid
	;

:refrescaw
	actualw -? ( 0 nip )
	maxw >? ( maxw nip )
	iniword <? ( dup 'iniword ! )
	iniword 20 + >? ( dup 20 - 'iniword ! )
	'actualw !
	;

:armastring | valor --
	" | " print
	dup 24 << 24 >> | usedD
	neg dup ( 1? )( 1- "a" print ) drop
	" -- " print
	swap 8 << 24 >> + | deltaD
	( 1? )( 1- "b" print ) drop
	;

:viewWord
	0 'iniword !
	0 'actualw !
	makeword
	inigui
	'exit >esc<
	[ 1 'actualw +! refrescaw ; ] <dn>
	[ -1 'actualw +! refrescaw ; ] <up>
	[ 20 'actualw +! refrescaw ; ] <pgdn>
	[ -20 'actualw +! refrescaw ; ] <pgup>
	show clrscr
		32 gc.top $f gc.hfill
		font-vard-12-bold home cr2
		verde dup " :R%d" print
		blanco "WORD " print

		26 gc.botton $00000f gc.hfill
		font-vard-8-bold home cr2
		rojo sp 'exit "esc-Exit" btnt
		amarillo

		32 26 gc.vbetween
		home blanco
		actual ind2nro
		dup nro>nom " :%w" rojo print
		nro>mov @ blanco
		dup armastring cr
		dup 16 << 24 >> " nivel: %d " print
		dup 24 << 24 >> "uso:%d " print
		dup 24 >> "dR:%d " print
		8 << 24 >> "dD:%d " print
		cr
		usaw "usaW:%d" print cr
		gridword
		cmano ;

|-------- VER DICCIONARIO

:tipomov
	dup 24 << 24 >> swap
	dup 16 << 24 >> swap
	dup 8 << 24 >> swap
	24 >> "R:%d D:%d N:%d U:%d" gcell
	;

:gridline2 | nro --
	5 << 'indicepal +
	indicepal> >? ( drop ; )
	dup 8 + @ 1 and? ( violeta "#" )( rojo ":" ) nip
	swap @+ rot
	"%s%w" gcell
	@+ "%h" gcell
	@+ "%h" gcell
	@+ "%h" gcell
	@+ "%d" gcell
	@+ "%d" gcell
	@+ tipomov |	@+ "%h" gcell
	@ "%h" gcell
	;

:refrescaind
	actual -? ( 0 nip )
	cntw >? ( cntw nip )
	pagina <? ( dup 'pagina ! )
	pagina 20 + >? ( dup 20 - 'pagina ! )
	'actual !
	;

#grid1 2 4 3 4 3 2 2 6 4
:gridindexwords
	'grid1 9 0.96 grid
	"Nro" gcellc
	"string" gcellc
	"token" gcellc
	"info" gcellc
	"mem" gcellc
	"len" gcellc
	"calls" gcellc
	"dir" gcellc
	"group" gcellc
	cr
	pagina 21 ( 1? )( 1- swap
		cntw <=? ( rowg
			dup actual =? ( blanco "* %d *" )( verde " %d" ) gcellc
			dup ind2nro gridline2 cr )
		1+ swap ) 2drop
	gris $grid
	;

:viewDicc
	inigui
	'exit >esc<
	[ 1 'actual +! refrescaind ; ] <dn>
	[ -1 'actual +! refrescaind ; ] <up>
	[ 20 'actual +! refrescaind ; ] <pgdn>
	[ -20 'actual +! refrescaind ; ] <pgup>
	'viewWord <enter>
	show clrscr
		32 gc.top $f gc.hfill
		font-vard-12-bold home cr2
		verde dup " :R%d" print
		blanco "DICC " print
		'mensaje print
		cntw " %d palabras" print

		26 gc.botton $00000f gc.hfill
		font-vard-8-bold home cr2
		rojo sp 'exit "esc-Exit" btnt
		verde sp 'viewWord "enter-viewWord" btnt
		amarillo

		32 26 gc.vbetween
		home
		gridindexwords cr
		actual ind2nro printword cr

		cmano ;

|----------------------------------
:helpmodo
	;

:memmapv
	d.get memmap
	;

#voc-system
"BYE" "HELP" "RESETVM" "MEMMAP"
( 0 )

#exe-system
'exit 'helpmodo 'resetvm 'memmapv
0

:nextw
    ( c@+ 32 >? )( drop )
	0? ( drop 1- )( drop )
	;

:pushnro | val --
	basen
	10 =? ( drop d.pushDec ; )
	2 =? ( drop d.pushBin ; )
	drop
	d.pushHex ;
	;

:palabraconsola | str -- str'
	( dup c@ 33 <? )( 0? ( nip ; ) drop 1+ )		| quitar espacios
|	$5e =? ( drop esinclude ; )			| $5e ^  Include
|	$7c =? ( drop escomentario ; )		| $7c |	 Comentario
|	$3A =? ( drop esdefinicion ; )		| $3a :  Definicion
|	$23 =? ( drop esvariable ; )		| $23 #  Variable

|	$22 =? ( drop escadena ; )			| $22 "	 Cadena

	$27 =? ( drop 1+ dup 				| $27 ' Direccion
		dup ?macro 1? ( 3drop "mACROnOTdIR" mensaje! 0 ; ) drop
		?palabra 1? ( nip stepadr nextw ; ) 2drop
		"NOTdIR" seterror 3 - 0 ; )
	drop
	dup ?numero 1? ( drop pushnro nip ; ) drop
	dup ?fnumero 1? ( drop d.pushFix nip ; ) drop
	dup 'voc-system inupp? 1? ( 1- 2 << 'exe-system + @ exec nextw ; ) drop
	dup ?macro 1? ( stepmacro nextw ; ) drop
	dup ?palabra 1? ( stepword nextw ; ) drop
	2drop 0
	"NOTfOUND" mensaje! ;

:correconsola
	'consola ( palabraconsola 0? ) drop
	0 'consola !
	;

|----------------------------------
:maindebug
	cntw 'actual !
	refrescaind

	inigui
	'exit >esc<
	'correconsola <enter>
	show clrscr
		32 gc.top $f gc.hfill
		font-vard-12-bold home cr2
		verde dup " :R%d" print
		blanco "DEBUG " print
		'mensaje print
		cntw " %d palabras" print

		26 gc.botton $00000f gc.hfill
		font-vard-8-bold home cr2
		rojo sp 'exit "esc-Exit" btnt
		amarillo
		sp 'stepvm dup <f1> "f1-Step" btnt
		sp 'stepvmn dup <f2> "f2-StepN" btnt
		sp 'viewDicc dup <f3> "f3-ViewDicc" btnt

		sp 'mkplain dup <f10> "f10-GenPlain" btnt
		sp 'mkasm dup <f11> "f11-ASM" btnt

		32 26 gc.vbetween
		fonti home
		rojo 'mensaje cr printx
		blanco "> " print
		'consola 32 inputline cr
		verde vm.dump
		cmano ;


:main
	'ncar "mem/edit-code.mem" load drop
	'nombre tokencomp
	msg 1? ( drop saverror ; ) drop
	tokenpost
	msg 1? ( drop saverror ; ) drop
	startvm
	maindebug
	;

: 0 paper
	mark
	4 main
	empty ;
