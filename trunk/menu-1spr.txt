| Editor de nsprite
| PHREDA 2008
|--------------------------------------------------
^libgui.txt
^libsprite.txt
^trace.txt

^dlgfile.txt
^dlgsino.txt
^dlgcolor.txt

#actual

#indpol )( $100 #indpol>
#dibujo )( $1000 #dibujo>
#trazo )( $1000 #trazo>
#hojas )( $10000 #hojas>
#indice )( $1000 #indice>

#modo 0
#etrazo 1

#policursor -1
#poini
#pofin

#lastnodo 0
#cursor 0

#colora $ff0000
#colorb $ff00
#coltipo 0
#colcen
#colmat

#zoom

#xd #yd
#xi #yi
#xl #yl

#grillamodo
#egrilla 2

#nombre )( 64

:angulo | p1 p2 -- ang
	over d>y over d>y - >r
	swap d>x swap d>y - r>
	atan2 ;

:cltrazo
	'trazo 0 over ! 'trazo> ! ;
:++trazo | p --
	trazo> 4 - @ =? ( drop ; )
	trazo> 8 - 'trazo >=? (
		@+ pick2 angulo >r
		@ over angulo r> - abs
		$a <? ( drop trazo> 4 - ! ; )
		$7f5 >? ( drop trazo> 4 - ! ; )
		)
	drop
:+trazo | p --
	trazo> !+ 0 over ! 'trazo> ! ;
:trazo!
	trazo> 4 - dup @ $f and rot or swap ! ;

:dibnodos | a--
	( @+ 1? )( >xy 2 box ) 2drop ;

:cldibujo
	'dibujo 0 over ! 'dibujo> !
	'indpol 0 over ! 'indpol> ! ;

:+dibujo | p --
	dibujo> !+ 'dibujo> ! ;
:0dibujo
	0 dibujo> ! ;

:,indpol
	indpol> !+ 'indpol> ! ;

:haceindice
	'indpol 'indpol> !
	'dibujo dup ,indpol
	( @+ 1? )( $f and
		$c >? ( over ,indpol )
		drop ) 2drop
	-4 'indpol> +!
	dibujo> indpol> !
	;

|--------------------------------------------------
#xmax #xmin #ymax #ymin

:setparam
	'trazo
	@+ d>xy
	dup 'ymin ! 'ymax !
	dup 'xmin ! 'xmax !
	( @+ 1? )( d>xy
		ymin <? ( dup 'ymin ! ) ymax >? ( dup 'ymax ! ) drop
		xmin <? ( dup 'xmin ! ) xmax >? ( dup 'xmax ! ) drop
		) 2drop
	xmax xmin + 2/ ymax ymin + 2/ xy>d 'colcen !
    xmin ymin xy>d 'colmat !
	;

|--------------------------------------------------
#xcycwh 0 0 0 0

:savebox
	xc yc w h 'xcycwh !+ !+ !+ ! ;

:loadbox
	'xcycwh @+ 'h ! @+ 'w ! @+ 'yc ! @ 'xc ! ;

:drawdibujo
	loadbox
	grillamodo 0? ( blanco gc.fbox ) drop
	'dibujo nsprite
	egrilla gris 2* rgrilla
	lastnodo 0? ( drop ; )
	blink 1? ( negro )( blanco ) drop
	@ >xy 4 box
	;

:editmode
	drawdibujo
	blink 1? ( negro )( blanco ) drop
    drawnodos
	[ 0 'cursor ! ; ] onUp
	[ xymouse tocanodopoli 1? ( dup 'lastnodo ! ) 'cursor ! xy> 'oxy ! ; ] onDn
	[ xymouse cursor 1? ( muevenodo ; ) drop polimove ; ] onMove
	;

|--------------------------------------------------
:vistamode
	[ xymouse 'yd ! 'xd ! ; ] onDn
	[ xymouse loadbox dup yd - 'yc +! 'yd ! dup xd - 'xc +! 'xd ! savebox ; ] onMove
	loadbox
	zoom 1.3 + sh 16 *>> dup 'w ! 'h !
	savebox
	drawdibujo
	;


|--------------------------------------------------
:resetspr
	cldibujo
	cltrazo
	0 dup 'poini ! 'pofin !
	-1 'policursor !
	0 'modo ! ;
	1 'coltipo !
	1 'etrazo !
	0 'lastnodo !
	;

:borrodib
	"Borro Dibujo ?" dlgsino
	1? ( resetspr ) drop
	;

#editbotgui 5
$ff0000 'ifin 'exit
$ff00ff 'iborrar 'borrodib
$ffffff 'itacho 'btncolor
0 0 0
0 0 0

:botonedit
	'editbotgui .hbtns ;

:botonherra
	modo
	0? ( drop 'guitrazo .hbtns ; )
	1- 0? ( drop 'guinodo .hbtns ; )
	1-
|	1- 0? ( drop 'zoom .hslide ; )
	drop
	;

#modogui 5  'idibuja 'istop 'irec 'ilupa 'itrazo

:modoestado
	'modo 'modogui .vradio drop ;

:edititulo
	verde fonti
	modo "modo:%d" print cr
	over "%d" print cr
	policursor "%d " print ;

|------------------------------------------------
#accmodos 'trazomode 'editmode 'nodomode 'vistamode 'lineasmode

:ventanadibujo
    modo $3 and 2 << 'accmodos + @ >r ;

:dumpdibujo
	fonti |	azul pofin poini "%d %d" print cr
	verde
	0 'dibujo ( dibujo> <? )(
		poini =? ( rojo )
		pofin =? ( verde )
		@+ "%h " print
		swap 1+ $7 nand? ( cr ) swap
		) 2drop
 	;

#editgui
0.8 0.8 0 0 'ventanadibujo
0.4 0.1 0.2 0.45 'botonherra
0.4 0.1 -0.3 0.45 'botonedit
0.1 0.5 -0.45 0 'modoestado
0.1 1.0 0.45 0 'zonaderecha
0

|-----------------------------------
:editando
	inikey
	'exit <esc>
	0 0 fpos
	zoom 1.3 + sh 16 *>> dup 'w ! 'h !
	savebox
	show cls
		|scr dumpdibujo
		scr 'editgui gui
		cflecha
		;

|--------------------------------------------------
|--------------------------------------------------
|--------------------------------------------------
|--------------------------------------------------
:load-car | --
	resetspr
	actual @ 0? ( drop ; )
	'dibujo swap zcopy 4 - 'dibujo> !
	-1 'policursor !
	1 'coltipo !
	haceindice
	;

:save-car | --
	hojas> dup actual ! 'dibujo zcopy 'hojas> ! ;

:newline 13 ,c 10 ,c ; | m#@$#!%@$#

#compnombre )( 64

:compone | ".ext" "n" -- "n.ext"
	 'compnombre swap
	( c@+ 1? )( rot c!+ swap )  2drop
	swap
	( c@+ 1? )( rot c!+ swap ) rot c!
	drop 'compnombre ;

|--- quita los tokens innecesarios ( los degrade y la matriz )
#buffopt )( $4000
#buffopt> 'buffopt

:printbuff
	0 'buffopt
	buffopt> >=? ( 2drop ; )
	"#:dib" ,s pick3 ,h 32 ,c
	( buffopt> <? )(
		@+ " $%h" ,print
		swap 1+ 8 >? ( drop 0 newline )
		swap ) 2drop
	newline
	;

:procbuff | adr --
	'buffopt swap
	( @+ 1? )(
		dup $f and
		$d =? ( drop rot 12 - rot rot dup )
		drop
		rot !+ swap
		)
	rot !+ 'buffopt> !
	drop
	;

:save-code
	clear
	1 'indice
	( @+ 1? )(
		procbuff
		printbuff
		swap 1+ swap
		) 3drop

	newline
|	"#:cntdib " ,s dup ,n newline
|	"#:dibs" ,s 0
|	( over <? )( 1+ " 'dib" ,s dup ,h
|		dup $f and 0? ( newline ) drop
|		) drop
|	newline
	"./inc/" dir
	mem here over - ".inc" 'nombre compone save
	;

:copy-dibu
	actual @ 0? ( drop ; )
	hojas> indice> !+ 'indice> !
	hojas> swap zcopy 'hojas> ! ;

:ante-dibu
	actual 'indice =? ( drop ; )
	dup 4 - over @ over @ swap rot ! swap !
	-4 'actual +! ;

:post-dibu
	actual indice> 4 - >=? ( drop ; )
	dup 4+ over @ over @ swap rot ! swap !
	4 'actual +! ;

:borra-dibu
	actual @ 0? ( drop ; ) drop
	"Borro Dibujo ?" dlgsino
	1? ( actual dup 4+ zcopy 4 - 'indice> !
		0 'actual !
		) drop
;

|--------------------------------------------------
:cleardibujos
	'indice >r 128 ( 1? )( 0 r!+ 1- ) drop rdrop
	'dibujo 'dibujo> ! 
	'hojas 'hojas> !
	'indice dup 'indice> ! 'actual  ! ;

:load-dibu
	cleardibujos
	'hojas 'nombre load
	dup 'hojas> ! 0 swap 4+ !+ 0 swap !
	'indice 'hojas ( dup @ 1? )( drop dup
		rot !+ swap ( @+ 1? )( drop ) drop
		) 2drop 'indice> ! ;

:save-dibu
	clear
	'indice ( @+ 1? )( ( @+ 1? )( , ) , drop ) , drop
	mem here over - 'nombre save ;


:editahoja
	| savemem
	"edit-1spr.txt" run

	;

:eligearchivo
	save-dibu
	"./spr/" dir
	'nombre dlgfile
	load-dibu
	;


|--------------------------------------------------
#menu1 7
$0000ff 'idibuja 'editahoja
$0000ff 'icopia	'copy-dibu
$0000ff 'iizq 'ante-dibu
$0000ff 'ider 'post-dibu
$0000ff 'iborrar 'borra-dibu
$00ff00 'irecicla 'save-code
0 0 0

:cadadib | n n -- n n
	2dup 3 << +   | x y nro
	2 << 'indice +
	actual =? ( blanco gc.fbox )
	[ dup 'actual ! ; ] onUp
	0.9 [ 1.2 nip ; ] onIn fzoom
	@ 1? ( nsprite )( drop )
	;

:tabladib
	8 8 'cadadib .table	;

:botonera 'menu1 .hbtns ;

:titulo
	$ff00 $222222 [ swap ; ] onIn  vbtn
	1 sfont negro "r4Spr:" print
	blanco 'nombre printc
	'eligearchivo onUp
	;

:salirbtn
    'exit 'ifin $ff0000 .btns ;

#guimenu
0.9 0.1 -0.05 -0.45 'titulo
0.1 0.1 0.45 -0.45 'salirbtn
0.8 0.8 0 0 'tabladib
0.5 0.1 -0.25 0.45 'botonera
0

:menu-dibujos
	inikey
	'exit >esc<
	'editahoja <f1>
	'copy-dibu <f2>
	'ante-dibu <f3>
	'post-dibu <f4>
	'borra-dibu <f5>
	[ 4 'actual +! ; ] <der>
	[ actual 'indice >? ( 4 - ) 'actual ! ; ] <izq>
	'save-code <f6>
	'eligearchivo <esp>
	'editahoja <enter>
	show cls scr
       	'guimenu gui
		cmano
		;

|--------------------------------------------------

|--------------------------------------------------
|--------------------------------------------------
| savecode
|--------------------------------------------------

:newline 13 ,c 10 ,c ; | m#@$#!%@$#

#compnombre )( 64

:compone | ".ext" "n" -- "n.ext"
	 'compnombre swap
	( c@+ 1? )( rot c!+ swap )  2drop
	swap
	( c@+ 1? )( rot c!+ swap ) rot c!
	drop 'compnombre ;

|--- quita los tokens innecesarios ( los degrade y la matriz )
#buffopt )( $4000
#buffopt> 'buffopt

:printbuff
	0 'buffopt
	buffopt> >=? ( 2drop ; )
	"#:dib" ,s pick3 ,h 32 ,c
	( buffopt> <? )(
		@+ " $%h" ,print
		swap 1+ 8 >? ( drop 0 newline )
		swap ) 2drop
	newline
	;

:procbuff | adr --
	'buffopt swap
	( @+ 1? )(
		dup $f and
		$d =? ( drop rot 12 - rot rot dup )
		drop
		rot !+ swap
		)
	rot !+ 'buffopt> !
	drop
	;

:save-code
	clear
	'dibujo
	procbuff
	printbuff

	newline
|	"#:cntdib " ,s dup ,n newline
|	"#:dibs" ,s 0
|	( over <? )( 1+ " 'dib" ,s dup ,h
|		dup $f and 0? ( newline ) drop
|		) drop
|	newline
	"./inc/" dir
	mem here over - ".inc" 'nombre compone save
	;

|-----------------------------------------
:	33
	resetspr clear
	'nombre "./nom/edit-spr.nom" load drop
	"./spr/" dir
	load-dibu
	'indice 'actual !
	menu-dibujos
	"./spr/" dir
	save-dibu
	"./" dir
	'nombre count "./nom/edit-spr.nom" save
	"main.txt" run ;

