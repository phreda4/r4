| busca error de runtime en  :r4
| PHREDA
|---------------------------------------
^reda4.txt
^libgui.txt
^fontj.txt
^parse.txt
^compilanada.txt
^trace.txt

#nombre )( 64
#iperr -1	| lugar del error
#codins		| codigo instruccion

#pilad )( 1024
#pilad> 'pilad

#pilar )( 1024
#pilar> 'pilar

#dircode
#cntcode
#dirdata
#cntdata

#msge
#erroren 

:+data | n --
	pilad> !+ 'pilad> ! ;
:+code | n --
	pilar> !+ 'pilar> ! ;

:printdata
	"D:" print
	'pilad
	( pilad> <? )(
		@+ "%d " print )
	drop ;

:printpilar
	"R:" print
	'pilar
	( pilar> <? )(
		@+ "%h " print )
	drop ;

:loadruntime.err
	mem "runtime.err" load mem 4+ <? ( drop  ; ) 0 swap !
	mem
	'nombre swap ( c@+ 13 <>? )( 0? ( 3drop ; ) rot c!+ swap ) drop 0 rot c!
	trim "IP: " scanp 0? ( 2drop ; )
	trim ?int -? ( 2drop ; ) 'iperr !
	trim ?int -? ( 2drop ; ) 'codins !
	trim "D: " scanp 0? ( 2drop ; )
	( trim
		dup ?numero 1? ( drop +data nip )
		0? 	) drop
	trim ")" scanp 0? ( 2drop ; )
	trim "R: " scanp 0? ( 2drop ; )
	( trim
		dup ?numero 1? ( drop +code nip )
		0? 	) drop
	trim ")" scanp 0? ( 2drop ; )
	trim "code:" scanp 0? ( 2drop ; )
	trim ?int -? ( 2drop ; ) 'dircode !
	trim "cnt:" scanp 0? ( 2drop ; )
	trim ?int -? ( 2drop ; ) 'cntcode !
	trim "data:" scanp 0? ( 2drop ; )
	trim ?int -? ( 2drop ; ) 'dirdata !
	trim "cnt:" scanp 0? ( 2drop ; ) 
	trim ?int -? ( 2drop ; ) 'cntdata !
	drop
	;


:pantalla
	clear
	mem 'nombre load 0 swap c!
	mem bytecodecomp 'msge !

|	iperr buscapal 'erroren !

	inikey
	'exit >esc<
	show cls scr fontj  |	48 font
		blanco
		'nombre  "%s" print cr
		codins iperr "IP:%d %d" print cr
		printdata cr
		printpilar cr
		cntcode dircode "CODE:%d %d" print cr
		cntdata dirdata "DATA:%d %d" print cr
		erroren "%s" print cr
		dumptoken
|		printcode
		;


|----------- principal
:main
	loadruntime.err
	pantalla
	;

: 0 paper 4 main "main.txt" run  ;

