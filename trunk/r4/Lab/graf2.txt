| rutinas graficas 2
| para compilador
| PHREDA 2009
|----------------------------
^r4/lib/gui.txt
^r4/lib/trace.txt

| lineas
#px #py
#ymin $ffff #ymax -1

| segmentos
| ymin x deltax ymax
|#....
-1 -1 -1 -1
#segs )( 2048
#segs> 'segs

| activos por linea
| @segs
#activos )( 1024
#activos> 'activos

| linea de segmentos
#..... 0
#linea )( 1024
#linea> 'linea

| color
#rc #gc #bc
#sr #sg #sb

|--------------------------------------
:fillsolid | cnt --
	( 1? )( 1- inka px!+ ) drop ;

|--------------------------------------
:pasocol | -- col
	rc sr + dup 'rc ! $ff0000 and
	gc sg + dup 'gc ! 8 >> $ff00 and or
	bc sb + dup 'bc ! 16 >> $ff and or ;

:fillramp | cnt --
	inka px!+ 1- ( 1? )( 1- pasocol px!+ ) drop inkb 'inka ! ;

:setramp | cnt --
	inka inkb
	over $ff0000 and dup 'rc ! over $ff0000 and swap - pick3  / 'sr !
	over 8 << $ff0000 and dup 'gc ! over 8 << $ff0000 and swap - pick3  / 'sg !
	swap 16 << $ff0000 and dup 'bc ! swap 16 << $ff0000 and swap - swap  / 'sb ! ;

:addramp | cnt --
	sr over * 'rc +!
	sg over * 'gc +!
	sb * 'bc +! ;

| degrade entre dos colores
|------------------------------------
::cmorph | cant col1 col2 --
	over px!+
	over $ff0000 and dup 'rc ! over $ff0000 and swap - pick3  / 'sr !
	over 8 << $ff0000 and dup 'gc ! over 8 << $ff0000 and swap - pick3  / 'sg !
	swap 16 << $ff0000 and dup 'bc ! swap 16 << $ff0000 and swap - over  / 'sb !
	1- ( 1? )( 1- pasocol px!+ ) drop ;

|---------------------------------
| formato de scanline
| 00 <-color
|   000 <-cantidad de pixels
|      000 <-pixel de inicio
| precondiciones:
| pixel de inicio esta ordenado
| la cantidad de pixels puede solaparse
|
|
#paleta0
$0ff
$ff
$ff00
$ff0000

#scanline
$0100f002
$0000f003
$0200303f
$0000f04f
$0300f06f
$0000f07f
0

#scanline2
$0100f003
$0000f005
$0200303f
$0000f045
$0300f06f
$0000f075
0

#scanline3
$01005032
0

| 1.- xini es > a xact.. rellenar lo que falta (o avanzar)
| 2.- calcular degrade (antes buscar colores)
| 3.- buscar solapamiento del siguiente

#xact 0
:renderscanline | 'scanline --
	0 'inka !
	0 'xact !
	( @+ 1? )(
		dup $fff and
		xact >? ( dup xact - fillsolid )

		over 22 >> $3fc and 'paleta0 + @ 'inkb !
		swap 12 >> $fff and 1? ( dup setramp fillramp )( drop )

		'xact !
		inkb 'inka !
		) 2drop
	;

:insscan | v dir-4 vx --
	4+ dup | v dir d2
	4+ over linea> over - 2 >> move>
	!
	4 'linea> +! ;

:addscan | v --
	linea>
	( 'linea >? )( 4 -
		dup @ $fff and pick2 $fff and
		<? ( drop insscan ; )
		drop )
	drop
	linea> !+ 'linea> !	;

|--- with scanline
:generoscanline
	'linea 'linea> !
	'activos
	( activos> <? )( @+ | dir
		4+ dup
		@+ swap @ | dirx x deltax
		over + | x newx
		rot over swap ! | actualiza x
		over >? ( swap ) | x2 x1
		16 >> swap 16 >> over - | x1 dif
		12 << $fff000 and or
		$02000000 or | color
		addscan
		) drop
	0 linea> !
	'linea renderscanline
|	'scanline3 renderscanline
	;

|--- with fill
:_hline | x1 y1 x2 --    ; clip x1-x2
	-? ( 3drop ; ) sw >? ( drop sw )
	rot sw >? ( 3drop ; ) -? ( drop 0 )	| y1 x2 x1
	rot over 1+ swap 						| x2 x1 x1 y1
	setxy - |1+
	( 1? )( 1- ink@ px!+ ) drop
	;

|------fill polygon
:insseg | ymax deltax x ymin seg --
	16 + dup
	16 + over segs> over - 2 >> move>
	!+ !+ !+ !
	16 'segs> +!
	;

:addseg | ymax deltax x ymin --
	segs>
	( 'segs >=? )( 16 -
		dup @ pick2 <? ( drop insseg ; )
		drop )
	drop
	segs> !+ !+ !+ !+ 'segs> ! ;

|-----
:pline2 | x y --
	py =? ( drop 'px ! ; ) | no usa lineas horizontales
	over px - 16 << over py - 				| x y dx dy
	-? ( / py 2over )( / over px py )	| x y deltax ymax xmin ymin
	sh >? ( 4drop 'py ! 'px ! ; )
	-? ( neg pick3 * 16 >> + 0 )
	dup ymin <? ( 'ymin ! )( drop )
	>r >r
	-? ( rdrop rdrop 2drop 'py ! 'px ! ; )
	dup ymax >? ( 'ymax ! )( drop )
	1- swap r> 16 << r>
    addseg | ymax deltax xmin ymin --
:op2 | x y --
	'py ! 'px ! ;

|-----------------------
| seg
| ymin x deltax ymax

:deld | ad+4 x
	over
	( activos> <? )( dup @ swap 4 - !+ 4+ )
	4 - 'activos> !
	swap 4 - swap ;


:getxn | adr seg -- adr x
	dup 12 + @ pick3 =? ( 'deld >r ) drop
	4+ dup @+ swap @ 	| dirx x deltx
	2dup
	2/ + >r
	+ swap !
	r> 16 >> ;

:filllines | y -- y
	'activos
	( activos> <? )(
		@+ getxn >r
		@+ getxn r>
		over <? ( swap )
		pick3 swap _hline
		) drop
	'activos @+ 4+ @ swap | x1 'activo
	( activos> <? )( @+
		4+ @ rot >? ( over 8 - dup @+ swap @ rot !+ ! )
		swap ) 2drop ;


|---- ordenando (en x)
:addsortc | v po di+ v --
	drop 4 -
	dup @+ swap | v po di v di+
	( activos> <? )( dup @ rot rot !+ )
	!+ 'activos> ! !
	;

:addsort | v -- v
	dup 4 - dup 4+ @ | v po vx1
	'activos
	( activos> <? )( @+
		4+ @ 		| v po vx1 di+ vx2
		rot swap    | v po di+ vx1 vx2
		>? ( addsortc ; )
		swap )
	nip !+ 'activos> ! ;

|-----
::poli2
	sh ymax <? ( 'ymax ! )( drop ) |-
	-1 segs> ! | marca ultimo
	'activos 'activos> !
	'segs
	ymin ( ymax <? )(
		swap ( @+ pick2 =? )( drop addsort 12 + ) drop 4 - swap
		filllines
		1+ )
	2drop
	'segs 'segs> !
	$ffff 'ymin ! -1 'ymax ! ;


|-----

:hline3 | x1 y1 x2 --    ; clip x1-x2
	-? ( 3drop ; ) sw >? ( drop sw )
	rot sw >? ( 3drop ; ) -? ( drop 0 )	| y1 x2 x1
	rot over 1+ swap 						| x2 x1 x1 y1
	setxy - |1+
	( 1? )( 1- ink@ px!+ ) drop
	;

:scanline3
	;

:getxn3 | adr seg -- adr x
	dup 12 + @ pick3 =? ( 'deld >r ) drop
	4+ dup @+ swap @ 	| dirx x deltx
	over + | x newx		| dir x newx
	rot !				| x1
	16 >> ;

:filllines3 | y -- y
	'activos
	( activos> <? )(
		@+ getxn3 >r
		@+ getxn3 r>
		over <? ( swap )
		pick3 swap hline3
		) drop
	'activos @+ 4+ @ swap | x1 'activo
	( activos> <? )( @+
		4+ @ rot >? ( over 8 - dup @+ swap @ rot !+ ! )
		swap ) 2drop ;

:filllast3
	;

::poli3
	sh ymax <? ( 'ymax ! )( drop ) |-
	-1 segs> ! | marca ultimo
	'activos 'activos> !
	'segs
	ymin ( ymax <? )(
		swap ( @+ pick2 =? )( drop addsort 12 + ) drop 4 - swap
		filllines3
		1+ )
	filllast3
	2drop
	'segs 'segs> !
	$ffff 'ymin ! -1 'ymax ! ;

|--- putpixel w/alpha (invertido)
:pxa | alpha --
	0? ( drop ink@ px!+ ; )
	$ff =? ( drop ; )
	ink@ $ff00ff and
	px@ dup $ff00ff and | alpha inkb px pxb
	pick2 - pick3 * 8 >> rot + $ff00ff and | alpha px RB
	>r
	ink@ $ff00 and
	swap $ff00 and over - pick2 * 8 >> rot + $ff00 and
	r> or
	px!+ drop ;

|------ wuline
:nhline | x y dx --
	-? ( neg swap pick2 swap | ax>x
		)( px rot )
						| x cnt x y
	setxy 1+
	( 1? )( 1- ink@ px!+ ) drop
	'px ! ;

:nvline | x y --
	dup py - | x y dy
	-? ( neg rot pick2	| py>y
		)( rot py )
						| y cnt x y
	setxy 1+
	( 1? )( 1- ink@ px!+ sw 1- px+! ) drop
	'py ! ;

:li00 | x y dx dy -- x y .. +dx +dy
	px py
:cont00 | x y dx dy x1 y1 ....
	2dup setxy ink@ px!+
	2swap
	over <? ( | x y x1 y1 dx dy ...dy<dx
		16 << over / 0 rot	| x y x1 y1 ea ec dx
		( 1? )( 1- >r		| x y x1 y1 ea ec
			2dup + $ffff and		| x y x1 y1 ea ec ea+ec
			swap <=? ( rot 1+ rot rot )
			>r rot 1+ rot rot r>
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			2over 1+ setxy
			$ff over 8 >> $ff and - pxa
			r> )
		)(
		swap 16 << over / 0 rot | x y x1 y1 ea ec dx
		( 1? )( 1- >r
			2dup + $ffff and
			swap <=? ( >r rot 1+ rot rot r> )
        	rot 1+ rot rot
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			$ff over 8 >> $ff and - pxa
			r> )
		)
 	nip 4drop ;

:li11 | x y dx dy -- x y ; -dx -dy
	neg swap neg swap 2over cont00 ;

:li01 | x y dx dy -- x y ... -dx +dy
	px py
:cont01 | x y dx dy x1 y1 ....
	2dup setxy ink@ px!+
	2swap swap neg swap
	over <? ( | x y x1 y1 dx dy ...dy<dx
		16 << over / 0 rot	| x y x1 y1 ea ec dx
		( 1? )( 1- >r		| x y x1 y1 ea ec
			2dup + $ffff and	| x y x1 y1 ea ec ea+ec
			swap <=? ( rot 1+ rot rot )
			>r rot 1- rot rot r>
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			2over 1+ setxy
			$ff over 8 >> $ff and - pxa
			r> )
		)(
		swap 16 << over / 0 rot | x y x1 y1 ea ec dx
		( 1? )( 1- >r
			2dup + $ffff and
			swap <=? ( >r rot 1- rot rot r> )
        	rot 1+ rot rot
			| falta alpha
			2over setxy
			$ff over 8 >> $ff and - pxa
			dup 8 >> $ff and pxa
			r> )
		)
 	nip 4drop ;

:li10 | x y dx dy -- x y ; +dx -dy
	neg swap neg swap 2over cont01 ;

#acclin li00 li01 li10 li11

:nlinen | x y --
	over px - 0? ( drop nvline ; )
	over py - 0? ( drop nhline ; )
	| x y dx dy
	over 29 >> $4 and
	over 28 >> $8 and or 'acclin + @ exec
	'py ! 'px ! ;

|------------------------------------------------------

:contorno1
	sw 2/ sh 2/ 2dup op
	xymouse line
	sw 2 >> sh 2 >> line
    xymouse swap line
	line ;

:contorno2
	sw 2/ sh 2/ 2dup op2
	xymouse nlinen
	sw 2 >> sh 2 >> nlinen
    xymouse swap nlinen
	nlinen ;

:poligono
	sw 2/ sh 2/ 2dup op2
	xymouse pline2
	sw 2 >> sh 2 >> pline2
    xymouse swap pline2
	pline2
	poli2
	;

:rr
	rand $3ff and $ff -
	rand $3ff and $ff -
	;

:setpixel | x y color -- x y
	ink
	12 pick2 - 3 <<
	24 pick2 - 3 <<  |xr yr
	swap
	over 8 + over 8 +
|	blanco
	cajaf
	;

:zoom128
	0 0 setxy
	12 ( 1? )( 1-
		24 ( 1? )( 1-
        	px@ setpixel
			1 px+!
			) drop
		sw 24 - px+!
		) drop
	blanco
	8 dup 24 8 * 12 8 *
	caja
	;

:test1
	verde
	5 1 setxy ink@ px!+
	8 6 setxy ink@ px!+
	9 4 setxy ink@ px!+
	1 5 setxy ink@ px!+

	azul
	5 1 op2
	8 6 pline2
	9 4 pline2
	1 5 pline2
	5 1 pline2
	poli2

	rojo
	15 1 op
	18 6 pline
	19 4 pline
	11 5 pline
	15 1 pline
	poli

	zoom128

	;

:testp
|	iniseg
	rand ink
	rr 2dup op2
	rr pline2
	rr pline2
	rr pline2
	rr pline2
	rr pline2
	pline2 poli2
	;

:stresst
	20 ( 1? )( 1- testp ) drop ;

:testscanline
		0 20 setxy 'scanline renderscanline
		0 21 setxy 'scanline2 renderscanline

		10 10 setxy
		$ff00 'inka !
		20 fillsolid
		0 'inkb !
		50 setramp
		20 addramp
		30 fillramp

		10 11 setxy
		$ff00 'inka !
		20 fillsolid
		50 $ff00 $0 cmorph
		;

:dumpseg
	'segs
	( segs> <? )(
		@+ "y:%d " print @+ "x:%d " print @+ "dx:%d " print @+ "ymax:%d " print cr
		) drop
	;

|----------------------------
|----------------------------
:main
	show clrscr

		verde
|		contorno1
|		poligono

|        testp
|        BLANCO dumpseg

|		violeta contorno1
| 		verde contorno2

|        stresst
|		cflecha

		test1
		scr fonti home verde cr
		dup "%d" print cr
		cr
	'exit >esc<
	;

: 33 main ;