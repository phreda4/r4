^r4/lib/gui.txt

#texto
#$texto

#3dpc
#$3dpc

#testbunny
27	581	208 -9	584	211 -55	580	209 135	588	167 125	628	124 174	579	128 147	602	138 136	626	90
183	574	97 81	630	160 40	636	167 92	597	181 44	602	192 92	641	133 41	658	134 116	621	151
-10	637	169 -58	633	166 -11	611	195 -64	604	191 -9	659	137 -62	651	134 84	656	98 36	670	94
7	672	87 -71	659	98 -89	573	205 -382	686	261 -338	737	210 -369	744	221 -336	697	216 
-365	704	243 -408	686	262 -412	738	219 -424	705	239 -452	691	216 -340	632	259
-371	648	268 -339	613	260 -369	604	267 -320	646	224 -350	665	250 -324	604	227
-366	579	247 -413	652	266 -401	609	261 -437	645	250 -459	646	228 -424	597	245
-459	603	228 -290	780	154 -285	784	137 -186	880	0 -194	880	1 -186	867	2
-170	804	9 -266	791	57 -214	852	15 -254	840	21 -215	802	28 -263	812	41 -320	784	169
-367	784	172 -321	794	140 -370	796	141 -403	781	165 -418	787	133 -447	779	113
-294	797	52 -297	806	37 -454	779	98 -288	748	157 -281	694	164 -278	753	134
-239	677	112 -264	701	132 -94	626	157 -111	596	180 -164	592	168 -110	635	125
-166	632	119 -128	619	147 -163	616	144 -271	649	179 -214	592	168 -267	598	177
-218	639	123 -246	652	143 -218	616	146 -245	615	147 -185	774	2 -260	754	71
-238	680	93 -252	709	83 -221	763	27 -246	750	44 -118	646	92 -162	644	91 -214	655	85
-315	752	185 -368	769	196 -310	700	184 -424	758	184 -450	739	172 -456	707	193
-439	772	144 -459	753	132 -465	703	121 -301	661	199  -308	589	192 -471	653	198
-470	596	202 -477	651	129 -481	617	124 -469	743	101 -466	699	101 -477	595	97
127	526	212 172	474	207 140	493	221 173	444	210 144	444	230 173	402	209 144	393	230 74	477	260
38	485	267 89	539	220 40	544	219  94	497	241 44	508	246 -11	489	275 -59	487	275 -10	547	222
-61	547	220 -10	515	238 -64	512	235 83	439	264  41	444	282 90	394	268 41	393	284 105	451	250
114	387	253 -10	444	291 -62	444	291 -11	393	295 -61	394	291 170	345	204 144	342	219 137	296	218
120	242	206 81	345	264 41	342	281 71	301	258 41	291	271 105	337	247 95	289	245 65	269	254
-10	341	289 -61	342	281 -10	289	278 -61	292	269 -81	268	254 33	255	262 92	238	221 45	232	238
90	203	220 41	202	232 -9	255	264 -64	239	260 -71	203	261 -11	229	243 -60	239	249 -10	202	242
-47	202	253 223	481	115 177	536	162 145	548	186 186	494	178 162	508	197 189	546	137 168	568	151
209	497	136 226	442	124 275	369	104 231	392	120 194	443	181 193	392	182 216	446	144 216	392	146
224	492	78 227	495	44  202	543	90 216	512	88 232	447	79 282	371	91 249	377	89 235	441	48
99	561	200 56	566	202 238	292	160 287	339	123 246	343	134 287	293	127 261	290	149 188	343	184
168	331	204 194	289	169 156	281	197 214	339	145 212	311	151 229	255	159 279	256	112 247	242	132
194	247	161 143	240	184 131	206	174 196	222	144 163	221	149 187	206	128 154	201	137 303	347	88
238	365	100 304	295	93 284	251	98
258	230	98
117	244	203
114	198	198
-101	480	267
-110	543	215
-159	532	211
-116	500	231
-164	496	224
-222	533	209
-268	532	209
-215	496	217
-266	496	223
-111	443	280
-139	425	257
-108	395	278
-134	458	250
-164	445	226
-132	383	241
-164	393	215
-215	445	221
-266	444	230
-215	392	217
-266	393	220
-315	532	210
-373	561	226
-317	495	221
-359	492	211
-412	567	227
-318	444	227
-361	447	214
-315	396	215
-352	410	210
-98	346	268
-91	301	260
-121	339	231
-175	347	209
-112	289	231
-185	310	206
-212	342	211
-249	363	206
-207	304	207
-113	230	267
-150	223	261
-113	203	274
-156	203	266
-113	255	239
-164	239	231
-181	203	243
-216	229	212
-266	228	222
-215	201	223
-266	200	236
-305	226	219
-312	200	227
-125	565	200
-166	556	194
-211	555	194
-265	558	195
-318	556	195
-367	542	192
-383	500	196
-406	538	165
-411	495	171
-429	541	133
-447	528	106
-437	497	142
-451	493	117
-385	440	198
-331	376	199
-371	391	186
-392	371	147
-410	445	175
-405	406	166
-435	443	138
-451	456	115
-415	395	132
-443	552	95
-449	537	88
-458	504	90
-443	425	95
-457	456	97
-425	389	91
-423	382	36
-136	328	201
-154	338	199
-134	289	199
-163	290	193
-235	330	200
-267	342	188
-218	284	199
-253	291	175
-285	319	151
-276	299	134
-175	256	197
-214	253	201
-261	253	189
-272	261	149
-278	279	62
-286	277	42
-281	252	58
-288	259	47
-315	349	181
-357	358	167
-322	324	137
-364	341	129
-312	310	115
-344	315	102
-401	364	107
-319	231	193
-336	202	194
-345	191	171
-373	332	95
-315	302	95
-346	314	98
-294	277	19
-406	361	90
-320	228	56
-345	216	53
-340	207	67
-350	197	61
-315	243	38
-352	222	41
-364	203	43
-86	940	-102
-78	894	-97
-82	832	-47
-82	822	-46
-68	855	-79
-74	824	-58
-72	942	-122
-60	906	-120
-47	869	-110
-131	935	-50
-140	934	-49
-132	918	-46
-160	900	-27
-105	944	-77
-110	903	-75
-139	882	-52
-202	887	-13
-118	839	-40
-162	852	-26
-116	814	-20
-156	807	-7
-109	862	-64
-139	876	-53
-214	860	-4
-248	857	-1
-191	826	-1
-341	808	-44
-365	810	-31
-338	833	-92
-367	838	-81
-339	821	-70
-376	821	-61
-395	829	-99
-396	811	-77
-378	885	-195
-398	881	-201
-338	849	-129
-370	859	-127
-338	860	-159
-377	873	-165
-399	841	-133
-399	821	-110
-401	865	-177
-178	774	-4
-339	888	-243
-369	901	-233
-355	931	-282
-333	911	-280
-359	920	-267
-400	896	-228
0

#3dcubedata
	| [[0, 4, 6, 2], [-1, 0, 0]]
    | [[1, 3, 7, 5], [+1, 0, 0]],
    | [[0, 1, 5, 4], [0, -1, 0]],
    | [[2, 6, 7, 3], [0, +1, 0]],
    | [[0, 2, 3, 1], [0, 0, -1]],
    | [[4, 5, 7, 6], [0, 0, +1]]

::3dcube | rx ry rz -- adr
	here
	| center 0 0 0
|	6 ( 1? )( 1-

	| 6
	| [[0, 4, 6, 2], [-1, 0, 0]]
    | [[1, 3, 7, 5], [+1, 0, 0]],
    | [[0, 1, 5, 4], [0, -1, 0]],
    | [[2, 6, 7, 3], [0, +1, 0]],
    | [[0, 2, 3, 1], [0, 0, -1]],
    | [[4, 5, 7, 6], [0, 0, +1]]

|  options = options || {};
|  var c = new CSG.Vector(options.center || [0, 0, 0]);
|  var r = !options.radius ? [1, 1, 1] : options.radius.length ?
|           options.radius : [options.radius, options.radius, options.radius];
|  return CSG.fromPolygons([
|  ].map(function(info) {
|    return new CSG.Polygon(info[0].map(function(i) {
|      var pos = new CSG.Vector(
|        c.x + r[0] * (2 * !!(i & 1) - 1),
|        c.y + r[1] * (2 * !!(i & 2) - 1),
|        c.z + r[2] * (2 * !!(i & 4) - 1)
|      );
|      return new CSG.Vertex(pos, new CSG.Vector(info[1]));
|    }));
|  }));
|};

| Construct a solid sphere. Optional parameters are `center`, `radius`,
| `slices`, and `stacks`, which default to `[0, 0, 0]`, `1`, `16`, and `8`.
| The `slices` and `stacks` parameters control the tessellation along the
| longitude and latitude directions.
|
| Example usage:
|
|     var sphere = CSG.sphere({
|       center: [0, 0, 0],
|       radius: 1,
|       slices: 16,
|       stacks: 8
|     });
|CSG.sphere = function(options) {
|  options = options || {};
|  var c = new CSG.Vector(options.center || [0, 0, 0]);
|  var r = options.radius || 1;
|  var slices = options.slices || 16;
|  var stacks = options.stacks || 8;
|  var polygons = [], vertices;
|  function vertex(theta, phi) {
|    theta *= Math.PI * 2;
|    phi *= Math.PI;
|    var dir = new CSG.Vector(
|      Math.cos(theta) * Math.sin(phi),
|      Math.cos(phi),
|      Math.sin(theta) * Math.sin(phi)
|    );
|    vertices.push(new CSG.Vertex(c.plus(dir.times(r)), dir));
|  }
|  for (var i = 0; i < slices; i++) {
|    for (var j = 0; j < stacks; j++) {
|      vertices = [];
|      vertex(i / slices, j / stacks);
|      if (j > 0) vertex((i + 1) / slices, j / stacks);
|      if (j < stacks - 1) vertex((i + 1) / slices, (j + 1) / stacks);
|      vertex(i / slices, (j + 1) / stacks);
|      polygons.push(new CSG.Polygon(vertices));
|    }
|  }
|  return CSG.fromPolygons(polygons);
|};

| Construct a solid cylinder. Optional parameters are `start`, `end`,
| `radius`, and `slices`, which default to `[0, -1, 0]`, `[0, 1, 0]`, `1`, and
| `16`. The `slices` parameter controls the tessellation.
|
| Example usage:
|
|     var cylinder = CSG.cylinder({
|       start: [0, -1, 0],
|       end: [0, 1, 0],
|       radius: 1,
|       slices: 16
|     });
|CSG.cylinder = function(options) {
|  options = options || {};
|  var s = new CSG.Vector(options.start || [0, -1, 0]);
|  var e = new CSG.Vector(options.end || [0, 1, 0]);
|  var ray = e.minus(s);
|  var r = options.radius || 1;
|  var slices = options.slices || 16;
||  var axisZ = ray.unit(), isY = (Math.abs(axisZ.y) > 0.5);
|  var axisX = new CSG.Vector(isY, !isY, 0).cross(axisZ).unit();
|  var axisY = axisX.cross(axisZ).unit();
|  var start = new CSG.Vertex(s, axisZ.negated());
|  var end = new CSG.Vertex(e, axisZ.unit());
|  var polygons = [];
|  function point(stack, slice, normalBlend) {
|    var angle = slice * Math.PI * 2;
|    var out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));
|    var pos = s.plus(ray.times(stack)).plus(out.times(r));
|    var normal = out.times(1 - Math.abs(normalBlend)).plus(axisZ.times(normalBlend));
|    return new CSG.Vertex(pos, normal);
|  }
|  for (var i = 0; i < slices; i++) {
|    var t0 = i / slices, t1 = (i + 1) / slices;
|    polygons.push(new CSG.Polygon([start, point(0, t0, -1), point(0, t1, -1)]));
|    polygons.push(new CSG.Polygon([point(0, t1, 0), point(0, t0, 0), point(1, t0, 0), point(1, t1, 0)]));
|    polygons.push(new CSG.Polygon([end, point(1, t1, 1), point(1, t0, 1)]));
|  }
|  return CSG.fromPolygons(polygons);
|};
|--------- parse
:trim | adr -- adr'
	( c@+ 1? )( $ff and
		32 >? ( drop 1- ; )
		drop
		) drop 1- ;

:=p | s1 s2 -- 1/0
	( c@+ 1? )( rot c@+ rot - 1? ( 3drop 0 ; ) drop swap ) 3drop 1 ;

:find | adr "texto" -- adr'
	( 2dup =p 0? )( drop swap 1+ $texto >? ( 2drop 0 ; ) swap ) 2drop ;

:getdec | adr -- adr' nro
	;

|----------------

:loadpc
	here dup 'texto !
	"db/pointcloud/bunny.pcd" load dup '$texto !
	dup 'here !
	dup '3dpc ! '$3dpc !
	texto
	dup "DATA ascii" find 0? ( 2drop ; ) nip
	( $texto <? )(
		getdec ,
		getdec ,
		getdec ,
		) drop
	here '$3dpc !
	;


#xmin #ymin #xmax #ymax
#xsum #ysum
#xcam 0 #ycam 0 #zcam -10.0
#xr 0.20 #yr 0.25

:3dop project3d op ;
:3dline project3d line ;
:3dpline project3d pline ;

:ejes
	-5.0 0 0 3dop 5.0 0 0 3dline
	0 -5.0 0 3dop 0 5.0 0 3dline
	0 0 -5.0 3dop 0 0 5.0 3dline ;

:marcas
	-5.0 ( 5.0 <? )(
		dup 0.01 0 3dop dup -0.01 0 3dline
		0.01 over 0 3dop -0.01 over 0 3dline
		0 0.01 pick2 3dop 0 -0.01 pick2 3dline
		1.0 + ) drop ;

:grillaxy
	-5.0 ( 5.0 <=? )(
		dup -5.0 0 3dop dup 5.0 0 3dline
		-5.0 over 0 3dop 5.0 over 0 3dline
		1.0 + ) drop ;

:grillayz
	-5.0 ( 5.0 <=? )(
		0 over -5.0 3dop 0 over 5.0 3dline
		0 -5.0 pick2 3dop 0 5.0 pick2 3dline
		1.0 + ) drop ;

:grillaxz
	-5.0 ( 5.0 <=? )(
		dup 0 -5.0 3dop dup 0 5.0 3dline
		-5.0 0 pick2 3dop 5.0 0 pick2 3dline
		1.0 + ) drop ;

:teclado
	'exit >esc<
	[ 0.1 'ycam +! ; ] <up>
	[ -0.1 'ycam +! ; ] <dn>
	[ 0.1 'xcam +! ; ] <le>
	[ -0.1 'xcam +! ; ] <ri>
	[ 0.1 'zcam +! ; ] <pgdn>
	[ -0.1 'zcam +! ; ] <pgup>
	[ 0.01 'xr +! ; ] <spc>
	;

:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

|-----------------
:rr
	rnd $1ffff and $ffff - ;

:drawpointrand
	2 rndseed
	0 ( 5000 <? )(
		rr rr rr drawp
		1+ ) drop
	;


| x y en 16 bits-- z en 32 bits
:morton2d | x y -- z
	dup 8 << or $00ff00ff and
	dup 4 << or $0f0f0f0f and
	dup 2 << or $33333333 and
	dup 2* or   $55555555 and
	2* swap
	dup 8 << or $00ff00ff and
	dup 4 << or $0f0f0f0f and
	dup 2 << or $33333333 and
	dup 2* or   $55555555 and
	or ;

|x y z . 10 bits
| sobra 2 bits!!
:morton3d | x y z -- Z
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	2* swap
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	or 2* swap
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	or ;

:drawpointb
	'testbunny >r
	 ( r@+ 1? )( 8 << r@+ 8 <<
		r@+ 8 << drawp
		) drop rdrop ;



:main
	mark

	loadpc

	show clrscr
     	teclado
		1.0 3dmode
		freelook
		xcam ycam zcam mtrans
		gris grillaxy grillayz grillaxz
		blanco
		|drawpointrand
		drawpointb
		cminiflecha ;

: main ;