| Trabajo final Seminario de Diseño de Sistemas
| Alumno: Tarsetti, Gabriel Alejandro
| Profesor: Reda, Pablo
| Universidad CAECE Mar del Plata
| año 2010

^r4/lib/gui.txt
^r4/lib/sprite.txt
^r4/lib/trace.txt
^r4/lib/3dmat.txt
^inc/tarsetti.spr

#verticesEnem |vertices de los enemigos, pueden modificarse para dar sensación de irregularidad
  -1.0 -1.5 -1.3
   0.6 -1.0 -1.0
  -0.8  1.0 -1.2
   1.6  1.0 -1.0
  -1.0 -0.2  0.8
   1.2 -1.0  0.4
  -1.3  1.0  1.1
   1.0  0.7  1.6
  -0.4  0.2 -1.9
   0.4  0.0  1.5
   1.1 -0.1  0.0
  -1.5  0.4 -0.4
  -0.2 -1.7  0.0
   0.0  1.5  -0.5

#vectoresEnem |orden en el cual los vertices forman los vectores de los enemigos, no debe modificarse
   1  2
   1  3
   1  5
   1  9
   1 12
   1 13
   4  2
   4  3
   4  8
   4  9
   4 11
   4 14
   6  2
   6  5
   6  8
   6 10
   6 11
   6 13
   7  3
   7  5
   7  8
   7 10
   7 12
   7 14
   2  9
   2 11
   2 13
   3  9
   3 12
   3 14
   5 10
   5 12
   5 13
   8 10
   8 11
   8 14
   

#listaEnem )( 8192 | lista con los datos de los enemigos activos en el juego
#listaEnem> 'listaEnem
#juego 0 |indica si el juego esta iniciado o no

#disparoPush 0    |indica si se presionó la tecla de disparo
#disparo1 )( 256  |lista con los datos del disparo
#disparo1> 'disparo1
#test 1 |variable de prueba para debugging
#test> 'test
#debeMostrarse 0 |variable auxiliar para indicar cuando todos los vectores de un enemigo han sido eliminados

#modExplosion |bandera para indicar explosion de enemigo
#modExplosion> 'modExplosion

| variables de posicion, velocidad y aceleracion del jugador
#Vx 0.0
#Vy 0.0
#Vz 0.0
#Ax 0.0
#Ay 0.0
#Az 0.0
#Px 0.0
#Py 0.0
#Pz 0.0

#puntaje 0
#hiScore 50

| Constantes:
#UMBRALCHOQUE 4.0
#MAXVEL 0.8
#ACELERACION 0.12
#FRENO 0.08
#TIEMPOMUERTE 35 | tiempo que tarda un enemigo muerto en desaparecer, no puede ser mayor que 35
				 | en cada ciclo, el enemigo muerto va perdiendo un vector hasta llegar a cero. Como tiene 36 vectores, en 35 frames ya ha desaparecido
#INDEXPLOSION 0.07 | indice de la separacion de los vectores al morir el enemigo para el efecto de vectores separados
#CANTENEMIGOS 5 |cantidad inicial de enemigos
#CANTAGREGARUNO 5 |cantidad de muertes antes de que haga spawn un nuevo enemigo

:generaEnem | genera los datos de un nuevo enemigo
  0.0             |pos rot 1
  rand 0.02 mod   |vel rotacion 1
  0.0             |pos rot 2
  rand 0.02 mod   |vel rotacion 2
  0               |tiempo de muerte
  200.0           |z
  rand 0.4 mod abs 0.05 + neg  |vel avance
  rand 20.0 mod   |y
  rand 20.0 mod   |x
;

:meteEnem | mete un enemigo en la lista
  generaEnem
  listaEnem> !+ !+ !+ !+ !+ !+ !+ !+ !+ 'listaEnem> !
  0 listaEnem> ! | coloca un 0 al final para indicar que no hay mas enemigos
;

:distancia  | calcula si el disparo ha llegado al enemigo
  'disparo1 >r
  4 r+
  r@+ - dup *. swap
  r@+ - dup *. + 
  rdrop
;

:meteExplosion  | calcula la separacion de los vectores de un enemigo que explota, dentro de un margen de azar dado
  rand INDEXPLOSION mod modExplosion * +
;

:dibuja1Enem  |coloca en pantalla un enemigo y analiza si es alcanzado por un disparo
  >r    | mete la lista de enemigos
  mpush | mete la matriz de transformación
  r@+ r@+ r@+ r @ + |obtiene posicion y velocidad
  over 14 >> neg 170 + ink | selecciona la intensidad de color para el minimapa dependiendo de la posición en y
  pick2 14 >> 700 + over 17 >> 600 - neg 3 fcircle | dibuja el enemigo en el minimapa
  0 'modExplosion ! | pone el modificador de explosion en 0 por defecto

  dup 2.0 <? ( r 4 + @ 0? ( 0  'juego ! ) drop )  | comprueba si el enemigo llega al jugador y si el enemigo está vivo
  2over neg neg swap distancia  | calcula la distancia desde el enemigo hasta el disparo
  r 4 + @ 0? ( |si el tiempo de muerte es 0, o sea si está vivo
    drop
    UMBRALCHOQUE <? ( | si la distancia en x,y es menor que el umbral 
      over disparo1 <? ( | y si la posición en z del disparo supera a la del enemigo
        0 'disparo1 !  | elimina el disparo

        1 r 4 + ! | mete 1 en el tiempo de muerte, indicando que ha muerto
        
        puntaje 1 + 'puntaje ! |suma 1 punto
        puntaje hiScore >? ( 'hiScore ! )( drop ) | si supera el hiscore, lo actualiza
        puntaje CANTAGREGARUNO mod 0? ( meteEnem ) drop | cada cierta cantidad de muertes mete un enemigo nuevo al final de la lista
      ) drop 
    ) drop
  )( | sino mete un enemigo nuevo en el lugar de la lista de enemigos del que ha muerto
    r 4 + @ TIEMPOMUERTE >? ( | si es menor que el tiempo de muerte
      drop
      generaEnem
      r 12 - | retrocede 3 lugares en los datos
      !+ !+ !+ !+ !+ !+ !+ !+ 2drop |mete los datos
      rot drop 200.0 rot rot | guarda la posición z al fondo
      drop 
	  1 'debeMostrarse ! | esta bandera evita un bug, que mostraba al enemigo nuevamente cuando todos sus vectores ya habian sido eliminados
    )( dup 'modExplosion ! | aumenta gradualmente la distancia de separación de los vectores al destruirse el enemigo, para efecto de que se separan
      1+ r 4 + ! drop ) 
    drop
  )  

  r!+ | actualiza la posición z
  mtransi
  4 r+ | salta el dato de tiempo de muerte
  
  r@+ r @ + 2.0 >? ( -2.0 + ) -2.0 <? ( 2.0 + ) dup r!+ | actualiza el giro, el limite es para evitar que el valor se vuelva demasiado grande (cuando ha dado una vuelta completa)
  r@+ r @ + 2.0 >? ( -2.0 + ) -2.0 <? ( 2.0 + ) dup r!+
  
  mrotxi
  mrotyi

  $808000 ink
  'vectoresEnem
  36 r 20 - @ - swap | la cantidad de vectores ira disminuyendo gradualmente hasta que desaparece el enemigo
  >r  |coloca la lista de vectores en la pila r
  debeMostrarse 1? ( 0 'debeMostrarse ! drop )( | comprueba que el enemigo aun deba mostrarse
  drop | si debe mostrarse, primero elimina debeMostrarse de la pila
  ( 1? )( | repite 36 veces en caso de que el enemigo este vivo
    r@+ -1 + 12 * dup dup | obtiene las coordenadas
    'verticesEnem + @ meteExplosion rot | calcula las coordenadas de cada vector
    4 + 'verticesEnem + @ meteExplosion rot |la palabra meteExplosion, aunque tiene poco codigo, tuve que ponerla aparte porque cuando
    8 + 'verticesEnem + @ meteExplosion     |habia demasiadas operaciones en el codigo del bucle se interrumpia la ejecucion del interprete
    project3d                               |de esta forma logre que funcionara correctamente
    op
    r@+ -1 + 12 * dup dup
    'verticesEnem + @ meteExplosion rot
    4 + 'verticesEnem + @ meteExplosion rot
    8 + 'verticesEnem + @ meteExplosion 
    project3d
    line
    1-
  ) 
  )
  rdrop drop 
 
  r> mpop
  
;

:dibujaEnem | controla el dibujado de la lista completa de enemigos
  'listaEnem
  ( dup @ 1? )( |cero indica fin de la lista
    drop
    dibuja1Enem
  )
  2drop
;

:muchosEnem |genera una cantidad de enemigos inicial
  0 ( CANTENEMIGOS <? )( 1+ meteEnem ) drop
;


:calculaCamara  |calcula la posicion de la camara en base a la velocidad, y la velocidad en base a la aceleracion
  Ax Vx + |suma aceleracion a la velocidad en x
  1? ( | si no es cero
    +? ( | si es positivo
      FRENO neg + 
      -? ( | si se pasó
        drop 0.0
      )
    )( | si es negativo
      FRENO +
      +? ( |si se pasó
        drop 0
      )
    )
  ) 'Vx !

  Ay Vy + |suma aceleracion a la velocidad en y
  1? ( | si no es cero
    +? ( | si es positivo
      FRENO neg +
      -? ( | si se pasó
        drop 0.0
      )
    )( | si es negativo
      FRENO +
      +? ( |si se pasó
        drop 0
      )
    )
  ) 'Vy !

  Vx 'Px +! |suma velocidad a la posicion
  Vy 'Py +!
  Px 22.0 >? ( 22.0 'Px ! ) | pone tope al movimiento lateral
  -22.0 <? ( -22.0 'Px ! )
  Py 22.0 >? ( 22.0 'Py ! ) | pone tope al movimiento vertical
  -22.0 <? ( -22.0 'Py ! )
  2drop
;

:mueveCamara  |coloca la camara en posicion
  Px Py 0 mtrans
;

:desmueveCamara |funcion complementaria a la de mover camara
  Px neg Py neg 0 mtrans
;

:dibujaMira | dibuja la cruz de la mira
  $ffffff ink
  -1.0 0.0 20.0 project3d op -0.3 0.0 20.0 project3d line
  0.0 -1.0 20.0 project3d op 0.0 -0.3 20.0 project3d line
  0.3 0.0 20.0 project3d op 1.0 0.0 20.0 project3d line
  0.0 0.3 20.0 project3d op 0.0 1.0 20.0 project3d line

;

:dibujaPanel  |dibuja el panel del usuario
  0.0 0.0 1.0 mtrans
  'dib1 3dnsprite
  'dib2 3dnsprite
;

:dibujaFondoMapa  |dibuja el fondo y el fondo del minimapa
  0.0 0.0 1.0 mtrans
  'dib3 3dnsprite
  'dib4 3dnsprite
  0.0 0.0 -1.0 mtrans
;

:dispara |dibuja los disparos
  disparo1 
  200.0 >? ( |si se fue de rango
    0 'disparo1 !
  ) drop
  
  disparo1 1? ( |si el disparo esta activo
    'disparo1 >r  |mete los datos del disparo en la pila r
    r @ dup 4.0 + r!+
    r@+ 
    $ff0000 ink
    2dup 14 >> 700 + over 17 >> 602 - neg 2 fcircle drop | dibuja el disparo en el minimapa
    r@+
    rot
    mpush
    mtransi
    -1.0 0.0 0.0 project3d op |dibuja el disparo en pantalla
    -1.0 0.0 1.0 project3d line
     1.0 0.0 0.0 project3d op
     1.0 0.0 1.0 project3d line
    mpop
    rdrop
  ) drop
;

:meteDisparo |comprueba si se puede crear el disparo y lo crea
  disparo1 0? (
    Py neg Px neg 1.0
    disparo1> !+ !+ !+ 'disparo1> !
    'disparo1 'disparo1> ! | reestablece el valor original de disparo1>
  ) drop
;

:teclado
  [ ACELERACION 'Ay ! ; ] <up>
  [ 0 'Ay ! ; ] >up<
  [ ACELERACION neg 'Ay !  ; ] <dn>
  [ 0 'Ay ! ; ] >dn<
  [ ACELERACION 'Ax ! ; ] <le>
  [ 0 'Ax ! ; ] >le<
  [ ACELERACION neg 'Ax ! ; ] <ri>
  [ 0 'Ax ! ; ] >ri<
  [ disparoPush 0? ( 1 'disparoPush ! meteDisparo ) drop ; ] <ctrl>
  [ 0 'disparoPush ! ; ] >ctrl<
;

:escribePuntaje |escribe el puntaje y el record
  12 bfont
  sw 2/ sh dup 4 >> swap 3 >> + fcen
  0 0.0085 fmat
	$004400 $00ff88 fcol

  hiScore puntaje 10 * "  %d0                       hi: %d00" print cr
;

:dibujaRecuadro |dibuja un recuadro al minimapa
  verde 700 580 100 box
;

:escribeInicio  |escribe el texto de la pantalla de presentacion
  6 bfont |elije el tipo de fuente y el degrade
  sw 2/ sh dup 4 >> swap 3 >> + fcen
  0 0.02  fmat
	$444400 $ffff00 fcol

  "      Vectoroids" print cr

  16 bfont
  $444400 $ff2244 fcol

  cr cr "           Tu mision es no dejar pasar ningun asteroide" print
  cr "      Usa <CURSOR> para moverte y <CTRL> para disparar" print cr

  14 bfont
  $444400 $8800ff fcol
  cr cr "              Presiona <F1> para empezar" print cr
;

:debug  |funcion exclusivamente de debugging
  2dup test "%d %d %d" print cr
;

:main
  show clrscr
	'exit >esc<
    scr fonti home
    juego 1? (  | si el juego esta iniciado
	  teclado |prepara codigo para teclas
      1.0 3dmode | activa el 3D
      dibujaFondoMapa
      calculaCamara
|      rotaCamara |
|      dibujaMira |
      mueveCamara
      dibujaRecuadro
      dibujaEnem
      dispara
|      desrotaCamara |
      desmueveCamara
      dibujaMira
      dibujaPanel
      escribePuntaje
    )(  |si no esta iniciado
  [ 1 'juego ! |reinicia el juego
    'listaEnem 'listaEnem> ! | reinicia la lista de enemigos
    muchosEnem |crea nuevos enemigos
    0 'puntaje ! |resetea el puntaje
    ; ] <f1>

      escribePuntaje
      escribeInicio
    )
    drop
|    debug
;

: 42 main ; | 42 es el indicador de que la pila está ok