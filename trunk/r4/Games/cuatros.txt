| Cuatros
| 2009-2013

^r4/lib/gui.txt
^r4/lib/graf.txt

#pieces	%0100010101100111 %0010011010101110 %1000100110101011 %0010011010101110
	%0101100101100111 %0110011110111111 %1011110111101111 %0101100111011110
	%0101100110101011 %0101011010011101 %0100010101101010 %0010011010101001
	%0101011010101011 %0111101110101110 %1001101011101111 %0110101010011101
	%0101100110101110 %0110011110101001 %0001010101101010 %0110011110101001
	%0001010110010110 %0100010110010110 %0100000101011001 %0001010001010110
	%0101011010011010 %0101011010011010 %0101011010011010 %0101011010011010

#col $ff0000 $ff00fe $fffffe $00fffe $00ff00 $a52a2a $0000fe

#blockw #blockh #operation #xp #yp #curp #crot #xp_ #yp_ #curp_ #crot_ #frames 0
#speed 32 #flag 0 #score 0

:cur2trans xp 'xp_ ! yp 'yp_ ! curp 'curp_ ! crot 'crot_ ! ;

:trans2cur xp_ 'xp ! yp_ 'yp ! curp_ 'curp ! crot_ 'crot ! ;

:inigrid sw sh min 30 / dup 'blockw ! 'blockh ! ;

:g2s | grid to screen ( xg yg -- xs ys )
	swap blockw * swap blockh * sh swap - ;

:vfill2 | fill rectangle with lower left at xs ys ( w h xs ys -- )
	pick2 - vfill ;

:block | fill block at coordinates xg yg with current color (xg yg -- )
	g2s blockw blockh 2over vfill2 2drop ;

:blockc | returns color of block at xg yg (xg yg - col )
	g2s 5 - swap 5 + swap getpixel ;

:piece rand 7 and 7 mod ;

:1square | performs an operation on block x,y + rightmost 4 bits of a mask ( xg yg msk -- )
	>r r %11 and + swap r> %1100 and 2 >> + swap operation exec ;

:4squares | performs an operation on the blocks defined by x,y and mask ( xg yg msk -- )
	( 1? )( >r 2dup r 1square r> 4 >> ) 3drop ;

:curpiece | (curp crot -- val )
	4 * swap 16 * + 'pieces + @ ;

:drawp 'block 'operation ! xp yp curp crot curpiece 4squares ;

:draw 'col curp 4 * + @ ink drawp ;

:clearp negro drawp ;

:orcolor | ORs colors ( xg yg -- col )
	blockc flag or 'flag ! ;

:collision | tests for collision ( -- flag )
	0 'flag ! 'orcolor 'operation ! xp_ yp_ curp_ crot_ curpiece 4squares flag ;

:change | ( coliyes transf -- )
	cur2trans exec collision 1 nand? ( clearp trans2cur draw drop drop )( drop exec ) ;

| check collision here
:newp | new tetris piece
	8 'xp ! 20 'yp ! 0 'crot ! piece 'curp !
	[ end ; ] [ ; ] change ;

:right [ ; ] [ xp_ 1+ 'xp_ ! ; ] change ;

:left [ ; ] [ xp_ 1- 'xp_ ! ; ] change ;

:rotate [ ; ] [ crot_ 3 + 4 mod 'crot_ ! ; ] change ;

:color1 | col' = col OR 1 (col -- col')
	ink@ 1 or ink ;

#mincol
:minline | tester de 6-y a 15-y ( y -- )
	1 'mincol ! >r 6 ( 15 <=? )( dup r blockc mincol min 'mincol ! 1+ ) drop rdrop ;

:blockdown | (xg yg -- )
	2dup 1+ blockc ink block ;

:linedown | (yg -- )
	>r 6 ( 16 <? )( dup r blockdown 1+ ) drop rdrop ;

:rectdown | ( y1 y2 -- )
	>r ( r <? )( dup linedown 1+ ) drop rdrop ;

:completeline
	score 1+ 'score ! speed score 16 / - 1 max 'speed ! ;

:lines | ( -- )
	2 ( 20 <=? )( dup minline mincol 1? ( drop dup 20 rectdown completeline )( drop 1+ ) ) drop ;

:fall [ color1 drawp lines newp ;  ] [ yp_ 1- 'yp_ ! ; ] change ;

:debug dup 10 1 gotoxy "%d" print cr ;

:grid sw 2/ dup 0 op sh line
      sh 2/ dup 0 swap op sw swap line ;

#curtimer 101
:timerinit msec 'curtimer ! ;

:rotate.or.fall | ( x y -- )
		sw 2/ >=? ( fall )( rotate ) ;

:left.or.right | ( x y -- )
	       sw 2/ >=? ( right )( left ) ;

:mouse xymouse sh 2/ >=? ( drop rotate.or.fall )( drop left.or.right ) drop timerinit ;

:mouseinteract msec curtimer - 100 >? ( bmouse 1? ( mouse ) drop ) drop ;

:play
	inigrid rerand
	cls
	newp draw
	| this program relies on the fact that the rightmost bit of the color gray is equal to 1 !!
	| the code below makes sure this is true
	gris ink@ 1 or ink 12 blockw * 20 blockh * 5 1 g2s vfill2
	negro 10 blockw * 19 blockh * 6 2 g2s vfill2
	show
		debug
		frames 1+ speed mod 'frames !
		frames speed 1- =? ( fall ) drop
		'rotate <up> 'right <ri> 'left <le> 'fall <dn>
		mouseinteract
		'exit >esc< ;

: 33 play ;
