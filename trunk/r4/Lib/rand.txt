| funciones aleatorias
| PHREDA 2010
|--------------------------
#:seed8 12345

::rand8 | -- r8
	seed8              	| s
	dup 3 >> over xor   | s noise
	dup 1 and 30 <<		| s n c
	rot 2/ or
	'seed8 !
	$ff and ;

|--- Numero aleatorios
#:seed 495090497

|::rand | -- v
|	seed 2* -? ( 495090497 xor ) dup 'seed ! ;

::rand | -- r32
	seed 3141592621 * 1+ dup 'seed ! ;

::rerand | --
	time + + 'seed ! ;

|--- Multiply-with-carry random

#listr 1 2 3 4 5

::mrand | -- xx
	'listr
	@+ 5115 * swap
	@+ 1776 * rot + swap
	@+ 1492 * rot + swap
	@+ 11111111 * rot + swap
	@ +
	'listr dup 4 - 4 move
	dup 'listr !
	dup 31 >> 'listr 16 + !
	;

::mseed | seed --
	'listr swap
	0 ( 5 <? )( >r
		29943829 * 1-
		dup rot !+ swap
		r> 1+ ) 3drop ;

|------
#nseed
#rgecx

::random | -- r
	rgecx $a2348705 xor nseed xor
	dup 'nseed +! dup 'rgecx !
	;


|---- xorshift

#w #z #y #x

| not all 0 !!!
::xsseed | x y z w --
	'w !+ !+ !+ ! ;

::xsrand | -- r
	x dup 23 << xor dup 24 >> xor
	y 'x !
	z 'y !
	w dup 'z !
	dup 3 >> xor xor dup 'w !
	$ffffffff + ;

|uint32_t xorshift_irand(xorshift_t *prng) {
|  const uint32_t a = 23, b = 24, c = 3;
|  uint32_t tmp = prng->x ^ (prng->x << a);
|  prng->x = prng->y;
|  prng->y = prng->z;
|  prng->z = prng->w;
|  prng->w = (prng->w ^ (prng->w >> c)) ^ (tmp ^ (tmp >> b));
|  return UINT32_MAX - prng->w;
