| close2gl - PHReda
| :r4 system library
|-------------------------
^r4/lib/math.txt

#xf #yf
#ox #oy

#mati | matrix id
1.0 0 0 0		| 1.0 = $10000
0 1.0 0 0
0 0 1.0 0
0 0 0 1.0
#mats )( 640 | 10 matrices
#:mat> 'mats

:matini
	'mats dup 'mat> ! 'mati 16 move ;

::mpush | --
	mat> dup 64 + dup 'mat> ! swap 16 move ;

::mpop | --
	mat> 'mats =? ( drop ; ) 64 - 'mat> ! ;

|---------------------- matriz multiplication
:rcmult | m1 m2 -- v
	>r @+ r@+ 16 *>> swap
	@+ 12 r+ r@+ 16 *>> swap
	@+ 12 r+ r@+ 16 *>> swap
	@ r> 12 + @ 16 *>> + + + ;

:mmult | m1 --
	mat> >r
	dup r rcmult r!+ dup 16 + r rcmult r!+
	dup 32 + r rcmult r!+ dup 48 + r rcmult r!+
	dup r rcmult r!+ dup 16 + r rcmult r!+
	dup 32 + r rcmult r!+ dup 48 + r rcmult r!+
	dup r rcmult r!+ dup 16 + r rcmult r!+
	dup 32 + r rcmult r!+ dup 48 + r rcmult r!+
	dup r rcmult r!+ dup 16 + r rcmult r!+
	dup 32 + r rcmult r!+ 48 + r rcmult r> ! ;

|-----------------------------
::mtrans | x y z --
	mat> >r
	pick2 r 48 + @  16 *>> r @ + r!+
	pick2 r 48 + @  16 *>> r @ + r!+
	pick2 r 48 + @  16 *>> r @ + r!+
	rot  r @ + r!+
	over r 32 + @ 16 *>> r @ + r!+
	over r 32 + @ 16 *>> r @ + r!+
	over r 32 + @ 16 *>> r @ + r!+
	swap r @ + r!+
	dup r 16 + @ 16 *>> r @ + r!+
	dup r 16 + @ 16 *>> r @ + r!+
	dup r 16 + @ 16 *>> r @ + r!+
	r> +! ;

::mtransi | x y z -- ;pre
	mat> >r
	pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + r @ + r!+
	pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + r @ + r!+
	rot r@+ 16 *>> rot r@+ 16 *>> + swap r@+ 16 *>> + r @ + r> ! ;

|-----------------------------
::mscale | x y z -- ; post
	mat> >r
	pick2 r @ 16 *>> r!+ pick2 r @ 16 *>> r!+ pick2 r @ 16 *>> r!+ rot r @ 16 *>> r!+
	over r @ 16 *>> r!+ over r @ 16 *>> r!+ over r @ 16 *>> r!+ swap r @ 16 *>> r!+
	dup r @ 16 *>> r!+ dup r @ 16 *>> r!+ dup r @ 16 *>> r!+ r @ 16 *>> r> ! ;

::mscalei | x y z
	mat> >r
	pick2 r @ 16 *>> r!+ over r @ 16 *>> r!+ dup r @ 16 *>> r!+ 4 r+
	pick2 r @ 16 *>> r!+ over r @ 16 *>> r!+ dup r @ 16 *>> r!+ 4 r+
	rot r @ 16 *>> r!+ swap r @ 16 *>> r!+ r @ 16 *>> r> ! ;

|-----------------------------
::mrotx | x -- ; posmultiplica
	mat> 16 + >r
	dup sin swap cos
	r @ r 16 + @ | s c e i
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c f j
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c g k
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c h l
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	rot 16 *>> >r 16 *>> r> +  r> 12 + ! ;

::mrotxi |x -- ; premultiplica
	mat> 4+ >r
	dup sin swap cos
	r @ r 4+ @ | s c b c
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+ | s c b c
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c f g
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c j k
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c m o
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	rot 16 *>> >r 16 *>> r> +  r> ! ;

|-----------------------------
::mroty | y  --
	mat> >r
	dup sin swap cos
	r @ r 32 + @ 	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 28 + ! r @ r 32 + @
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 28 + !
	r @ r 32 + @  pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 28 + ! r @ r 32 + @
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	rot 16 *>> >r swap neg 16 *>> r> +  r> 28 + ! ;

::mrotyi | y --
	mat> >r
	dup sin swap cos
	r @ r 8 + @ | s c a c
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 4+ ! 12 r+
	r @ r 8 + @ | s c a c
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 4+ ! 12 r+
	r @ r 8 + @ | s c a c
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 4+ ! 12 r+
	r @ r 8 + @ | s c a c
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	rot 16 *>> >r swap neg 16 *>> r> +  r> 4+ ! 	;

|-----------------------------
::mrotz | z --
	mat> >r
	dup sin swap cos
	r @ r 16 + @ | s c e i
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c e i
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c e i
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 neg 16 *>> r> +  r 12 + !
	r @ r 16 + @ | s c e i
	pick2 pick2 16 *>> pick4 pick2 16 *>> +  r!+
	rot 16 *>> >r 16 *>> r> +  r> 12 + ! ;

::mrotzi | z --
	mat> >r
	dup sin swap cos
	r @ r 4+ @ | s c a b
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c a b
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c a b
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	pick2 16 *>> >r pick2 16 *>> r> +  r!+ 8 r+
	r @ r 4+ @ | s c a b
	pick2 pick2 16 *>> pick4 neg pick2 16 *>> +  r!+
	rot 16 *>> >r 16 *>> r> +  r> ! ;

|-----------------------------
:invierte
	over @ over @ swap rot ! swap ! ;

::matinv
	mat> >r
	r 12 + @  neg r 28 + @  neg r 44 + @  neg | tx ty tz
	r 4+ dup 12 + invierte r 8 + dup 24 + invierte r 24 + dup 12 + invierte
	pick2 r @  16 *>> pick2 r 4+ @  16 *>> + over r 8 + @  16 *>> + r 12 + !
	pick2 r 16 + @  16 *>> pick2 r 20 + @  16 *>> + over r 24 + @  16 *>> + r 28 + !
	rot r 32 + @  16 *>> rot r 36 + @  16 *>> + swap r 40 + @  16 *>> + r 44 + !
	rdrop ;

::transform | x y z -- x y z
	mat> >r pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + r@+ +
	r> swap >r >r pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + r@+ +
	r> swap >r >r rot r@+ 16 *>> rot r@+ 16 *>> + swap r@+ 16 *>> + r> @ +
	r> r> swap rot ;

::transformr | x y z -- x y z
	mat> >r pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + 4 r+
	r> swap >r >r pick2 r@+ 16 *>> pick2 r@+ 16 *>> + over r@+ 16 *>> + 4 r+
	r> swap >r >r rot r@+ 16 *>> rot r@+ 16 *>> + swap r@+ 16 *>> + rdrop
	r> r> swap rot ;

::ztransform | x y z -- z
	mat> 32 + >r
	rot r@+ 16 *>> rot r@+ 16 *>> + swap r@+ 16 *>> + r> @ + ;

::oztransform | -- z
	mat> 44 + @ ;

::oxyztransform | -- x y z
	mat> >r r 12 + @ r 28 + @ r> 44 + @ ;


|-----------------------------
::2dmode | --
	sw 2/ 'ox !
	sh 2/ 'oy !
	;

::3dmode | fov --
	sh 16 *>> dup 'yf ! 'xf !
	sw 2/ 'ox !
	sh 2/ 'oy !
	matini
	;

::Omode | --
	sw dup 2/ 'ox !
	sh dup 2/ 'oy !
	min dup 'xf ! 'yf !
	matini
	;

::project3d | x y z -- u v
	transform
	0? ( 3drop ox oy ; )
	>r
	yf r */ oy + swap
	xf r> */ ox + swap ;

::projectdim | x y z -- u v
	transform
	0? ( 3drop 0 0 ; )
	>r
	yf r */	swap
	xf r> */ swap ;

::project | x y z -- u v
	0? ( 3drop ox oy ; )
	rot xf pick2 */ ox +
	rot rot yf swap */ oy +
	;

::projectv | x y z -- u v
	rot xf pick2 */ ox +
	rot rot yf swap */ oy +
	;

::inscreen | -- x y
	oxyztransform
	0? ( 3drop ox oy ; )
	>r
	yf r */ oy + swap
	xf r> */ ox + swap ;

::proyect2d | x y z -- x y
	drop oy + swap ox + swap ;

::aspect | --
	sw 16 << sh / ;

|------------- divisionless
::3dini
	1024 sw - 2/ neg 'ox !
	1024 sh - 2/ neg 'oy !
	matini ;

:c10 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 512 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4+ ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( 2drop )( 2drop 1+ )
	nip ;

::3dproject | x y z -- x y
	swap over c10 oy + >r c10 ox + r> ;

::3dpro | x y z -- x y
	swap over c10 >r c10 r> ;

|---------------------- vectores 3d
::v3len | v1 -- l
	>r r@+ dup *. r@+ dup *. + r> @ dup *. + sqrt. ;

|::v3nor | v1 --
|	>r r@+ dup *. r@+ dup *. + r@+ dup *. + sqrt. | len
|	0? ( rdrop drop ; ) -12 r+
|	r @ over /. r!+ r @ over /. r!+ r @ swap /. r> ! ;

::v3nor | v1 --
	>r r@+ dup *. r@+ dup *. + r@+ dup *. + sqrt. | len
	0? ( rdrop drop ; ) -12 r+ 1.0 swap /.
	r @ over *. r!+ r @ over *. r!+ r @ swap *. r> ! ;

::v3ddot | v1 v2 -- r ; r=v1.v2
	>r @+ r@+ *. swap @+ r@+ *. swap @ r> @ *. + +  ;

::v3vec | v1 v2 -- ; v1=v1 x v2
	>r dup @ r 4+ @ *. over 4+ @ r @ *. - |Aux.z:=x*V.y-y*V.x;
	over 8 + @ r @ *. pick2 @ r 8 + @ *. - |Aux.y:=z*V.x-x*V.z;
	pick2 4+ @ r 8 + @ *. pick3 8 + @ r> 4+ @ *. - | Aux.x:=y*V.z-z*V.y;
	>r rot r> swap !+ !+ ! ;

::v3- | v1 v2 -- ; v1=v1-v2
	>r dup @ r@+ - swap !+ dup @ r@+ - swap !+ dup @ r> @ - swap ! ;

::v3+ | v1 v2 -- ; v1=v1+v2
	>r dup @ r@+ + swap !+ dup @ r@+ + swap !+ dup @ r> @ + swap ! ;

::v3* | v1 s -- ; v1=v1*s
	>r dup @ r *. swap !+ dup @ r *. swap !+ dup @ r> *. swap ! ;
::v3= | v1 v2 --
	3 move ;

|-------------- rota directo -----------------------------
#cox #coy #coz
#six #siy #siz

:calcrot | rx ry rz --
	sincos 'coz ! 'siz !
	sincos 'coy ! 'siy !
	sincos 'cox ! 'six !
	;

:makerot | x y z -- x' y' z'
	rot rot | z x y
	over cox *. over six *. +	| z x y x'
	rot six *. rot cox *. - 	| z x' y'
	swap rot 					| y' x' z
	over coy *. over siy *. +	| y' x' z x''
	rot siy *. rot coy *. -		| y' x'' z'
	rot							| x'' y' z'
	over coz *. over siz *. +	|  x'' y' z' y''
	rot siz *. rot coz *. -		| x'' y'' z''
	;