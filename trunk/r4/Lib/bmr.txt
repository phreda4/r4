| bmr.txt (bitmap r)
| PHREDA 2010
|------------------------------
| 000 tam pal
|    0 paleta
|      0000 tipo bitmap
^r4/lib/dlg.txt
^r4/lib/trace.txt

#mempal 0
#paleta  0
#paleta2 )( 1020

|-- dibujo
#wpx #hpx	| ancho alto
#res 		|olucion
#frame  	| bitmap
#ih #vh		| inicio,salto de columnas

|----------------------------------------
| dibujo 1:1

:palpx!+ | pal
	2 << 'mempal + @ px!+ ;

:8bit@px!+ | hpx wpx val -- hpx wpx-cpx
	over 4 >? ( 4 nip )
	( 1? )( 1- swap
		$ff000000 and? ( dup 22 >> $3fc and palpx!+ )( 1 px+! )
		8 << swap ) 2drop
	4 >? ( 4 - )( 0 nip )
	;
:4bit@px!+ | hpx wpx val -- hpx wpx-cpx
	over 8 >? ( 8 nip )
	( 1? )( 1- swap
		$f0000000 and? ( dup 26 >> $3c and palpx!+ )( 1 px+! )
		4 << swap ) 2drop
	8 >? ( 8 - )( 0 nip )
	;
:3bit@px!+ | hpx wpx val -- hpx wpx-cpx
	over 10 >? ( 10 nip )
	( 1? )( 1- swap
		$e0000000 and? ( dup 27 >> $1c and palpx!+ )( 1 px+! )
		3 << swap ) 2drop
	10 >? ( 10 - )( 0 nip )
	;
:2bit@px!+ | hpx wpx val -- hpx wpx-cpx
	over 16 >? ( 16 nip )
	( 1? )( 1- swap
		$c0000000 and? ( dup 28 >> $c and palpx!+ )( 1 px+! )
		2 << swap ) 2drop
	16 >? ( 16 - )( 0 nip )
	;
:1bit@px!+ | hpx wpx val -- hpx wpx-cpx
	over 32 >? ( 32 nip )
	( 1? )( 1- swap
		$80000000 and? ( paleta )( paleta2 ) px!+
		2* swap ) 2drop
	32 >? ( 32 - )( 0 nip )
	;

:nbitpixel | vector dir --
	ih + >r sw wpx -
	hpx ( 1? )(
		wpx ( 1? )(
			r@+ pick3 exec
			) drop
		over px+!
		vh r+
		1- )
	3drop rdrop ;

|----------------------------------------------
:t0 | 32 bit/pixel
	ih + >r sw wpx - | columna
	hpx ( 1? )(
		wpx ( 1? )( r@+ px!+ 1- ) drop
		over px+!
		vh r+
		1- )
	2drop rdrop ;

:t1 | 8 bit/pixel
	'8bit@px!+ swap nbitpixel ;
:t2 | 4 bit/pixel
	'4bit@px!+ swap nbitpixel ;
:t3 | 3 bit/pixel
	'3bit@px!+ swap nbitpixel ;
:t4 | 2 bit/pixel
	'2bit@px!+ swap nbitpixel ;
:t5 | 1 bit/pixel
	'1bit@px!+ swap nbitpixel ;

:t6
:t7
:t8
:t9
:tA
:tB
:tC
:tD
:tE
:tF drop ;

#tipobmr t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 tA tB tC tD tE tF

|---------CLIP
:ynegativo | x y<0 -- x 0
	drop
	0 ;
:xnegativo | y x<0 -- y 0
	drop
	0 ;
:xpasado | y x>sw -- y sw
	drop
	sw 1- ;
:ypasado | x y>sh -- y sh
	drop
	sh 1- ;

::bmr.xy! | x y --
	0 dup 'ih ! 'vh !
	-? ( ynegativo ) sh >? ( ypasado )
	swap
	-? ( xnegativo ) sw >? ( xpasado )
	swap
	setxy ;

::bmr.clear
	frame wpx hpx *
	( 1? )( 1- 	0 rot !+ swap ) 2drop
	;

|----------draw
:tienepal | adr v --
	1 over 5 >> $3 and << 1- 2 <<
	rot	dup 'mempal ! + swap
	;

::bmr.size@ | val -- size(dwords)
	dup 12 >> $fff and swap
	dup $fff and swap
	24 >>
	$10 nand? ( drop * ; ) | falta
	1 swap 5 >> $3 and << 1- 2 <<
	rot rot * +
	;

|*** change size
::bmr.size! | w h --
	'hpx ! 'wpx !
	;

::bmr.drawxy | adr x y --
	bmr.xy!
::bmr.draw | adr --
	@+
	dup 12 >> $fff and 'wpx !
	dup $fff and 'hpx !
	24 >>
	$10 and? ( tienepal )( 'paleta 'mempal ! )
	$f and 2 << 'tipobmr + @ exec
	;

::bmr.drawin | xi yi --
	bmr.xy!
	frame res $f and 2 << 'tipobmr + @ exec ;

|----- interface con el generador
::bmrW | -- ancho ; en dwors para generar codigo
	wpx ;

:savepal
	;

::bmr.save | "" --
	mark
	wpx $fff and 12 << hpx or res 24 << or ,
	res $10000000 and? ( savepal ) drop
	frame here 4 - @ bmr.size@
	( 1? )( 1- swap @+ , swap ) 2drop
	savemem
	empty
	;

::bmr.load | "" --
	here dup rot load drop
::bmr.uso | adr --
	@+
	dup 12 >> $fff and 'wpx !
	dup $fff and 'hpx !
	24 >>
	$10 and? ( tienepal )( 'paleta 'mempal ! )
	'res !
	'frame ! ;

::bmr.wh@ | -- w h
	wpx hpx ;

::bmr! | c x y --
	wpx * + 2 << frame + ! ;

::bmr@ | x y -- c
	wpx * + 2 << frame + @ ;
