| FormKit.txt
| PHREDA 2011
|-----------------------------
^r4/lib/parse.txt
^r4/lib/fonta.txt
^r4/lib/input.txt
^r4/lib/btn.txt
^r4/lib/db2.txt

^r4/lib/trace.txt

#font1 fonta-dejavu10
#font2 fonta-dejavu14
#font3 fonta-dejavu10b
#font1 fonta-arial10
#font2 fonta-arial14
#font3 fonta-arial10b
#font1 font-vard-8
#font2 font-vard-12
#font3 font-vard-8-bold

|----- Formulario
#grupos )( 1024	| ini-fin
#grupon )( 1024 | nombre
#grupos> 'grupos

|----- layout
#xf #yf			| posicion actual
#yscroll
#ymin
#ymax

|--- Tipo de campos
| 0 Etiqueta (solo texto)
| 1 Alfanumerico		13
| 2 Texto Normalizado   14
| 3 Fecha	(dia)       15
| 4 Memo	(ancho,alto) 16
| 5 Precio (digitos,decimal) 17
| 6 Numero (digitos)         18
| 7 Radio (lista)            19
| 8 Lista	(lista)          20
| 9 Combo (lista o texto)    21
| a Grilla (tabla)
| b eXtendido
| c Boton
|
#tcampos "EATFMPNRLCGXB"

:nrocampo | car -- nro/0
    'tcampos ( c@+ 1? )( | car tt c
		pick2 =? ( drop 1- 'tcampos - nip ; )
		drop )
	nip nip ;

:parseTN | adr -- t cantidad
	dup c@ nrocampo
	3 =? ( nip 11 ; )		|en fecha siempre tiene largo 11
	$a =? ( nip $1fff ; )	|en grilla siempre hay
	swap 1+ ?0int ;

|--- MAP
::fkmap | vec 'fk -- ; vec | vec nro adri -- vec nro adri
	@ @+ swap @  | cnt memind
	( swap 1? )( 1- swap
		dup pick3 exec
		32 + ) 3drop ;

::fkmapmem | vec 'fk -- ; vec | v n adr -- v n adr
	@ @+ swap @
	( swap 1? )( 1- swap
		dup 12 + @ 0?
		( drop )( drop pick2 exec )
		32 + ) 3drop ;

::fkmapvis | vec 'fk -- ; vec | v n adr -- v n adr
	@ @+ swap @
	( swap 1? )( 1- swap
		dup 4+ @
		0 >? ( 13 <? ( drop pick2 exec )( drop ) )( drop )
		32 + ) 3drop ;

::fkclear | 'fk -- ; limpia memoria de registros
	[ dup 12 + @ 0 swap c! ; ] swap fkmapmem
	refreshfoco ;

::fkgetm | n 'fk -- str
	@ 4+ @ swap 5 << +
	12 + @ ;

|--- formulario para editar
|mem
| cnt total
| indice
| 0
| 0
|--- memoria de indice
| name tam|tipo arg1 mem x1|y1 x2|y2 xm|ym ???
#cntcmp
#inimem
#indmem

:>>.. | adr -- adr'
	( c@+ 32 <? )( 0? ( drop 1- ; ) drop ) drop 1- ;

:tr48 | "2 4 5" -- 0.5.4.2
	0? ( ; )
	?sint swap ?sint swap ?sint swap ?sint nip
	8 << or 8 << or 8 << or ;

:parsecmp! | ind adr -- ind+ adr
	swap >r
	dup r!+    						| Nombre
	dup >fld> dup
	1? ( parseTN 8 << or ) r!+		| tipo(8)tamaño(24<<8)
	1? ( >fld> tr48 ) r!+			| parametros
	0 r!+							| memoria
	0 r!+							| x1y1
	0 r!+							| x2y2
	0 r!+							| xmym
	0 r!+							| ????
	r> swap
	;

:calculocampos | ind mem --
	>>..
	parsecmp! 		| registros 1
	( c@+ 1? )(
		$7e =? ( drop >>.. parsecmp! )( drop )
		) 2drop
	dup indmem - 5 >> 1- 'cntcmp ! | 5=32* tam indice
	|------------ recalc here
	dup 'here !
	indmem ( over <? )(
|  		here over 12 + !
		dup 4+ @ 8 >>
		1? (
			here pick2 12 + !
			1+ 'here +! )( drop )
		32 + ) 2drop
	;

|--- 'campo->param
:getP 8 + @ ;		| parametro
:getM 12 + @ ;		| memoria

:getN | adr -- adr N
	dup 4+ @ 8 >> ;

:getP2 | adr -- adr p1 p2
	dup 8 + @
	dup $ff and
	swap 8 >> $ff and ;

:getMN | adr -- adr M N
	dup 12 + @
	over 4+ @ 8 >> ;

:getMNP2 | adr -- adr M N p1 p2
	dup 12 + @
	over 4+ @ 8 >>
	pick2 8 + @
	dup $ff and
	swap 8 >> $ff and ;

|--- tamaño en pantalla
#x1 #y1 #x2 #y2 #xm #ym
#xn #yn #yh
#h1 #h2

:savexy
	dup 16 + >r
	x1 16 << y1 or r!+
	x2 16 << y2 or r!+
	xm 16 << ym or r!+
	rdrop ;

:makebox | w h --
	yn dup 'y1 ! h1 + dup 'ym ! + 2 + 'y2 !
	xn dup 'x1 ! + 2 + xm max 'x2 !
	y2 4+ yh max 'yh !
	x2 4+ 'xn ! ;

:getiq	;
:galfa	getN scrsizew makebox ;
:gtext  getN scrsizew makebox ;
:gfech  11 scrsizew makebox ;
:gmemo	getP2 scrsizehw makebox ;
:gprec  getN scrsizew makebox ;
:gnume  getN scrsizew makebox ;
:gradi 	getN scrsizew makebox ;
:glist	getN scrsizew makebox ;
:gcomb	getN scrsizew makebox ;
:ggril	;
:gexte	;
:gbotn	;

#glinedit 'getiq 'galfa 'gtext 'gfech 'gmemo 'gprec 'gnume 'gradi 'glist 'gcomb 'ggril 'gexte 'gbotn

:cmpsize | 'campo --
	4+ @ $f and 2 << 'glinedit + @ exec ;

:titlesize
	0 'x1 ! yh 'y1 !
	200 'x2 ! yh h2 + 'y2 !
	0 'xn ! yh h2 + 'yn !
	savexy ;

:closesize
	0 'x1 ! yh 'y1 !
	100 'x2 ! yh 4+ 'y2 !
	0 'xn ! yh 4+ 'yn !
	savexy ;

|--- grilla

:makebox | w h --
	yn dup 'y1 ! h1 + dup 'ym ! + 2 + 'y2 !
	xn dup 'x1 ! + 2 + xm max 'x2 !
	y2 4+ yh max 'yh !
	x2 4+ 'xn ! ;

#inig
#sizg
:inigrid
	0 'xn ! yh 'yn !
	dup getP dup 1- 'sizg ! cols scrsizehw
	yn dup 'y1 ! h1 2* + 1+ dup 'ym ! + 2 + 'y2 !
	xn dup 'x1 ! + 2 + xm max 'x2 !
	y2 4+ yh max 'yh !
	x2 4+ 'xn !
	savexy
	drop
	dup 'inig !
	0 'xn !
	;

:endgrid
	0 'xn ! yh 4+ 'yn !
	savexy
	h2 2 + sizg * 'y2 +!
	inig 32 + ( over <? )(
		dup 4+ dup @
		dup $f and 12 +      	| convierte para grilla
		swap $ffffff00 and or
		swap !
		dup 16 + dup @ >uv nip
		16 << y2 or swap !
		32 + ) drop
	dup inig 28 + ! | guarda el final
	;

:linealay | vec nro adri -- vec nro adri
    dup @ "%a" mprint
	dup c@
	$2d =? ( 3drop titlesize ; )	| -
	$28 =? ( 2drop inigrid ; )		| (
	$29 =? ( 3drop endgrid ; )		| )
	$5b	=? ( 3drop titlesize ; )	| [
	$5d	=? ( 3drop closesize ; )	| ]
	32 <>? ( yh 'yn ! 0 'xn ! )( swap 1+ swap )
	drop
	sizeprint xn + 'xm ! drop
	cmpsize
	savexy ;

:layout | 'fk --
	font1 exec cch 'h1 !
	font3 exec cch 'h2 !
	font2 exec
	0 'x1 ! 0 'y1 !
	0 'x2 ! 0 'y2 !
	0 'xm ! 0 'ym !
	0 'xn ! 0 'yn ! 0 'yh !
	'linealay swap fkmap ;

|--- LOAD
::fkload | 'dir --
	dup
	here dup 'inimem !
	swap !+
	here 16 + swap load
	0 swap !+ dup 'indmem !
	here 16 + | iniind initab
	calculocampos

	inimem >r
	cntcmp r!+
	indmem r!+
	0 r!+
	0 r> !
	dup layout
	fkclear ;


::fkdump | adr --
	@ @+ swap @  | cnt memind
	( swap 1? )( 1- swap
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print cr
		) 2drop
	;

::fkedit | 'fk --
	[ @+ "%a* " print drop cr ; ]
	swap fkmap ;


|--- editar
:etiq	;
:alfa	getMN dup inputa ;
:text   getMN dup inputa ;
:fech   dup getM 10 11 inputa
		ink@ >r verde [ date "%d/%d/%d" mprint over getM strcpy ; ] "Hoy" link r> ink
		;
:memo	getMNP2 inputm ;
:prec   getMN dup inputa ;
:nume   getMN dup inputa ;
:radi 	dup getM over getP inputradi ;
:list	getMN pick2 getP inputlist ;
:comb	getMN pick2 getP inputlist ;
:gril
		;
:exte
:botn	;

#tlinedit 'etiq 'alfa 'text 'fech 'memo 'prec 'nume 'radi 'list 'comb 'gril 'exte 'botn

:cmpedit | 'campo --
	4+ @ $f and 2 << 'tlinedit + @ exec ;

|--- titulo
:cmptitle | 'campo --
    @ " %a" print ;

::fkeditplain | 'fk --
	chome! [ cmptitle cr ; ] over fkmap
	chome  [ cmpedit cr ; ] swap fkmap
|	chome  [ dup cmpedit cr ; ] swap fkmapmem
	;

|---- new edit
#xi #yi
:getsize | adr --
	dup 16 +
	@+ >uv xi + 'x1 ! yi + yscroll + 'y1 !
	@+ >uv xi + 'x2 ! yi + yscroll + 'y2 !
	@ >uv xi + 'xm ! yi + yscroll + 'ym !
	;

:edittitle
	font3 exec
	x1 y1 atxy dup @ 1+ " %a" print ;

:editcamposolo
	font2 exec
	x1 2 + y1 atxy ;

:boxtitle
	ink@ >r
	esfoco? 1? ( azul oscuro )( gris ) drop
	x1 y1 x2 ym cajaf
	blanco x1 ym x2 y2 cajaf
	gris oscuro x1 y1 x2 y2 caja x1 ym op x2 ym line
	esfoco? 0? ( negro )( blanco ) drop
	font1 exec x1 2 + y1 atxy dup @ "%a" print
	r> ink ;

:boxcmp
	font2 exec x1 2 + ym 2 + atxy ;

:boxtitlecmp
	boxtitle boxcmp ;

:boxgrid
	font2 exec x1 2 + y1 2 + atxy ;

:addgrid
	mark
	dup 28 + @ over 32 +
	( over <? )(
		dup getM ,s $5f ,c
		0 over getM c!
		32 + ) 2drop
	0 ,c
	empty
	here over getM strcat
	clickfoco1
	;

#xs )( 256
#xs> 'xs
#ys

:gridbox
	ink@ >r
	esfoco? 1? ( azul oscuro )( gris ) drop
	x1 y1 x2 ym cajaf
	blanco x1 ym x2 y2 cajaf
	gris oscuro x1 y1 x2 y2 caja x1 ym op x2 ym line
	esfoco? 0? ( negro )( blanco ) drop
	font3 exec x1 2 + y1 atxy dup @ 1+ "%a" print
	y2 'yh !
	sp sp 'addgrid "+" link
	dup 28 + @ over 32 +
	'xs 'xs> !
	( over <? )(
		getsize
		x1 |dup ym op dup yh line
		2 + dup xs> !+ 'xs> !
		ym atxy
		dup @ "%a" print
		32 + ) 2drop
	r> ink
	y2 2 - 'ys !
	font2 exec
	'xs over getM
	( swap xs> =? ( 'xs nip h2 2 + 'ys +! )
		@+ ys atxy
		swap
		dup "%a" print
		>mfld> 0? )
	2drop ;

:betiq	edittitle ;
:balfa	boxtitlecmp getMN dup inputa ;
:btext  boxtitlecmp getMN dup inputa ;
:bfech  boxtitle ink@ >r verde [ date "%d/%d/%d" mprint over getM strcpy ; ] "Hoy" link r> ink
		boxcmp dup getM 10 11 inputa ;
:bmemo	boxtitlecmp getMNP2 inputm ;
:bprec  boxtitlecmp getMN dup inputa ;
:bnume  boxtitlecmp getMN dup inputa ;
:bradi 	boxtitlecmp dup getM over getP inputradi ;
:blist	boxtitlecmp getMN pick2 getP inputlist ;
:bcomb	boxtitlecmp getMN pick2 getP inputlist ;
:bgril	gridbox	;

:bexte :bbotn ;

:bgalfa	boxgrid getMN dup inputa ;
:bgtext boxgrid getMN dup inputa ;
:bgfech boxgrid dup getM 10 11 inputa
		|ccw 2 << neg 'ccx +!
		|ink@ >r verde [ date "%d/%d/%d" mprint over getM strcpy ; ] "Hoy" link r> ink
		;
:bgmemo	boxgrid getMNP2 inputm ;
:bgprec boxgrid getMN dup inputa ;
:bgnume boxgrid getMN dup inputa ;
:bgradi boxgrid dup getM over getP inputradi ;
:bglist	boxgrid getMN pick2 getP inputlist ;
:bgcomb	boxgrid getMN pick2 getP inputlist ;

#blinedit 'betiq
'balfa 'btext 'bfech 'bmemo 'bprec 'bnume 'bradi 'blist 'bcomb 'bgril 'bexte 'bbotn
'bgalfa 'bgtext 'bgfech 'bgmemo 'bgprec 'bgnume 'bgradi 'bglist 'bgcomb


:focof
|	gris x1 y1 x2 y2 caja
	esfoco? 0? ( drop focovoid ; ) drop
	y2 ymax >? ( -2 'yscroll +! ) drop
	y1 ymin <? ( 2 'yscroll +! ) drop
	focovoid ;

#blinedito 0
'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof
'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof 'focof

:cadaedit | vec nro adri -- vec nro adri
	getsize
	4+ @ $ff and 2 <<
	y1 y2
	ymax >? ( 2drop -1 -1 ) drop
	ymin <? ( 'blinedito )( 'blinedit ) nip
	+ @ exec ;

::fkedit | 'fk --
	ccx 'xi ! ccy
	dup 'ymin !  'yi !
	ty2 'ymax !
	'cadaedit swap fkmap ;

::fkinit
	0 'yscroll ! 0 setfoco ;

|--- SERIALISE
:,sfl | "" --
	( c@+ 1? )( 	| conversion teclado-->print
|		$25 =? ( dup ,c ) | % -> %%
		$25 =? ( 32 nip ) | % -> %%
	|	$5f =? ( 32 nip ) | no
		$7c =? ( 32 nip ) | permite
		$7e =? ( 32 nip ) | separadores
		,c ) 2drop ;

:,| $7c ,c ;

:salfa :stext :sfech :smemo :sprec :snume :sradi :slist
:scomb :sgril
	dup getM ,sfl ,| ;
:sexte	:sbotn 	;

#sline 0 salfa stext sfech smemo sprec snume sradi slist scomb sgril sexte sbotn

:cmpser | 'campo --
	4+ @ $ff and
	0? ( drop ; )
	12 >? ( drop ; )
	2 << 'sline + @ exec ;

:cmpser2 | 'campo --
	dup getM ,sfl ,| ;

::fkserialice | 'fk --
	mark
|	'cmpser swap fkmap
	'cmpser2 swap fkmapmem | vis
	-1 'here +!
	$7e ,c 13 ,c 10 ,c 0 ,c
	empty ;

|-------- name
:nameser | 'campo --
	dup @ >sp> "%a|" mprint ,s ; |"%a|" ,print ;

::fkname | 'fk --
	mark
	'nameser swap fkmapmem
	-1 'here +!
	$7e ,c 13 ,c 10 ,c 0 ,c
	empty ;

::fksname | 'fks --
	mark
	( @+ 1? )( 'nameser swap fkmapmem ) 2drop
	-1 'here +!
	$7e ,c 13 ,c 10 ,c
	0 ,c
	empty ;


|--- DESERIALISE
|  reg vec nro adri -- reg vec nro adri
:dalfa :dtext :dfech :dmemo :dprec :dnume :dradi :dlist
:dcomb
	>r rot
	1? ( dup "%a" mprint r getM strcpy >fld> )
	rot rot r> ;
:dgril
	>r rot
	1? ( r getM fldcpy )
	rot rot r> ;
:dexte	:dbotn	;

#dline 0 dalfa dtext dfech dmemo dprec dnume dradi dlist dcomb dgril dexte dbotn

:cmpdes |
	4+ @ $ff and
	0? ( drop ; )
	12 >? ( drop ; )
	2 << 'dline + @ exec ;

:cmpdes2
	>r rot
	1? ( r getM fldcpy )
	rot rot r> ;

::fkdeserialice | reg 'fk --
|	'cmpdes swap fkmap drop ;
	'cmpdes2 swap fkmapmem drop ;

|--- lista fk

::fksserialice | 'fks --
	mark
	( @+ 1? )( 'cmpser2 swap fkmapmem ) 2drop
	-1 'here +!
	$7e ,c 13 ,c 10 ,c
	0 ,c
	empty ;

::fksdeserialice | reg 'fks --
	>r
	( r@+ 1? )( 'cmpdes2 swap fkmapmem ) 2drop
	rdrop ;

::fksclear | 'fks -- ; limpia memoria de registros
	>r
	( r@+ 1? )( fkclear ) drop
	rdrop ;


|----

