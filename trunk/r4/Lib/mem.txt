| Teclado, Memoria, Conversion, Basicos
| PHREDA
| :r4 system library
|-------------------------
^r4/lib/keyboard.txt

|--- Memoria
::zcopy | destino fuente -- destino' con 0
	( @+ 1? )( rot !+ swap ) rot !+ nip ;
::strcat | src des --
	( c@+ 1? )( drop ) drop 1-
::strcpy | src des --
	( swap c@+ 1? )( rot c!+ ) nip swap c! ;
::strcpyl | src des -- ndes
	( swap c@+ 1? )( rot c!+ ) rot c!+ nip ;
::strcpyln | src des --
	( swap c@+ 1? )( 13 =? ( 2drop 0 swap c! ; )
		rot c!+ ) rot c!+ drop ;
::strchg | ree car adr --
	( c@+ 1? )( | r c adr c
		pick2 =? ( drop pick2 over 1- c! )( drop )
		) 4drop ;

::copynom | sc s1 --
	( c@+ 32 >? )(
		rot c!+ swap ) 2drop
	0 swap c! ;

::copystr | sc s1 --
	( c@+ 34 <>? )(
		rot c!+ swap ) 2drop
	0 swap c! ;

|-------------------
::count | s1 -- s1 cnt
	0 over ( c@+ 1? )( drop swap 1+ swap ) 2drop  ;

::toupp | c -- C
	$40 and? ( $df and ) ; | cambia tambien[/]^_'
|	$60 >? ( $7b <? ( $20 - ) ) ;
::tolow
	$40 and? ( $20 or ) ;
|	$40 >? ( $5b <? ( $20 + ) ) ;

::strup | adr --	| EL GATO
	( dup c@ 1? )( toupp swap c!+ ) 2drop ;

::strnorm | adr --  | El Gato
	( dup c@ 0? ( 2drop ; ) toupp swap c!+
	( dup c@ $ff and 32 >? )( tolow swap c!+ ) drop
	( dup c@ $ff and 33 <? )( 0? ( 2drop ; ) drop 1+ )
	drop ) ;

:accsp | adr1 adr2 32
	( over c@ 32 =? )( drop swap 1+ swap )
	drop ;

::strtrim | adr -- | " hola  que(9) t " -> "hola que(9) t"
	dup
	( c@+ 1? )(
		32 =? ( accsp )
		rot c!+ swap )
	rot c!
	drop ;

|----------------------
::=word= | s1 s2 -- 0 \ s2' 1
	( swap c@+ 1? )( rot c@+ toupp rot -
		1? ( 3drop 0 ; ) drop ) 2drop
	dup c@ 33 <? ( drop 1 )( 2drop 0 ) ;

::= | s1 s2 -- 1/0
	( swap c@+ 1? )( toupp rot c@+ toupp rot -
		1? ( 3drop 0 ; ) drop ) 2drop
	c@ 33 <? ( 1 )( 0 ) nip ;

::=pre | s1 s2 -- 1/0
	( c@+ 1? )( toupp rot c@+ toupp rot -
		1? ( 3drop 0 ; ) drop swap ) 3drop 1 ;

::=w | s1 s2 -- 1/0
	( c@+ 32 >? )( toupp rot c@+ toupp rot -
		1? ( 3drop 0 ; ) drop swap ) 2drop
	c@ 33 <? ( 1 )( 0 ) nip ;

|--- Memoria libre
#:here 0

#memmap )( 1024
#memmap> 'memmap

::mark | --
	here 0? ( mem dup 'here ! nip ) memmap> !+ 'memmap> ! ;
::empty | --
	memmap> 'memmap =? ( mem nip )( 4 - dup 'memmap> ! @ ) 'here ! ;

::savemem | "" --
	memmap> 4 - @ here over - rot save ;

::cpymem | 'destino --
	memmap> 4 - @ here over -
	cmove ; | de sr cnt --

