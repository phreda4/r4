| LibColores
| PHREDA
|--------------------------------
^r4/lib/optdiv.txt

| degrade entre dos colores
|--------------------------------------
#rc #gc #bc
#sr #sg #sb

|---------------------
:pasocol | -- col
	rc sr + dup 'rc ! $ff0000 and
	gc sg + dup 'gc ! 8 >> $ff00 and or
	bc sb + dup 'bc ! 16 >> $ff and or ;

::cmorph | cant col1 col2 --
	over px!+
	over $ff0000 and dup 'rc ! over $ff0000 and swap - pick3  / 'sr !
	over 8 << $ff0000 and dup 'gc ! over 8 << $ff0000 and swap - pick3  / 'sg !
	swap 16 << $ff0000 and dup 'bc ! swap 16 << $ff0000 and swap - over  / 'sb !
	1- ( 1? )( 1- pasocol px!+ ) drop
	;

|--- diferencia de color
::diffrgb2 | a b -- v
	over 16 >> over 16 >> - abs | a b a1
	pick2 8 >> $ff and pick2 8 >> $ff and - abs + | a b a2
	rot $ff and rot $ff and - abs + ;

|--- promedio de color
::colavg | a b -- c
	2dup xor $fefefefe and 2/ >r or r> - ;

| yuv <-> rgb
|-----------------------------
::rgb2yuv | rgb -- yuv
	over 2* pick3 - pick2 - 3 >>  >r
	pick2 over - 2 >> 128 + >r
	+ + 2 >> r> r> ;

:bound | i -- i
	$ff >? ( $ff nip ) -? ( 0 nip ) ;

::yuv2rgb | yuv -- rgb
	pick2 16 - 76283 * pick2 128 - 132252 * + 16 >> bound >r
	pick2 16 - 76283 * pick2 128 - 25624 *  - pick2 128 - 53281 * - 16 >> bound >r
	nip 128 - 104595 * swap 16 - 76283 * + 16 >> bound r> r> ;

::yuv32 | yuv -- col
	pick2 16 - 76283 * pick2 128 - 132252 * + 16 >> bound >r
	pick2 16 - 76283 * pick2 128 - 25624 *  - pick2 128 - 53281 * - 16 >> bound 8 << $ff00 and >r
	nip 128 - 104595 * swap 16 - 76283 * + 16 >> bound 16 << $ff0000 and r> or r> or ;

| hsv 1.0 1.0 1.0 --> rgb

:h0 ;				|v, n, m
:h1 >r swap r> ;	|n, v, m
:h2 rot rot ;		|m, v, n
:h3 swap rot ;		|m, n, v
:h4 rot ;			|n, m, v
:h5 swap ;			|v, m, n
#acch h0 h1 h2 h3 h4 h5

::hsv2rgb | h s v -- rgb32
	1? ( 1- ) $ffff and swap
	0? ( drop nip 8 >> dup 8 << dup 8 << or or ; ) | hvs
	rot 1? ( 1- ) $ffff and
	dup 2* + 2*	| 6*
	dup 16 >> 	| vshH
	1 nand? ( $ffff rot - swap ) | vsfH
	>r $ffff and	| vsf
	1.0 pick2 - pick3 *. | vsfm
	>r
	*. 1.0 swap - | v (1-s*f)
	over *. r> | vnm
	r> 2 << 'acch + @ exec | rgb
	8 >> swap
	$ff00 and or swap
	8 << $ff0000 and or ;

::rgb2hsv | argb -- h s l
	dup 16 >> $ff and
	over 8 >> $ff and
	rot $ff and
	pick2 pick2 over <? ( swap ) | min max
	pick2 pick2 <? ( rot rot )( over <? ( swap ) )
	nip | r g b min max
	over =? ( nip nip nip nip dup dup ; )
	pick2 =? ( >r >r drop - $400 r> )(		| max=B
	pick3 =? ( >r >r rot - nip $200 r> )(	| max=G
				>r >r - nip 0 r> ) )		| max=R
		| g-b fac min  R:max
	rot 8 << r pick2 - / | fac min h  r:max
	rot + 			| min H   r:max
	$600 mod -? ( $5ff + )
	r rot - r 8 <</ | H S
	r> ;

| YCoCg colorspace (very fast)
::rgb2ycocg | r g b -- y co cg
	rot over - | r-b
	dup >r 2/ + | g t  r:co
	dup >r - r> | cg t r:co
	over 2/ + | cg Y r:co
	r> rot ; | Y co cg

::ycocg2rgb | y co cg -- r g b
	rot over 2/ - | co cg t
	dup pick3 2/ - >r | co cg t r:B
	+ swap r + swap r> | R G B
	;
