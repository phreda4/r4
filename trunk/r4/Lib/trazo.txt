| PHReda 2010
| estructura para trazos en 32 bits
| interface con TPEN
|-------------
^r4/lib/trace.txt

#trazo )( 2048
#trazo> 'trazo
#bx1 #by1
#bx2 #by2

:++trazo |
	trazo> 4 - @ =? ( drop ; )
:+trazo | u --
	trazo> !+ 'trazo> ! ;
:-trazo
	'trazo 'trazo> ! ;

:trazodraw
	'trazo @+ 0? ( 2drop ; ) >xy op
	( trazo> <? )( @+ >xy line ) drop ;
	;

::trazo.draw
	[ xymouse xy> +trazo ; ]
	[ xymouse xy> ++trazo ; ]
	[ -trazo ; ]
	guiMap
	trazodraw ;

|---
:colineal | q1 q2 q3 -- 0/1
	pick2 pick2 * 2 << >r | 4q1q2
	- + dup * r> - ;

:Qab | a b -- q
	over $ffff and
	over $ffff and - dup * >r
	swap 16 >> $7fff and
	swap 16 >> $7fff and - dup * r> + ;

| a-b q1
| b-c q2
| a-c q3
:checkline | --
	trazo> 12 - 'trazo <? ( drop ; )
	>r r@+	r@+	r> @ | a b c
	pick2 over Qab >r	| a b c r:q3
	over swap Qab >r	| a b 	r:q2 q3
	Qab r> r>
	colineal 1? ( drop ; ) drop
	trazo> 8 - dup 4+ @ swap !+ 'trazo> !
	;

:,tr | xy --
	trazo> 4 - @ $ffffff and =? ( drop ; )
	trazo> !+ 0 over ! 'trazo> !
	checkline ;

::trazo.add | agrega trazo a linea actual
	xymouse xy> ,tr ;

::trazo.start
	xymouse xy> $80000000 or
	trazo> !+ 0 over ! 'trazo> !
	;

::trazo.cnt | valor -- 1/0
	trazo> 'trazo - 2 >> ;

::trazo.cls
	'trazo 0 over ! 'trazo> !
	;

:trazo.info |
	sh sw 'bx1 ! 'by1 !
	0 0 'bx2 ! 'by2 !
	'trazo ( @+ 1? )(
		>xy
		by1 <? ( dup 'by1 ! )
		by2 >? ( dup 'by2 ! ) drop
		bx1 <? ( dup 'bx1 ! )
		bx2 >? ( dup 'bx2 ! ) drop
		) 2drop
	|bx1 bx2 over - dup 'wt ! 2/ + 'xt !
	|by1 by2 over - dup 'ht ! 2/ + 'yt !
	;

| cadapunto | v81212 --
::trazo.map | 'cadapunto --
	'trazo
	( @+ 1? )(
		pick2 exec
		) 3drop ;

|----- algoritmo de linea
#vec
#xa #ya

:hline | xd yd xa --
	pick2 - 0? ( drop vec exec ; )
	-? ( rot over + rot rot neg )
	( 1? )( 1- >r
		2dup vec exec
		swap 1+ swap
		r> ) 3drop
	;

:rline | xd yd --
	ya =? ( xa hline ; )
	xa ya pick2 <? ( 2swap )	| xm ym xM yM
	pick2 - >r			| xm ym xM  r:canty
	pick2 - r 16 <</
	rot 16 << rot rot
	r> 				|xm<<16 ym delta canty
	( 1? )( 1- >r >r
		over 16 >> over pick3 r + 16 >> hline
		1+ swap
		r + swap
		r> r> )
	4drop
	;

::vline! | x y --
	2dup rline
	'ya ! 'xa ! ;

|---- recorre por punto
::vop! | 'set --
	'vec !
	xymouse 'ya ! 'xa ! ;

