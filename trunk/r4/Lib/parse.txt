| Parse para numeros y busqueda en lista
| PHReda
|---------------------------
^r4/lib/mem.txt
^r4/lib/mprint.txt

:base | str -- str base
	dup c@ | str c
	$24 =? ( drop 1+ 16 ; )	| $ hexa $24
	$25 =? ( drop 1+ 2 ; ) 	| % bin  $25
	drop 10 ;

:signo | str -- str signo
	dup c@
	$2b =? ( drop 1+ 1 ; )		|+ $2b
	$2d =? ( drop 1+ -1 ; )	| - $2d
	drop 1 ;

:digito | c --  dig / -1
	$3A <? ( $30 - ; )			| 0..9
	$60 >? ( $57 - ; )			| a
	$40 >? ( $37 - ; )			| A
	drop -1 ;

#:basen

::?numero | str -- 0 / str' nro 1
	signo swap base 'basen ! 			| -1 str
	dup c@ 33 <? ( 3drop 0 ; ) drop
	0 ( over c@ 32 >? )(
		digito -? ( 4drop 0 ; )			| -1 str 0 dig
		basen >=? ( 4drop 0 ; )		| -1 str 0 dig
		swap basen * +				| -1 str dig+0*10
		swap 1+ swap )
	drop rot * 1 ;

|----- lee punto fijo ( -43.04 ==> 104 -43 t>fix16  --> $00eedddd
#parte0

::?fnumero | str -- 0/ str' parte1 parte0 1		; b
	10 'basen !
	signo swap
	dup c@ 33 <? ( 3drop 0 ; ) drop
|	dup 1+ c@ que pasa con .0?
	0 ( over c@ 32 >? )(				| -1 str 0 dig
		$2e =? (	 drop 'parte0 ! 1 )( 	| 1.33 .. parte0=1 retorna 133
			digito -? ( 4drop 0 ; )
			10 >=? ( 4drop 0 ; )
			swap 10 * + )
		swap 1+ swap )
	drop 1 =? ( parte0 0? ( 4drop 0 ; ) drop ) | casos -. y
	rot >r
	parte0
	16 << $10000 rot
	1 over ( 1 >? )( 10 / swap 10 * swap ) drop
	*/ $ffff and or
	r> *
	1 ;

::?int | adr -- adr' nro /-1
	dup c@ digito -? ( 2drop -1 ; ) 9 >? (  2drop -1 ; ) drop
	0 swap ( c@+ $2f >? )(	| 0 adr car
		digito -? ( 3drop -1 ; )
		10 >=? ( 3drop -1 ; )
		rot 2* dup 2 << + |10 *
		+ swap )
	drop 1- swap ;


::?0int | adr -- nro
	0 swap ( c@+ $2f >? )(	| 0 adr car
		digito -? ( 2drop ; )
		10 >=? ( 2drop ; )
		rot 2* dup 2 << + |10 *
		+ swap )
	2drop ;

::?sint | adr -- adr' nro
	0 swap ( c@+ $2f >? )(	| 0 adr car
		digito -? ( drop swap ; )
		10 >=? ( drop swap ; )
		rot 2* dup 2 << + |10 *
		+ swap )
	drop swap ;

|-----
::?lista  | str list -- str 0 / str' n
	>r ( r@+ 1? )(
		over =word= 1? ( drop nip r> ; )( drop )
		) drop rdrop 0 ;

::=s | s1 s2 -- 0/1
	( c@+ 32 >? )( toupp >r | s1 s2  r:c2
		swap c@+ toupp r> | s2 s1 c1 c2
		<>? ( 3drop 0 ; ) drop
		swap ) drop
	swap c@ $ff and 32 >? ( 0 )( 1 )
	nip nip ;


|------------- parseo
::trim | adr -- adr'	; proximo no espacio
	( dup c@ 33 <? )(
		0? ( drop ; )
		drop 1+ ) drop ;

::scanp | adr "str" -- adr'/0
	( c@+ 1? )( | d1 d2 c
		rot c@+ | d2 c d1 c
		rot <>? ( 3drop 0 ; )
		drop | d2 d1
		swap
		)
	2drop ;

::scanstr | adr 'str -- adr'
	swap 0? ( nip ; )
	( c@+ $ff and 31 >? )(
		rot c!+ swap ) drop
	1- nip ;

::scannro | adr 'nro -- adr'
	over trim ?numero 0? ( 2drop ; ) drop
	rot ! nip
	;

::scanc | c adr -- adr'/0
	0? ( nip ; )
	( c@+ 1? )(
		pick2 =? ( drop nip 1- ; )
		drop )
	nip nip ;

::scann | adr "str" -- adr'
	c@+ pick2 scanc
	0? ( nip nip ; )
	1+ rot drop swap | adr' "tr"
	( c@+ 1? )(      | adr r t
		rot c@+      | r t adr a
		rot <>? ( 3drop 0 ; ) | r adr a
		drop swap )
	2drop ;

|-------- busca en lista
::inupp? | "dup " 'lista -- nro+1/0
	1 swap | "dup " 1 'lista
	( dup c@ 1? )( drop
		pick2 over =s 1? ( 2drop nip ; ) drop
		swap 1+ swap
		( c@+ 1? )( drop ) drop
		) nip nip nip ;

|---- corredores
::>>s | adr -- adr'  _
	( c@+ 1? )(
		$5f =? ( drop ; ) 		| _
		$7c =? ( drop 1- ; )	||
		$7e =? ( drop 1- ; )	| ~ registro
		drop ) drop 1- ;

::>>f | adr -- adr' |
	( c@+ 1? )(
		$7c =? ( drop ; )
		$7e =? ( drop 1- ; ) | ~ registro
		drop ) drop 1- ;

::fld# | adr -- adr cnt
	0 over
	( c@+ 1? )(
		$7c =? ( rot 1+ rot rot )
		$7e =? ( 2drop ; ) | ~ registro
		drop ) 2drop ;


::>>fi | adr -- adr'  _
	( c@+ 1? )(
		$7e =? ( drop ; ) | ~ registro
		drop ) drop 1- ;

::reg# | adr -- adr cnt
	0 over
	( c@+ 1? )(
		$7e =? ( rot 1+ rot rot ) | ~ registro
		drop ) 2drop ;


::>>0 | adr -- adr' ; pasa 0
	( c@+ 1? )( drop ) drop ;

|------
::lfcr | adr -- ; convierte lf en cr
	( c@+ 1? )(
		10 =? ( 13 pick2 1- c! )
		drop ) 2drop ;

|------
::>>sp | adr -- adr'	; proximo espacio
	( c@+ 1? )(
		33 <? ( drop 1- ; )
		drop ) drop 1- ;

::>>cr | adr -- adr'	; proxima linea
	( c@+ 13 >? )( drop )
	0? ( drop 1- ; )
	drop ;

|---- listas string "1_2_3"
::lstget | lista nro -- adr
	( 1? )( 1- swap >>s swap ) drop ;

::lstcpy | 'var lista nro --
	lstget | 'var 'lst
	( c@+
		$5f =? ( 0 nip )
		$7c =? ( 0 nip )
		$7e =? ( 0 nip )
		1? )( rot c!+ swap ) nip swap c! ;

::lstcnt | list -- cnt
	dup c@ 0? ( nip ; ) drop
	1 swap ( c@+
		$7c =? ( 0 nip )
		$7e =? ( 0 nip )
		1? )(
		$5f =? ( drop swap 1+ swap )( drop )
		) 2drop ;

::lstvec | vec list --
	( dup c@ 1? )( drop
		over exec >>s ) 3drop ;

:=l | s1 s2 -- 0/1
	( c@+ 32 >? )( >r | s1 s2  r:c2
		swap c@+ r> | s2 s1 c1 c2
		<>? ( 3drop 0 ; ) drop
		swap ) 3drop 1 ;

::lstmatch | "val" list -- nro/-1
	0 >r
	( dup c@ 1? )( drop
		dup pick2 =l 1? ( 3drop r> ; ) drop
		>>s 1 r+ )
	3drop rdrop -1 ;


