| boluconvert
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/trace.txt

#LOADFILE
|	"../r4dataextern/ply/bun_zipper.ply"
|	"../r4dataextern/ply/xyzrgb_statuette.ply"
|	"../r4dataextern/ply/happy_vrip.ply"
|	"../r4dataextern/ply/xyzrgb_dragon.ply"
|	"../r4dataextern/ply/dragon_vrip.ply"
|	"../r4dataextern/ply/test.ply"
|	"../r4dataextern/obj/ducky.obj"
|	"../r4dataextern/obj/m60.obj"
|	"../r4dataextern/obj/armadillo.obj"
|	"../r4dataextern/obj/horse.obj"
|	"../r4dataextern/obj/teapot.obj"
	"../r4dataextern/obj/xyzrgb_statuette - 125k.obj"

#SAVEFILE
"media/b3d/xyzrgb_statuette.b3d"

#iniply
#iniver | inicio de vertices
#inisor | inicio de lista ordenada
#ininor | inicio de normales

#xcam 0 #ycam 0 #zcam 2048

#bolu3dMap

#bolu3dRes $3ff | 1024
#bolu3dSca 10
#bolu3dRes $1ff | 512
#bolu3dSca 9
#bolu3dRes $ff | 256
#bolu3dSca 8

|------------ carga y parseo
#vertices
#faces
#bin

:>>10
	( c@+ 1? )(
		$a =? ( drop ; )
		drop ) drop 1- ;

:parseheader | adr -- adr
	( dup c@ 1? )( drop
		dup "element vertex" =pre 1? ( drop 15 + trim str>nro 'vertices ! dup ) drop
		dup "element face" =pre 1? ( drop 12 + trim str>nro 'faces ! dup ) drop
		dup "binary_big_endian" =pre 1? ( drop 17 + dup 1 'bin ! ) drop
		dup "end_header" =pre 1? ( drop 10 + ; ) drop
		1+ ) drop
	1- ;


|----------- read sigle 32bit float (not work)
:bswap | v - v
	dup $ff and 24 << >r
	dup $ff00 and 8 << r+
	dup $ff0000 and 8 >> r+
	24 >> $ff and r> or ;

:float2fix | r -- f
	bswap
	dup $7fffff and $800000 or |fraction
	over 23 >> $ff and  | s frac exp
|	0? ( denormalized ; )
	$ff =? ( 3drop 0 ; ) | special value
	127 - -? ( neg << )( >> )
	swap -? ( drop neg )( drop )
|	8 >>
	;

| binary big endian
:parsebinb
	iniver >r
	vertices ( 1? )( 1- swap
		@+ float2fix r!+
		@+ float2fix r!+
		@+ float2fix r!+
		swap ) drop
	r> dup 'inisor !
	vertices 3 << + 'ininor !
	drop ;

:parseply | adr --
	0 'bin !
	parseheader
	>>10
	bin 1? ( drop parsebinb ; ) drop
	| ascii only
	iniver >r
	vertices ( 1? )( 1- swap
		trim str>fix r!+
		trim str>fix r!+
		trim str>fix r!+
		>>10
		swap ) drop
	r> dup 'inisor !
	vertices 3 << + dup 'ininor !
	vertices 12 * + 'here !
	drop ;

:loadply | filename --
	mark
	here dup 'iniply !
	swap load
	0 swap !+ 'iniver !
	iniply parseply ;

|----- load obj
:esvert | adr c v -- adr x v
	>r drop
	trim str>fix r!+
	trim str>fix r!+
	trim str>fix r!+
	1 'vertices +!
	dup r> ;

:parseobj | adr --
	0 'vertices !
	iniver >r
	( c@+ 1? )(
		$76 =? ( drop c@+ 32 =? ( r> esvert >r ) )
		drop
		>>10 trim
		) drop
	r> dup 'inisor !
	vertices 3 << + dup 'ininor !
	vertices 12 * + 'here !
	drop ;

:loadobj | "filename" --
	mark
	here dup 'iniply !
	swap load
	0 swap !+ 'iniver !
	iniply parseobj
	;

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+ ;

:drawpc
	iniver >r
	blanco
	vertices ( 1? )( 1-
		r@+ r@+ r@+ drawp
		) drop
	rdrop ;

:3dop project3d op ;
:3dline project3d line ;

:drawpcn
	iniver
	ininor >r
	vertices ( 1? )( 1- swap
		>r r@+ r@+ r@+ r> r> swap >r >r
		pick2 r@+ + pick2 r@+ + pick2 r@+ +
		3dop 3dline
		r> r> swap >r
		swap ) 2drop
	rdrop
	;

|----------- ajuste
#xmin #ymin #zmin #xmax #ymax #zmax

:statvert
	iniver >r
	r@+ dup 'xmin ! 'xmax !
	r@+ dup 'ymin ! 'ymax !
	r@+ dup 'zmin ! 'zmax !
	vertices 1-
	( 1? )( 1-
		r@+ xmin <? ( dup 'xmin ! ) xmax >? ( dup 'xmax ! ) drop
		r@+ ymin <? ( dup 'ymin ! ) ymax >? ( dup 'ymax ! ) drop
		r@+ zmin <? ( dup 'zmin ! ) zmax >? ( dup 'zmax ! ) drop
		) drop
	rdrop ;

:movevert | dx dy dz --
	iniver >r
	vertices ( 1? )( 1-
		r @ pick4 + r!+
		r @ pick3 + r!+
		r @ pick2 + r!+
		) drop
	rdrop
	3drop ;

:3max | a b c -- a
	over <? ( drop )( nip )
	over <? ( drop )( nip )
	;

:normalizovertices
|	$1ff	| a 10bits por coordenada
	bolu3dRes 2/
	xmax ymax zmax 3max 0? ( 2drop ; )
	iniver >r
	vertices ( 1? )( 1- 		| m dv nro --
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		) 3drop
	rdrop
	;

|----- calcula normales
#p0 #p0d
#p1 #p1d

:dist | p p1 -- p p1 dist2
	over @ over @ - dup *. >r
	over 4+ @ over 4+ @ - dup *. r+
	over 8 + @ over 8 + @ - dup *. r> + ; | x^2+y^2+z^2

:dista | p p1 -- p p1 dist2 ; sin *.
	over @ over @ - abs  >r
	over 4+ @ over 4+ @ - abs r+
	over 8 + @ over 8 + @ - abs r> + ; | x^2+y^2+z^2

:compmax | p pn dist - p
	0? ( 2drop ; )
	p0d <? ( p0d 'p1d ! 'p0d ! p0 'p1 ! 'p0 ! ; )
	p1d <? ( 'p1d ! 'p1 ! ; )
	2drop ;

:busco2mascerca | p -- p p0 p1
	iniver >r
	$7fffffff 'p0d !
	$7fffffff 'p1d !
	vertices ( 1? )( 1- swap
		r dista compmax
		12 r+ swap ) drop rdrop
	p0 p1 ;

|		Vector3f v0 = (p0-p).Unit();
|		Vector3f v1 = (p1-p).Unit();
|		point.normal = v1.Cross(v0);
|		if(p.Dot(point.normal) < 0) point.normal = -point.normal;

#v0 0 0 0
#v1 0 0 0

:calculonormal | p p0 p1 -- p zn yn xn
	'v1 swap v3=
	'v0 swap v3=
	'v0 over v3- 'v0 v3nor
	'v1 over v3- 'v0 v3nor
	'v1 'v0 v3vec
	dup 'v1 v3ddot -? ( 'v1 -1.0 v3* ) drop
	|'v1 v3nor
	'v1 @+ swap @+ swap @ swap rot
	;

:calcnormales
	ininor >r
	iniver
	vertices ( 1? )( 1- swap
		busco2mascerca	| p p0 p1
		calculonormal	| p xn yn zn
		r!+ r!+ r!+ 	| guardo normal
		12 + swap ) 2drop
	rdrop
	;

|-------------------------------
| nodo es $00000000
|            maxmin
:fill0 | mem cnt --
	( 1? )( 1- $fff rot !+ swap ) 2drop ; | max=0 min=$fff

:toa | x y -- l
	bolu3dSca << + 2 << ;
:dim0 | x y -- adr
	toa bolu3dMap + ;
:dim1 | y z -- adr
	toa bolu3dMap + bolu3dRes dup * 2 << + ;
:dim2 | x z -- adr
	toa bolu3dMap + bolu3dRes dup * 3 << + ;

:rellena | x y z adr valor -- x y z
	over @ | adr valor valant
	dup 16 >> $ffff and
	swap $ffff and | adr valor max min
	pick2 >? ( drop over )
	swap pick2 <? ( drop over ) | adr valor min max
	16 << or nip
	swap !
	;

:fillall | x y z --
	pick2 pick2 dim0 over rellena
	over over dim1 pick3 rellena
	pick2 over dim2 pick2 rellena
	3drop ;

:fillbolu3d
	here 'bolu3dMap !
	bolu3dMap
	bolu3dRes dup * 12 *
	fill0
	iniver >r
	vertices ( 1? )( 1-
		r@+ bolu3dRes 2/ + -? ( 0 nip ) bolu3dRes >? ( trace )
		r@+ bolu3dRes 2/ + -? ( 0 nip ) bolu3dRes >? ( trace )
		r@+ bolu3dRes 2/ + -? ( 0 nip ) bolu3dRes >? ( trace )
		fillall
		) drop
	rdrop

	;
|---- procesa pc
:loada
	'LOADFILE
	".ply" =pos 1? ( drop loadply ; ) drop
	".obj" =pos 1? ( drop loadobj ; ) drop
	drop
	;

:procply
	"load 3D point cloud" print cr redraw
	loada
	vertices "%d vertices" print cr redraw
    "centra" print cr redraw
	statvert
	xmin xmax + 2/ neg ymin ymax + 2/ neg zmin zmax + 2/ neg movevert | centra
    "normaliza" print cr redraw
	statvert normalizovertices statvert
|   "normales" print cr redraw
|	calcnormales
	"fill undimaps" print cr redraw
	fillbolu3d
	;

|---- caja en contenido
:drawboxz | z --
	xmin ymin pick2 3dop
	xmax ymin pick2 3dline
	xmax ymax pick2 3dline
	xmin ymax pick2 3dline
	xmin ymin rot 3dline ;

:drawlinez | x1 x2 --
	2dup zmin 3dop zmax 3dline ;

:draw3dbox
	zmin drawboxz
	zmax drawboxz
	xmin ymin drawlinez
	xmax ymin drawlinez
	xmax ymax drawlinez
	xmin ymax drawlinez
	;

|---- caja en normalizado
:drawboxz | z --
	-$1ff -$1ff pick2 3dop
	$1ff -$1ff pick2 3dline
	$1ff $1ff pick2 3dline
	-$1ff $1ff pick2 3dline
	-$1ff -$1ff rot 3dline ;

:drawlinez | x1 x2 --
	2dup -$1ff 3dop $1ff 3dline ;

:draw3dnorm
	-$1ff drawboxz
	$1ff drawboxz
	-$1ff -$1ff drawlinez
	$1ff -$1ff drawlinez
	$1ff $1ff drawlinez
	-$1ff $1ff drawlinez ;

#map
#linei

:plan1
	map linei bolu3dSca << +
	>r
	0 ( bolu3dRes <? )(
		0 over setxy
		-1 ( bolu3dRes <? )(
				r@+ px!+
				1+ ) drop
		1+ ) drop rdrop
        bolu3dRes
		[ bolu3dMap 'map ! ; ] <f1>
		[ bolu3dMap bolu3dRes dup * 2 << + 'map ! ; ] <f2>
		[ bolu3dMap bolu3dRes dup * 3 << + 'map ! ; ] <f3>
|		[ 4 'linei +! ; ] <up>
|		[ -4 'linei +! ; ] <dn>

	;

:saveb3d | "" --
	bolu3dMap bolu3dRes dup * 12 * rot save ;

:plan | x 'map --
	>r
	0 ( bolu3dRes <? )(
		over over setxy
		-1 ( bolu3dRes <? )(
				r@+ px!+
				1+ ) drop
		1+ ) 2drop rdrop ;

:vieplan
	bolu3dMap 'map !
	show clrscr
		0 bolu3dMap plan
		bolu3dRes bolu3dMap bolu3dRes dup * 2 << + plan
		bolu3dRes 2* bolu3dMap bolu3dRes dup * 3 << + plan
		[ 'SAVEFILE saveb3d ; ] <f1>
		'exit >esc< ;

|--------------------------
:main
	4
	here 'iniply !
	show clrscr
		verde dup ":r%d " print
		blanco 'LOADFILE " %s " print
		verde faces vertices "v:%d f:%d" print
		cyan bolu3dRes dup dup * 2 << 3 * swap " b4R:%d mem:%d" print cr
		verde
|		$1ff xmin "x:%f X:%f" print $1ff -$1ff "y:%f Y:%f" print $1ff -$1ff "z:%f Z:%f" print cr
		$1ff xmin "x:%d X:%d" print $1ff -$1ff "y:%d Y:%d" print $1ff -$1ff "z:%d Z:%d" print cr

|		xmin $1ff + 2/ neg -$1ff $1ff + 2/ neg -$1ff $1ff + 2/ neg "zm:%f ym:%f xm:%f" print cr

		azul
|		printcodes
		rojo chome!
		cflecha

		omode
		freelook
		xcam ycam zcam mtrans

|		blanco draw3dbox
		cyan draw3dnorm
|		verde drawpcn
|		azul drawoc

|		verde drawpc
		drawpc

		'procply <f1>
		'vieplan <f2>

		'savemodel <f3>

		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
