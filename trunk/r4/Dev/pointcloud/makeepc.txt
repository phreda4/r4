| pointcloud
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/trace.txt
^r4/lib/sort.txt

#LOADFILE
|	"../r4dataextern/ply/xyzrgb_statuette.ply"
|	"../r4dataextern/ply/Armadillo.ply"
|	"../r4dataextern/ply/happy_vrip_res3.ply"
|	"../r4dataextern/ply/horse.ply"
|	"../r4dataextern/ply/xyzrgb_dragon.ply"
	"../r4dataextern/ply/bun_zipper_res4.ply"
|	"../r4dataextern/ply/dragon_vrip_res3.ply"
|	"../r4dataextern/ply/dragon_vrip.ply"
|	"../r4dataextern/ply/test.ply"

|	"../r4dataextern/obj/ducky.obj"
|	"../r4dataextern/obj/m60.obj"
|	"../r4dataextern/obj/armadillo.obj"

#iniply
#iniver | inicio de vertices
#inisor | inicio de lista ordenada
#ininor | inicio de normales
#inioct | inicio de octree
#octre>

#xcam 0 #ycam 0 #zcam 8192

|------------ carga y parseo
#vertices
#faces
#bin

:>>10
	( c@+ 1? )(
		$a =? ( drop ; )
		drop ) drop 1- ;

:parseheader | adr -- adr
	( dup c@ 1? )( drop
		dup "element vertex" =pre 1? ( drop 15 + trim str>nro 'vertices ! dup ) drop
		dup "element face" =pre 1? ( drop 12 + trim str>nro 'faces ! dup ) drop
		dup "binary_big_endian" =pre 1? ( drop 17 + dup 1 'bin ! ) drop
		dup "end_header" =pre 1? ( drop 10 + ; ) drop
		1+ ) drop
	1- ;


|----------- read sigle 32bit float (not work)
:bswap | v - v
	dup $ff and 24 << >r
	dup $ff00 and 8 << r+
	dup $ff0000 and 8 >> r+
	24 >> $ff and r> or ;

:float2fix | r -- f
	bswap
	dup $7fffff and $800000 or |fraction
	over 23 >> $ff and  | s frac exp
|	0? ( denormalized ; )
	$ff =? ( 3drop 0 ; ) | special value
	127 - -? ( neg << )( >> )
	swap -? ( drop neg )( drop )
|	8 >>
	;

| binary big endian
:parsebinb
	iniver >r
	vertices ( 1? )( 1- swap
		@+ float2fix r!+
		@+ float2fix r!+
		@+ float2fix r!+
		swap ) drop
	r> dup 'inisor !
	vertices 3 << + dup 'ininor !
	vertices 12 * + 'inioct !
	drop
	;

:parseply | adr --
	0 'bin !
	parseheader
	>>10
	bin 1? ( drop parsebinb ; ) drop
	| ascii only
	iniver >r
	vertices ( 1? )( 1- swap
		trim str>fix r!+
		trim str>fix r!+
		trim str>fix r!+
		>>10
		swap ) drop
	r> dup 'inisor !
	vertices 3 << + dup 'ininor !
	vertices 12 * + 'inioct !
	drop
	;

:loadply
	mark
	here dup 'iniply !
	'LOADFILE
	load
	0 swap !+ 'iniver !
	iniply parseply ;

|----- load obj

:esvert | adr c v -- adr x v
	>r drop
	trim str>fix r!+
	trim str>fix r!+
	trim str>fix r!+
	1 'vertices +!
	dup r> ;

:parseobj | adr --
	0 'vertices !
	iniver >r
	( c@+ 1? )(
		$76 =? ( drop c@+ 32 =? ( r> esvert >r ) )
		drop
		>>10 trim
		) drop
	r> dup 'inisor !
	vertices 3 << + dup 'ininor !
	vertices 12 * + 'inioct !
	drop ;

:loadobj
	mark
	here dup 'iniply !
	'LOADFILE
	load
	0 swap !+ 'iniver !
	iniply parseobj
	;

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:drawpc
	iniver >r
	blanco
	vertices ( 1? )( 1-
		r@+ r@+ r@+ drawp
		) drop
	rdrop
	;


:3dop project3d op ;
:3dline project3d line ;

:drawpcn
	iniver
	ininor >r
	vertices ( 1? )( 1- swap
		>r r@+ r@+ r@+ r> r> swap >r >r
		pick2 r@+ + pick2 r@+ + pick2 r@+ +
		3dop 3dline
		r> r> swap >r
		swap ) 2drop
	rdrop
	;

|----------- ajuste
#xmin #ymin #zmin #xmax #ymax #zmax

:statvert
	iniver >r
	r@+ dup 'xmin ! 'xmax !
	r@+ dup 'ymin ! 'ymax !
	r@+ dup 'zmin ! 'zmax !
	vertices 1-
	( 1? )( 1-
		r@+ xmin <? ( dup 'xmin ! ) xmax >? ( dup 'xmax ! ) drop
		r@+ ymin <? ( dup 'ymin ! ) ymax >? ( dup 'ymax ! ) drop
		r@+ zmin <? ( dup 'zmin ! ) zmax >? ( dup 'zmax ! ) drop
		) drop
	rdrop ;

:movevert | dx dy dz --
	iniver >r
	vertices ( 1? )( 1-
		r @ pick4 + r!+
		r @ pick3 + r!+
		r @ pick2 + r!+
		) drop
	rdrop
	3drop ;

:3max | a b c -- a
	over <? ( drop )( nip )
	over <? ( drop )( nip )
	;

:normalizovertices
	$1ff	| a 10bits por coordenada
	xmax ymax zmax 3max 0? ( 1 nip )
	iniver >r
	vertices ( 1? )( 1- 		| m dv nro --
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		) 3drop
	rdrop
	;

|----- calcula normales
#p0 #p0d
#p1 #p1d

:dist | p p1 -- p p1 dist2
	over @ over @ - dup *. >r
	over 4+ @ over 4+ @ - dup *. r+
	over 8 + @ over 8 + @ - dup *. r> + ; | x^2+y^2+z^2

:dista | p p1 -- p p1 dist2 ; sin *.
	over @ over @ - abs  >r
	over 4+ @ over 4+ @ - abs r+
	over 8 + @ over 8 + @ - abs r> + ; | x^2+y^2+z^2

:compmax | p pn dist - p
	0? ( 2drop ; )
	p0d <? ( p0d 'p1d ! 'p0d ! p0 'p1 ! 'p0 ! ; )
	p1d <? ( 'p1d ! 'p1 ! ; )
	2drop ;

:busco2mascerca | p -- p p0 p1
	iniver >r
	$7fffffff 'p0d !
	$7fffffff 'p1d !
	vertices ( 1? )( 1- swap
		r dista compmax
		12 r+ swap ) drop rdrop
	p0 p1 ;

|		Vector3f v0 = (p0-p).Unit();
|		Vector3f v1 = (p1-p).Unit();
|		point.normal = v1.Cross(v0);
|		if(p.Dot(point.normal) < 0) point.normal = -point.normal;

#v0 0 0 0
#v1 0 0 0

:calculonormal | p p0 p1 -- p zn yn xn
	'v1 swap v3=
	'v0 swap v3=
	'v0 over v3- 'v0 v3nor
	'v1 over v3- 'v0 v3nor
	'v1 'v0 v3vec
	dup 'v1 v3ddot -? ( 'v1 -1.0 v3* ) drop
	|'v1 v3nor
	'v1 @+ swap @+ swap @ swap rot
	;

:calcnormales
	ininor >r
	iniver
	vertices ( 1? )( 1- swap
		busco2mascerca	| p p0 p1
		calculonormal	| p xn yn zn
		r!+ r!+ r!+ 	| guardo normal
		12 + swap ) 2drop
	rdrop
	;

|----- hace octree
|x y z . 10 bits
| sobra 2 bits!!
:morton3d | x y z -- Z
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	2* swap
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	or 2* swap
	dup 10 << or $000f801f and
	dup 4 << or  $00e181c3 and
	dup 2 << or  $03248649 and
	dup 2 << or  $09249249 and
	or ;

:ordenapormorton
	mark
	inisor 'here ! | lista para ordenar
	iniver >r
	vertices ( 1? )( 1-
		r r@+ r@+ r@+ morton3d , , | no funciona si usa >10bits por eje
		) drop
	rdrop
	empty
	vertices 1+ inisor shellsort
	;

|----------- imprime con color
#xa #ya #za
:chosecolor | x y z ---
	blanco
	za <>? ( ; )
	rot xa <>? ( rot rot ; )
	rot ya <>? ( rot ; ) | z x y
	azul
	rot ;

:drawl | x y z ---
	chosecolor
	pick2 'xa !
	over 'ya !
	dup 'za !
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:drawpcdupli
	inisor >r
	vertices ( 1? )( 1-
		4 r+ r@+ >r r@+ r@+ r@+ drawl rdrop
		) drop
	rdrop ;

|-------------------------------
#cntdup

:ck
	dup
	@+ xa <>? ( 2drop ; ) drop
	@+ ya <>? ( 2drop ; ) drop
	@+ za <>? ( 2drop ; ) drop
	drop
	| donde lo quita?
	1 'cntdup +! ;

:checkm | m --
	ck 'xa swap 3 move ;

:removedups
	inisor >r
	r @ 1+ 'xa !
	0 'cntdup !
	vertices ( 1? )( 1- 4 r+ r@+ checkm ) drop
	rdrop ;

|-------------------------------
:savemodel | "" --
	mark

	savemem
	empty
	;

|--------------------------------
#arroc )( 8192 | array de nodos
#arroc> 'arroc
#indexoc

:pushoc | mask ini fin --
	1 'indexoc +!
	arroc> !+ !+ !+ 0 swap !+ 'arroc> ! ;

:cntoc | -- cnt
	'arroc arroc> - 4 >> ;
|	'arrox arroc> - ;

:getoc | -- fin ini mask
	'arroc >r r@+ r@+ r@+ rdrop
	'arroc dup 16 + arroc> pick2 - 2 >> move
	-16 'arroc> +!
	;

#octomas 0 0 0 0 0 0 0 0

:fillmass | fin ini shift --
	0 0 0 0 0 0 0 0 'octomas
	!+ !+ !+ !+ !+ !+ !+ !
	pick2 3 << inisor +
	pick2 3 << inisor +
	( over <? )( | fin ini shift fina nowa
		@+ pick3 | mask fina nowa morton
		>> $7 and 2 << 'octomas +
		1 swap +!
		4+ )
	2drop ;

:buildbit | -- 8bitchild ; prende el incorrecto
	0 'octomas $1
	( $ff and 1? )(
		swap @+ 1? ( drop rot pick2 or rot rot )( drop )
		swap 2* ) 2drop ;

:buildbit | -- 8bitchild
	0 'octomas $80
	( 1? )(
		swap @+ 1? ( drop rot pick2 or rot rot )( drop )
		swap 2/ ) 2drop ;

:,oc | val --
	octre> !+ 'octre> ! ;

:buildnext
	getoc				| fin ini shift
	fillmass rot drop	| ini shift
	3 -
	12 <? ( 2drop $ff00 ,oc ; )	| fin resolucion
	buildbit						| ini shift bitmask
	0? ( 3drop $ff00 ,oc ; ) 		| graba hoja

|	octre> inioct - 2 >> 1+ 8 << |mmm **
	indexoc 8 <<	| absoluto, en relativo es mas chico!! calcular!

	over or ,oc				| graba nodo interno
	'octomas >r				| ini shift bit
	rot dup r@+ + rot 		| shift ini fin bitmask
	( $ff and 1? )(
		$80 and? ( pick3 pick3 pick3 pushoc )
		rot drop
		swap dup r@+ +		| shift bitmask ini fin
		rot 2* ) rdrop
	4drop ;


:buildoctree
	0 'indexoc !
	inioct 'octre> !	| mem de nodos
	'arroc 'arroc> !	| array de nodos
	27 0 vertices pushoc
	( cntoc 1? )( drop
		buildnext
		) drop
	;

|-------- dibujo octree
#xc #yc #zc
#size

:drawz | z --
	xc size - yc size - pick2 3dop
	xc size + yc size - pick2 3dline
	xc size + yc size + pick2 3dline
	xc size - yc size + pick2 3dline
	xc size - yc size - rot 3dline ;

:drawl | x1 x2 --
	2dup zc size - 3dop zc size + 3dline ;

:box3d
	zc size - drawz zc size + drawz
	xc size - yc size - drawl xc size + yc size - drawl
	xc size + yc size + drawl xc size - yc size + drawl ;

:+mov | size id --
	1 and? ( over )( over neg ) 'xc +!
	2 and? ( over )( over neg ) 'yc +!
	4 and? ( over )( over neg ) 'zc +!
	2drop ;

:-mov | size id --
	1 and? ( over neg )( over ) 'xc +!
	2 and? ( over neg )( over ) 'yc +!
	4 and? ( over neg )( over ) 'zc +!
	2drop ;

:testbox
	size 2/ 'size !
	size %000 +mov box3d size %000 -mov
	size %010 +mov box3d size %010 -mov
	size %011 +mov box3d size %011 -mov
	size 2* 'size ! ;

:treet | nodo --
	@ dup $ff and
	0? ( drop 8 >> ink box3d ; )
|	box3d

	swap 8 >> 2 << inioct + | mask adrchild
	swap					| adr mask
	size 2/ 'size !			|
	0 ( 8 <? )(	swap 		| adr n mask
		$1 and? ( size pick2 +mov rot dup treet 4+ rot rot size pick2 -mov )
		2/ swap 1+ )
	3drop
	size 2* 'size ! ;

:testoc
	inioct >r
	$ff r!+		| n0

    $ff00 r!+	| n1
	$ff0000 r!+
	$ff000000 r!+
	$ffff0000 r!+
	$ff00ff00 r!+
	$ffff00 r!+
	$ccff00 r!+

	$03 r!+     | n2
	$ffcc00 r!+
	$81 r!+

	$ff00ff00 r!+  |n3
	$ff0000 r!+

	rdrop
	;

:drawoc
|	testoc
	0 'xc ! 0 'yc ! 0 'zc !
	$1ff 'size !
	inioct treet
	;
|	inioct $1ff 0 drawoctree ;

|--------------------------------
:printcodes
	vertices 0? ( drop ; ) 0 27 fillmass 3drop

	'octomas >r
	r@+ r@+ r@+ r@+ r@+ r@+ r@+ r@+ rdrop
	"%d %d %d %d %d %d %d %d " print cr

	chome!
	inisor >r
	'octomas @+
	vertices ( 1? )( 1- swap
		1? ( 1- )( drop ink@ $ff00 xor ink swap @+ rot swap )
		swap
		r@+ "%h " print cr allowchome
		4 r+ ) 3drop
	rdrop ;

|---- procesa pc
:procply
	"load 3D point cloud" print cr redraw

	loadply
|	loadobj

    "centra" print cr redraw
	statvert
	xmin xmax + 2/ neg ymin ymax + 2/ neg zmin zmax + 2/ neg movevert | centra
    "normaliza" print cr redraw
	statvert
	normalizovertices
    "normales" print cr redraw
	statvert
|	calcnormales
	"sortmorton" print cr redraw
	ordenapormorton
	"removedups" print cr redraw
	removedups
	"buildoctree" print cr redraw
	;

|---- caja en contenido
:drawboxz | z --
	xmin ymin pick2 3dop
	xmax ymin pick2 3dline
	xmax ymax pick2 3dline
	xmin ymax pick2 3dline
	xmin ymin rot 3dline ;

:drawlinez | x1 x2 --
	2dup zmin 3dop zmax 3dline ;

:draw3dbox
	zmin drawboxz
	zmax drawboxz
	xmin ymin drawlinez
	xmax ymin drawlinez
	xmax ymax drawlinez
	xmin ymax drawlinez
	;

|---- caja en normalizado
:drawboxz | z --
	-$1ff -$1ff pick2 3dop
	$1ff -$1ff pick2 3dline
	$1ff $1ff pick2 3dline
	-$1ff $1ff pick2 3dline
	-$1ff -$1ff rot 3dline ;

:drawlinez | x1 x2 --
	2dup -$1ff 3dop $1ff 3dline ;

:draw3dnorm
	-$1ff drawboxz
	$1ff drawboxz
	-$1ff -$1ff drawlinez
	$1ff -$1ff drawlinez
	$1ff $1ff drawlinez
	-$1ff $1ff drawlinez ;

|--------------------------
:main
	here $ffff + 'inioct !
	here 'iniply !
	here 'iniver !
	4
	show clrscr verde
		dup ":r%d " print
		faces vertices "v:%d f:%d" print cr
|		$1ff xmin "x:%f X:%f" print $1ff -$1ff "y:%f Y:%f" print $1ff -$1ff "z:%f Z:%f" print cr
		$1ff xmin "x:%d X:%d" print $1ff -$1ff "y:%d Y:%d" print $1ff -$1ff "z:%d Z:%d" print cr

|		xmin $1ff + 2/ neg -$1ff $1ff + 2/ neg -$1ff $1ff + 2/ neg "zm:%f ym:%f xm:%f" print cr

		cntdup "unicos:%d" print cr
		azul
|		printcodes
		rojo chome!
		inioct ( octre> <? )( dup inioct - 2 >> "%h." print @+ "%h " print cr allowchome ) drop

		cflecha

		omode
		freelook
		xcam ycam zcam mtrans

|		blanco draw3dbox
|		cyan draw3dnorm
|		azul drawpc
|		verde drawpcn
		verde drawoc

		drawpcdupli


		'procply <f1>
|		'showmor <f2>
		'buildoctree <f2>
|		'savemodel <f3>
		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
