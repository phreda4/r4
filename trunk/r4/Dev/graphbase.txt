| Rutinas Graficas
| PHREDA 2013
|--------------------------
^r4/lib/gui.txt
^r4/lib/btn.txt
^r4/lib/trace.txt

#col1 $ffffff
#col2 0
#col

#FBASE		8

#BPP        4 
#TOLERANCE  24 
#VALUES     $10 
#QFULL      $100 
#MASK       $f

#px #py

|----- mexcla de colores
:pxa | alpha --
	col
:acpx!+ | alpha col --
	dup $ff00ff and				| alpha color colorand
	px@ dup $ff00ff and 		| alpha color colorand inkc inkcand
	pick2 - pick4 * 8 >> rot +	| alpha color inkc inkcandl
	$ff00ff and >r				| alpha color inkc
	swap $ff00 and 				| alpha px colorand
	swap $ff00 and 				| alpha colorand pxa
	over - rot * 8 >> + $ff00 and
	r> or px!+  ;

:gr_mix | a b al -- c (DWORD col,BYTE alpha)
	>r
	dup $ff00ff and
	pick2 $ff00ff and
	over - r * 8 >> + $ff00ff and
    rot rot $ff00 and
	swap $ff00 and
	over - r> * 8 >> + $ff00 and
	or ;

:mixcolor | niv -- color
    1 <? ( col2 nip ; )
    254 >? ( col1 nip ; )
    col1 col2 rot gr_mix ;



#ymax -1

|--------- segmentos
| ymin x delta1x ymax
|-----------------------
#segs )( $3fff
#segs> 'segs
|-----------------------
| Heap Implicit Tree
| Para Y segmento
|-----------------------
#heapseg )( $fff
#heapcnt 0

:]heap | nro -- adrr
	2 << 'heapseg + ;

:heap! | nodo --
	heapcnt dup 1+ 'heapcnt !
	( 1? )(
		dup 1- 2/	| v j i
		dup ]heap @ | v j i vi
		pick3 <? ( 2drop ]heap ! ; )
		rot ]heap !	| v i
		) drop
	'heapseg ! ;

:moveDown | nodo pos --
	( heapcnt 2/ <? )(
		dup 2* 1+ 		| val pos ch1
		dup ]heap @	| val pos ch1 v1
		over 1+         | val pos ch1 v1 ch2
		heapcnt <? (
			]heap @	| val pos ch1 V1 V2
    		>? ( drop 1+ dup ]heap @ ) | val pos chm Vm
			)( drop )
		pick3 				| value pos chM vM va
		>=? ( 2drop ]heap ! ; )		| value pos chM vM
		rot over swap ]heap !	| value chM vM
		drop )
	]heap ! ;

:heap@ | -- nodo
	heapseg heapcnt
	1- ]heap @ 0 MoveDown
	heapcnt 1-
	0? ( -1 'heapseg ! )
	'heapcnt !
	;


|************************************
::OP2
	'py ! 'px ! ;

|************************************
::PLINE2 | x y --
	py =? ( drop 'px ! ; )
	px py pick2 >? ( 2swap 2dup )( 2over ) | x2 y2 x1 y1
	'py ! 'px !
	sh BPP << >=? ( 4drop ; ) rot 0 <=? ( 4drop ; ) | x2 x1 y1 y2
	ymax >? ( dup 'ymax ! )		| comprueba el mayor
	>r >r FBASE << swap FBASE << 	| x1 x2
	over - r> r over -				| x1 (x2-x1) y1 (y2-y1)
	rot swap / swap					| x1 t y1
	-? ( neg over * rot + swap 0 )	| x1 t y1
	dup 16 << segs> 'segs - 4 >> or heap! | ubica en heap
	segs> !+ rot pick2 2/ + swap !+ !+
	r> swap !+ 'segs> !
	;

| pos(12) | len(11) | cover(9) |
:getpos 20 >> $fff and ;
:getlen 9 >> $7ff and ;
:getval $1ff and ;
:setpos 20 << ;
:setlen 9 << ;

|----- version array
#runlenscan )( 4096

#suma
:dumprl
	0 'suma !
	'runlenscan
	( @+ 1? )(
		dup getpos "%d " print
		dup getlen dup 'suma +! "%d " print
		getval "%d " print cr
		) 2drop
	suma "----%d----" print cr ;

:clearscan
	0 sw 1+ setlen 'runlenscan !+ ! ;

:searchscan | valor adr -- valor adr'
	( @+ 1? )(
		getpos pick2 >? ( drop 8 - ; )
		drop ) drop
	8 - ;

:inserta1 | adr --
	>r r@+
	( r @ 1? )( swap r!+ )
	swap r!+ r> ! ;

:inserta2 | adr --
	>r r@+ dup | j k
	( r @ 1? )(	rot r!+ )
	rot r!+ swap r!+ r> ! ;

:add.1 | val pos rl -- rl
	dup >r
	@ dup getlen	| val pos v len
	1 =? ( drop nip + r!+ r> ; )
	drop swap over getpos | val v pos posv
	=? ( r inserta1
		drop swap 	| v val
		over $fff001ff and + $200 or r!+
		$100000 + $200 - r ! r> ; )
	r 4+ @ getpos 1- | val v pos posf
	=? ( r inserta1 | val v pos
		over $200 - r!+
		setpos $200 or swap getval rot + or r!+ r> ; )
	r inserta2 | val v pos
	over $fff001ff and over pick3 getpos - setlen or r!+
	rot | v pos val
	pick2 getval + $200 or over setpos or r!+
	1+ | v pos+1
	r @ dup getpos swap getlen +
	over - setlen swap setpos or
	swap getval or r ! r> ;


:add.len | pos len rl -- rl
	>r
	1 =? ( drop VALUES swap r> add.1 ; )
	r @ getlen
	over >? (	| pos len lenv
		r inserta1
		pick2 setpos pick2 setlen or r @ getval VALUES + or r!+
		over - setlen rot rot + setpos or r @ getval or
		r ! r> ; )
	over <? ( 	| pos len lenv
		r @ VALUES + r!+
		rot over + rot rot -
		r> add.len ; )
	3drop r @ VALUES + r!+
	r> ;

:coverpixels | xb xa adr -- adr
	>r
    over BPP >> 0 <? ( 3drop r> ; )
	over BPP >> sw >=? ( 4drop r> ; )
	r> searchscan >r
	| xb xa x1 x0
	over =? ( nip rot MASK and rot MASK and -
			1? ( swap r> add.1 ; )
			2drop r> ; )
	| xb xa x1 x0
	0 >=? ( rot MASK and VALUES swap -
			over r> add.1 >r
			1+ sw >=? ( 3drop r> ; )
		)( drop nip 0 rdrop 'runlenscan >r )
	| xb x1 x0
	swap sw >? ( sw pick2 - )( dup pick2 - ) | xb x0 x1 largo
	0 >? ( rot swap r> add.len >r )( drop nip ) | xb x1
	sw <? ( swap MASK and
			1? ( swap r> add.1 ; )
			)
	2drop r> ;

|-----------------------
#activos )( 1024
#activos> 'activos

:dumpact
	rojo "*" print
	'activos ( activos> <? )(
		@+ 4+ @ FBASE >> BPP >> "%d " allowchome print
		) drop cr ;


|------------------------------------------------

:dumpoli
	0 'segs ( segs> <? )(
		swap dup "%d) " print 1+ swap
		@+ "ymin %d " print
		@+ "x %d " print
		@+ "deltax %d " print
		@+ "ymax %d " print cr
		) 2drop
|	heapcnt ( 1? )( 1-
|		heap@ dup 16 >> swap $ffff and "%d %d-" print
|		) drop
	cr
	;


|------------------- llenadores
:solidofill
	( 1? )( 1- col px!+ ) drop ;
:solidoalpha
	swap ( 1? )( 1- over not pxa ) 2drop ;

:runlencover
	'runlenscan
	( @+ 1? )(
		dup getlen swap getval
		QFULL =? ( drop solidofill )( 1? ( solidoalpha )( drop px+! ) )
		) 2drop
	-1 px+!
	;


:fillcover
	'runlenscan >r
	rojo
	'activos ( activos> 4 - <? )(
		@+ 4+ @ FBASE >> swap @+ 4+ @ FBASE >> rot
		r> coverpixels >r
		) drop
	rdrop ;


|-----------------------------
:-activos	| --
	'activos 'activos> ! ;

:activosort | v x t1 --
	( 'activos >? )( 4 -		| v x t1
		dup @ 				| v x t1 n1
		dup 4+ @			|  v x t1 n1 nx
		pick3 <? ( 2drop nip 4+ ! ; ) drop
		| v x t1 v1
		over 4+ ! )
	nip ! ;

:activos!+ | v --	; agrega ordenado
	dup 4+ @ 	| v x
	activos> 	| v x t1
	dup 4+ 'activos> !
	activosort ;

:activosresort | nodo seg -- nodo	; incrementa y ordena
	dup 4+ @+ swap @ +	| nodo seg newx
	dup pick2 4+ !		| nodo seg newx
	pick2				| nodo seg newx nodo
	activosort ;

:advanceline
	'activos ( activos> <? )(
		dup @ activosresort 4+ ) drop ;

:deletecopy | nodoa --
	dup 4+ 	| en desde
	( activos> <? )(
		@+ dup 12 + @	| en desde seg yfin
		pick4 >? ( drop rot !+ swap )( 2drop )
		) drop
	'activos> ! ;

:deleteline
	'activos ( activos> <? )(
		dup @ 12 + @ pick2 =? ( drop deletecopy ; ) drop
		4+ ) drop ;

|-----------------------
:endpoli
	'segs 'segs> ! -1 'ymax ! 0 'heapcnt ! ;

:newpoli
|	dumpoli

	ymax -? ( drop endpoli ; ) sh BPP << >? ( sh BPP << 'ymax ! ) drop
	-activos
	heapseg 16 >> dup | newy ymin
	0 over BPP >> setxy
	( ymax <? )(

        clearscan

		VALUES ( 1? )( 1- >r

    	( over =? )( nip	| agrega nuevos ordenados
			heap@ $ffff and 4 << 'segs + activos!+
           	heapseg 16 >> swap )

|	testact |		dumpact
		fillcover

        1+
		|  heapdel =? ( ( heapdel@ drop heapdel <>? ) deleteline )
		deleteline
		advanceline

		r> ) drop
		runlencover

		) 2drop
	endpoli	;

:op3
	BPP << swap BPP << swap op2 ;
:pline3
	BPP << swap BPP << swap pline2 ;

:poligon
	xc w - yc h - op3
	xc w + yc h - pline3
	xc w + yc h +  pline3
	xc w - yc h + pline3
	xc w - yc h - pline3
	newpoli
	;

:testpoli
		50 50 op3
		xymouse pline3
		xymouse swap pline3
		300 70 pline3
		$ff $ff pline3
|		rand $fff and rand $fff and pline3
		50 50 pline3
		newpoli

		cyan
|		50 50 op xymouse line
|		xymouse swap line
|		300 90 line 50 50 line

		verde
|		xymouse pos
|		20 20 dim poligon
	;

:main
	33
	clearscan
	show clrscr
		verde
		dup "%d " print cr
		xymouse "%d %d " print cr
		"--------------------" print cr

		$ff00 'col !
		testpoli

		'exit >esc<
		;

: main ;

