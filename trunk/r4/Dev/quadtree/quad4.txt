| quadtree color
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/polygr.txt

^r4/lib/fontj.txt

^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt

#res 512
#imagen

:drawimagen
	imagen >r
	res ( 1? )( 1-
		res ( 1? )( 1-
			r@+ px!+
			) drop
		sw res - px+!
		) drop
	rdrop
	;

:copyimg
	imagen >r
	res ( 1? )( 1-
		res ( 1? )( 1-
			px@ r!+ 1 px+!
			) drop
		sw res - px+!
		) drop
	rdrop
	;


|*****************************************************
#xx #yy #size

:box2d
	xx size - yy size - 2dup op
	over yy size + line
	xx size + yy size + line
	xx size + over line
	line ;

:+mov | id --
	1 and? ( size )( size neg ) 'xx +!
	2 and? ( size )( size neg ) 'yy +!
	drop ;

:drawtree | nro shift --
	size 2/ 'size !
	2dup >> $3 and | nro shift val
	+mov
	box2d
	0? ( 2drop ; )
	2 - drawtree ;

:drawanumber | nro --
	128 dup 'xx ! 'yy !
	res 2/ 'size !
	14 drawtree ; | 16 bits -2 =14 para correr la primera vez


|---------- quadtree
#andc
#orc

:+pnt

:wait
|	orc andc puntos> puntos - 2 >> trace 3drop
	redraw
	0 0 setxy drawimagen
	;

:check | -- cod
	$ffffff 'andc !
	0 'orc !
	xx yy setxy
	size ( 1? )( 1-
		size ( 1? )( 1-
			px@ dup dup
			orc or 'orc !
			andc and 'andc !
			not px!+
			) drop
		sw size - px+!
		) drop
	wait
	orc andc -
	;

:check2 | res x y -- cod
	$ffffff 'andc ! 0 'orc !
	setxy
	dup ( 1? )( 1-
		over ( 1? )( 1-
			px@ dup
			orc or 'orc !
			andc and 'andc !

			1 px+!
|			not px!+

			) drop
		sw pick2 - px+!
		) drop
	drop

|	redraw
|	0 0 setxy drawimagen

	orc andc - ;


:makecuadtree
	size 0? ( ; )
	2/ 'size !
	check 1? ( drop makecuadtree )( drop +pnt )
 	size 1+ 'xx +!
	check 1? ( drop makecuadtree )( drop +pnt )
	size 1+ neg 'xx +!
	size 1+ 'yy +!
	check 1? ( drop makecuadtree )( drop +pnt )
	size 1+ 'xx +!
	check 1? ( drop makecuadtree )( drop +pnt )
	size 1+ neg 'xx +!
	size 1+ neg 'yy +!
	size 2* 1+ 'size !
	;


|------------ construye 4tree
#4tre
#4tre>

#arr4 )( $fffff | array de nodos
#arr4> 'arr4
#arr4< 'arr4

#index4 | indice actual

#octomas 0 0 0 0 0 0 0 0

|---------- arreglo circular
:cntoc | -- cnt
	arr4< arr4> - ;

:pushoc | shift ini fin --
	arr4> 'arr4> 12 - >=? ( 'arr4 nip )
	!+ !+ !+ 'arr4> !
	1 'index4 +! ;

:getoc | -- fin ini ahift
	arr4< 'arr4> 12 - >=? ( 'arr4 nip )
	>r r@+ r@+ r@+ r> 'arr4< ! ;

|--------------------------
:,quad | val --
	4tre> !+ '4tre> ! ;


:chekquad | res x y -- res x y bitmaps
|	trace
	pick2 2/ pick2 pick2
	check2 1? ( 1 )( 0 ) >r drop
	pick2 2/ pick2 over + pick2
	check2 1? ( 2 )( 0 ) r+ drop
	pick2 2/ pick2 pick2 pick2 +
	check2 1? ( 4 )( 0 ) r+ drop
	pick2 2/ pick2 over + pick2 pick2 +
	check2 1? ( 8 )( 0 ) r+ drop
	r>
	;

:pushquad | res x y bitmap --
	1 and? ( pick3 2/ pick3 pick3 swap rot pushoc )
	2 and? ( pick3 2/ pick3 over + pick3 swap rot pushoc )
	4 and? ( pick3 2/ pick3 pick3 pick2 + swap rot pushoc )
	8 and? ( pick3 2/ pick3 over + pick3 pick2 + swap rot pushoc )
	4drop
	;

:buildnext
	getoc				| res x y
	pick2 0? ( 3drop $ff00 ,quad ; ) drop
	chekquad
	dup
	index4
	|4tre> 4tre - 2 >> -
	8 << | relativo
	or
	,quad
	pushquad
	;

:build4tree | --
	0 0 setxy 
	drawimagen

	here '4tre !
	4tre '4tre> !	| mem de nodos
	0 'index4 !
	'arr4  dup 'arr4> ! 'arr4< !	| array de nodos
	0 0 res pushoc
	( cntoc 1? )( drop
		buildnext
		) drop
	4tre> 'here !
	;

:printoc
	chome! blanco
	4tre> 4tre - 2 >> " :%d: " print cr
	4tre ( 4tre> <? )(
		@+ "%h  " print cr allowchome ) drop
	;


|-------------build hashtree
|
#htree
#htree>

:buildhtree
	here 'htree !

	;
|---------- imprime
:4box2d
	xx yy 2dup op
	over over size + line
	over size + over size + line
	over size + over line
	line ;

:drawrec | pointer --
	@
	 4box2d
	dup $f and 0? ( 2drop ; ) |4box2d ; ) |xx yy 2dup op size + swap size + swap line ; )
	swap 8 >> 2 << 4tre + swap
|	trace
	size 2/ 'size !
	1 and? ( over drawrec swap 4+ swap  )
	2 and? ( size 'xx +! over drawrec swap 4+ swap size neg 'xx +! )
	4 and? ( size 'yy +! over drawrec swap 4+ swap  size neg 'yy +! )
	8 and? ( size dup 'xx +! 'yy +! over drawrec swap 4+ swap  size neg dup 'xx +! 'yy +! )
	2drop
	size 2* 'size !
	;

:draw4tree
	rojo
	512 'size !
	0 0 'yy ! 'xx !
	4tre drawrec ;

|-------------------
:drawpoint
	size 2 <? ( 2drop xx yy 2dup op line ; ) drop
	@
	dup $f and 0? ( 2drop ; ) |xx yy 2dup op line ; ) |4box2d ; ) |xx yy 2dup op size + swap size + swap line ; )
	swap 8 >> 2 << 4tre + swap
	size 2/ 'size !
	1 and? ( swap dup drawpoint 4+ swap )
	2 and? ( size 'xx +! swap dup drawpoint 4+ swap size neg 'xx +! )
	4 and? ( size 'yy +! swap dup drawpoint 4+ swap size neg 'yy +! )
	8 and? ( size dup 'xx +! 'yy +! swap dup drawpoint 4+ swap size neg dup 'xx +! 'yy +! )
	2drop
	size 2* 'size !
	;

:draw4point
	verde
	512 'size !
	300 100 'yy ! 'xx !
	4tre drawpoint
	;

|---- test quadtree
:show4tree
|	1 's !
	show clrscr
		draw4tree
		draw4point
		'exit >esc<
	;

|************************************
#imagen2
#imagen3
#imagen4
#imagen5
#imagen6
#imagen7
#imagen8
#imagen9

:drawimg2
	imagen2 >r
	res 2/ ( 1? )( 1-
		res 2/ ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 2/ - px+!
		) drop
	rdrop ;

:drawimg3
	imagen3 >r
	res 2 >> ( 1? )( 1-
		res 2 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 2 >> - px+!
		) drop
	rdrop ;

:drawimg4
	imagen4 >r
	res 3 >> ( 1? )( 1-
		res 3 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 3 >> - px+!
		) drop
	rdrop ;

:drawimg5
	imagen5 >r
	res 4 >> ( 1? )( 1-
		res 4 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 4 >> - px+!
		) drop
	rdrop ;

:drawimg6
	imagen6 >r
	res 5 >> ( 1? )( 1-
		res 5 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 5 >> - px+!
		) drop
	rdrop ;

:drawimg7
	imagen7 >r
	res 6 >> ( 1? )( 1-
		res 6 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 6 >> - px+!
		) drop
	rdrop ;

:drawimg8
	imagen8 >r
	res 7 >> ( 1? )( 1-
		res 7 >> ( 1? )( 1-
			r@+ px!+
			) drop
		sw res 7 >> - px+!
		) drop
	rdrop ;

|---------- promedio de colores
:average | c1 c2 -- ca
	over $ff00ff and
	over $ff00ff and + 2/ $ff00ff and
	rot $ff00 and
	rot $ff00 and + 2/ $ff00 and
	or ;

:buildimg2
	imagen3 >r
	imagen2
	res 2 >> ( 1? )( 1-
		res 2 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 2/ 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 2/ 2 << + swap
		) 2drop
	rdrop
	;

:buildimg3
	imagen4 >r
	imagen3
	res 3 >> ( 1? )( 1-
		res 3 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 2 >> 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 2 >> 2 << + swap
		) 2drop
	rdrop
	;

:buildimg4
	imagen5 >r
	imagen4
	res 4 >> ( 1? )( 1-
		res 4 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 3 >> 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 3 >> 2 << + swap
		) 2drop
	rdrop
	;

:buildimg5
	imagen6 >r
	imagen5
	res 5 >> ( 1? )( 1-
		res 5 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 4 >> 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 4 >> 2 << + swap
		) 2drop
	rdrop
	;

:buildimg6
	imagen7 >r
	imagen6
	res 6 >> ( 1? )( 1-
		res 6 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 5 >> 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 5 >> 2 << + swap
		) 2drop
	rdrop
	;

:buildimg7
	imagen8 >r
	imagen7
	res 7 >> ( 1? )( 1-
		res 7 >> ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 6 >> 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 6 >> 2 << + swap
		) 2drop
	rdrop
	;

:buildimg
	imagen2 >r
	imagen
	res 2/ ( 1? )( 1-
		res 2/ ( 1? )( 1-
			pick2 @+ swap @+
			rot average
			swap res 2 - 2 << +
			@+ swap @ average
			average
			r!+
			rot 8 + rot rot
			) drop
		swap res 2 << + swap
		) 2drop
	rdrop
	buildimg2
	buildimg3
	buildimg4
	buildimg5
	buildimg6
|	buildimg7
	;

|-----------------
:main
	mark
	here
	dup 'imagen !
	res dup * 2 << +
	dup 'imagen2 !
	res 2/ dup * 2 << +
	dup 'imagen3 !
	res 2 >> dup * 2 << +
	dup 'imagen4 !
	res 3 >> dup * 2 << +
	dup 'imagen5 !
	res 4 >> dup * 2 << +
	dup 'imagen6 !
	res 5 >> dup * 2 << +
	dup 'imagen7 !
	'here !

	clrscr
	cyan
	300 300 230 fcircleg
	rojo
	255 255 100 fcircleg
	azul
	100 190 70 fcircleg
	verde
	10 10 op 130 110 line 80 180 line 10 10 line

	copyimg
	33
	show clrscr
|--- dibuja imagen
		0 0 setxy drawimagen
		res 0 setxy drawimg2
		res res 2/ setxy drawimg3
		res res 2/ res 2 >> + setxy drawimg4
		res res 2/ res 2 >> + res 3 >> + setxy drawimg5
		res res 2/ res 2 >> + res 3 >> + res 4 >> + setxy drawimg6
		res res 2/ res 2 >> + res 3 >> + res 4 >> + res 5 >> + setxy drawimg7

|		printoc
		'buildimg <f1>
		'exit >esc<
		cminiflecha ;

: main ;