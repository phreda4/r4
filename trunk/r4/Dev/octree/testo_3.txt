| prueba de quadtree
| PHREDA 2014
|---------------------
^r4/lib/gui.txt
^r4/lib/morton.txt
^r4/lib/trace.txt

^r4/dev/octree/qbuffer.txt

|#xcam 0 #ycam 0 #zcam 4096
#xcam 000 #ycam 4000 #zcam 8192

#octre
#pixels
#octre>

#dmask
#xc #yc

|---------------------------------
| vectores para rotar puntos
#level
#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

#rotconv )( 96 | 8 dir*3 dim*4 bytes

:fillrotvec | --
	0 0 2048 transform 'zsz ! 'zsy ! 'zsx !
	0 2048 0 transform 'ysz ! 'ysy ! 'ysx !
	2048 0 0 transform 'xsz ! 'xsy ! 'xsx !
	'rotconv >r
	xsx ysx zsx + + neg r!+	xsy ysy zsy + + neg r!+ xsz ysz zsz + + neg r!+	| 111
	xsx ysx zsx + - r!+	xsy ysy zsy + - r!+ xsz ysz zsz + - r!+	| 110
	ysx zsx xsx + - r!+	ysy zsy xsy + - r!+ ysz zsz xsz + - r!+	| 101
	xsx ysx zsx - + r!+	xsy ysy zsy - + r!+ xsz ysz zsz - + r!+	| 100
	zsx ysx xsx + - r!+ zsy ysy xsy + - r!+ zsz ysz xsz + - r!+ | 011
	xsx zsx ysx - + r!+ xsy zsy ysy - + r!+ xsz zsz ysz - + r!+ | 010
	ysx zsx xsx - + r!+ ysy zsy xsy - + r!+ ysz zsz xsz - + r!+	| 001
	xsx ysx zsx + + r!+	xsy ysy zsy + + r!+ xsz ysz zsz + + r!+	| 000
	rdrop ;

:idmovn | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ level >> + rot r@+ level >> + rot r> @ level >> + ;

:idmov | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ + rot r@+ + rot r> @ + ;

|------------------------------
:load3do | "" --
	here 'octre !
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !
	octre> 'here ! ;

|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4+ ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( 2drop )( 2drop 1+ )
	nip ;

:drawpoint	| x y z nodo
	>r swap over c9 >r c9 xc + r> yc + setxy
	r> octre - pixels + @ px!+ ;

:viewchildm | x y z node bit nro -- x y z node bit
	$7 xor	| de atras para adelante
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>
	| ;; recursion !!

|	level 7 >? ( drop drawpoint ; ) drop
	pixels >? ( drawpoint ; )

:viewom | x y z node --

	1 'level +!
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask

	dmask $7 and viewchildm
	dmask 4 >> $7 and viewchildm
	dmask 8 >> $7 and viewchildm
	dmask 12 >> $7 and viewchildm
	dmask 16 >> $7 and viewchildm
	dmask 20 >> $7 and viewchildm
	dmask 24 >> $7 and viewchildm
	dmask 28 >> $7 and viewchildm

	nip 4drop
	-1 'level +! ;

|**** calculo orden v0 ******************************
:prevx
	pick4 xcam - +? ( 1 )( 0 ) nip
	pick4 ycam - +? ( drop 2 or )( drop )
	pick3 zcam - +? ( drop 4 or )( drop )

	>r
	r viewchildm
	r 1 xor viewchildm
	r 2 xor viewchildm
	r 4 xor viewchildm
	r 3 xor viewchildm
	r 5 xor viewchildm
	r 6 xor viewchildm
	r> 7 xor viewchildm
;
|**** calculo orden v0 *****************************

:cmorton9 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $20000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $1000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $800 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $400 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton8 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $8000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $1000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $800 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $400 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton7 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $2000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $1000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $800 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $400 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton6 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $800 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $400 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton5 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton4 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton3 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton2 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

:cmorton1 | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) drop
	pick2 <=? ( $1 r+ ) 4drop r> ;

#cmorton cmorton9 cmorton8 cmorton7 cmorton6 cmorton5 cmorton4 cmorton3 cmorton2 cmorton1
#mquad cmorton1

|-------------------------------
| d x y m
|-------------------------------

#puntos )( 8192
#pntnow> 'puntos
#pntlas> 'puntos

|-----------
:pnt+! | x y z --
	pntlas> >r
	rot r!+ swap r!+ r!+ 0 r!+
	r> 'pntlas> ! ;

:pntini | x y z --
	'puntos dup 'pntlas> ! 'pntnow> !
	'rotconv >r
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	3drop rdrop ;

:mortonn | adr -- morton
	@+ swap @+ swap @ mquad exec ;

|--------------- v2
:pntquad | quad -- quad acc
	dup 24 >> 1- 2 << 'cmorton + @ 'mquad !
	pntnow> dup mortonn | q adr mor
	swap 	 			| q mor adr
	( 16 + pntlas> <? )(
		dup mortonn		| q mor adr mor1
		pick2 <>? ( 3drop 0 ; )
		drop ) drop
	1+ ; | 1+ para que 0 sea no igual

|---------- DUMP
:dumpline
	>r r@+ r@+ r@+ r@+ "y:%d x:%d d:%d m:%h " print cr r> ;

:dumpoct
	pntnow> ( pntlas> <? )( dumpline ) drop ;

:dumpprev
	pntnow> 128 - 'puntos <? ( drop ; )
	( pntnow> <? )( dumpline ) drop ;

:boxd | adr --
	>r
	r 12 + @ invmorton2d yc + swap xc + swap atxy
	r@+ r@+ r@+ "%d %d %d" print
	rdrop ;

:dump8pnt
	pntnow> ( pntlas> <? )( dup boxd 16 + ) drop ;

:linevec
	pntlas> 4 - @ invmorton2d yc + swap xc + swap op
	pntnow>	( pntlas> <? )( dup @ invmorton2d yc + swap xc + swap line 16 + ) drop ;

:dumppnts
	|'puntos
	pntnow>
	( pntlas> <? )(
		@+ "x:%d " ,print
		@+ "y:%d " ,print
		@+ "z:%d " ,print ,cr
		4+ ) drop ;

|-----------
:pushchild | i --
	4 << pntnow> +	| Gi
	pntlas> dup >r pntnow>	| Gi last Gj
	over 'pntnow> !
	( over <? )( pick2 | Gi last Gj Gi
		@+ rot @+ rot + 2/ r!+ |swap
		@+ rot @+ rot + 2/ r!+ |swap
		@+ rot @+ rot + 2/ r!+
		nip 4+ 4 r+ ) 3drop
	r> 'pntlas> ! ;

:popchild
	-128 dup 'pntlas> +! 'pntnow> +! ;

|********* DUMP ***********
:showshot
	show clrscr
		pick2 pick2 pick2
		"act:%h quad:%h oct:%d " print cr
		pntlas> 'puntos - 16 / "%d vertices total " print cr
		pntnow> 'puntos - 16 / "%d vertices ante " print cr
		pntlas> pntnow> - 16 / "%d vertices " print cr

		cr dumpprev
		cr dumpoct

		'exit >esc<
		cminiflecha ;

|------------------------------------------------------------
| m3dto2d - recursivo
|
| si es hoja de quadtree, pintar el punto del color del octree
| si es hoja del octree, pintar el quadtree del color del octree
|
| si los 8 vertices estan en un cuadrante..dividir quadtree
| sino dividir el octree y otravez
|-------------------------------------------------------------

:setxymorton | morton --
	256 >r
	2 9 pick2 24 >> - 1- 2* << | mask	| 9 es quadsize
	xc yc rot 		| morton x y mask
	( 1? )( | morton x y mask
		pick3 and? ( rot r + rot rot ) 2/
		pick3 and? ( swap r + swap ) 2/
		r> 2/ >r )
	rdrop
	drop rot drop
	setxy ;

:fillpoint | oct qua --
|	setq1buffer |QQQQ
	setxymorton
	octre - pixels + @  | getcolor
|	drop $ff
	px!+ ;

:fillquad | oct qua noct bit 'oct quad -- oct qua noct bit
	swap octre - pixels + @ swap | col qua
	1 over 24 >>
	8 >? ( 4drop ; ) | cuadrante muy grande para pintar
	<<				| col qua size
	swap
|	setqbuffer	| QQQ col size qua
	setxymorton 	| col size
	dup ( 1? )( 1-
		over ( 1? )( 1-
			pick3 px!+
			) drop
		sw pick2 - px+!
		) 3drop ;

:fillquad2 | 'oct quad --
	dup 24 >> 8 >? ( 3drop ; ) drop
|	2drop ;
	fillpoint ;
:a
	|----------------------------------------------------
	| problema:
	| falta dividir por quadrante y llenar cada cuadrante
	| ya que un cubo puede estar en varios cuadrantes
	|-----------------------------------------------------
|	( pntquad 1? )( 1- 				| oct qua mort
|		swap $1000000 - $ff000000 and or
|		$ff000000 nand? ( fillpoint ; )	| si es punto..pinta
|		) drop
	fillquad ;

|********************
:dumpstack
	pick4 pick4 pick4 pick4 pick4 " %h %h %h %h %h " ,print ;

|********************

:m3dto2d-child | oct qua noct bit child mask -- oct qua noct bit
 	swap pushchild
	1- over and popcnt 2 << pick2 +	| oct qua noct bit 'oct
	pixels >=? ( pick3 fillquad2 popchild ; )			| ....si es ultimo llena quad
	pick3 								| qua oct noct bit |oct' qua'
:m3dto2d | oct qua --
	( pntquad 1? )( 1- 				| oct qua mort
		swap $1000000 - $ff000000 and or
		$ff000000 nand? ( fillpoint popchild ; )	| si es punto..pinta
		) drop

	over @ dup 						| oct qua nodo nodo
	8 >> 2 << octre + swap $ff and 	| oct qua noct bit

	dmask $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 4 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 8 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 12 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 16 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 20 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 24 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )
|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 28 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child )( 2drop )

	4drop
	popchild
	;

:octquad | oct x y z --
	quaini
	pntini $9000000	| level(8)-morton(24) | $9 24 << xc 12 << yc  or or | view
	m3dto2d ;

|-------------- orden segun vista
#maskc
$4152637	$15043726	$26370415	$37261504	$40516273	$51407362	$62734051	$73625140
$4216537	$15307426	$26034715	$37152604	$40625173	$51743062	$62470351	$73516240
$1234567	$10352476	$23016745	$32107654	$45670123	$54761032	$67452301	$76543210
$1452367	$10534276	$23670145	$32716054	$45016723	$54107632	$67234501	$76325410
$2461357	$13570246	$20634175	$31725064	$46052713	$57134602	$64207531	$75316420
$2134657	$13025746	$20316475	$31207564	$46570213	$57461302	$64725031	$75643120

|-------
:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	maskabs r> or
	2 << 'maskc + @ 'dmask !
	;


|-------------
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;

#vv 9
|-------------
:main
	"media/3do/luigio.3do" load3do

	sh 2/ 256 - 'yc !
|	sw 2/ 256 -
	0 'xc !
	33
	show clrscr
		verde
|		dup "%d " print cr
		pick2 pick2 pick2 "%d %d %d" print cr

		omode
		freelook

|		msec 3 << mrotxi
|		msec 4 << mrotyi

		fillrotvec
		calcmask

|		0 'level ! 	xcam ycam zcam octre viewom

|		octre xcam ycam zcam testquad

		octre xcam ycam zcam octquad

|		vv 512 yc drawlev

		[ -0.025 'zcam +! ; ] <up>
		[ 0.025 'zcam +! ; ] <dn>
		[ -0.025 'xcam +! ; ] <le>
		[ 0.025 'xcam +! ; ] <ri>
		[ -0.025 'ycam +! ; ] <pgup>
		[ 0.025 'ycam +! ; ] <pgdn>

		[ 1 'vv +! ; ] <enter>
		[ -1 'vv +! ; ] <spc>
		'exit >esc<
		cminiflecha
		;

: mark main ;

