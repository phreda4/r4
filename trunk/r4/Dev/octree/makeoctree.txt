| desde morton3d de 10bits por dim
| metodo de abajo hacia arriba
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/fontj.txt
^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt


#sidevox 1024
#DEEPVOX 10 | profundidad-1

#memvox		| inicio de puntos ordenados
#memvox>
#vertices	| cantidad de puntos

#octre
#octre>

|---- archivo a grabar
#$octree
#$pixels
#$end

#bith	| bitmask hijos
#padre	| de que padre
#levels )( 1024	| niveles del octree
#level>

#xcam 0 #ycam 0 #zcam 2048
#xmin #ymin #zmin #xmax #ymax #zmax

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:drawpcf | '3do --
	memvox
	( memvox> <? )(
		@+ swap @+ ink swap
		invmorton3d drawp
		) drop ;

:3dop project3d op ;
:3dline project3d line ;

|------------ construye octree

:p1x2 | x -- v
	$3ff and
	dup 16 << xor $ff0000ff and
	dup 8 << xor  $0300f00f and
	dup 4 << xor  $030c30c3 and
	dup 2 << xor  $09249249 and ;

:morton3d | x y z -- Z
	p1x2 2* swap p1x2 or 2* swap p1x2 or ;

:clearvox
	memvox 'memvox> ! ;

:vox-cnt-mem | -- cnt mem
	memvox memvox> over - 3 >> 1+ swap ;

:vox! | c x y z --
	morton3d memvox> !+ !+ 'memvox> ! ;

:vox@ | x y z -- c
	morton3d vox-cnt-mem binsearch
	0? ( -1 nip ; ) 4+ @ ;

:sortvox
	vox-cnt-mem shellsort ;

:dumpvox
	memvox ( memvox> <? )(
		@+ "%h " print @+ "%h" print cr
		) drop ;

|----- hacer octree

:,oc | val --
	octre> !+ 'octre> ! ;

#colores 0 0 0 0 0 0 0 0
#colores>

#sumr #sumg #sumb
:promediocol | -- rgb
	0 'sumr ! 0 'sumg ! 0 'sumb !
	'colores ( colores> <? )(
		@+
		dup $ff and 16 << 'sumb +!
		dup $ff00 and 8 << 'sumg +!
		$ff0000 and 'sumr +!
		) drop
	colores> 'colores - 2 >>
	sumr over / $ff0000 and
	sumg pick2 / 8 >> $ff00 and or
	sumb rot / 16 >> $ff and or
	;

:nodecolor+ | node -- node+ color
	memvox> <? ( @+ ; ) @+ 8 >> ;

:oct2!+
	padre ,oc
	promediocol 8 << bith or ,oc ;

:level!+
	octre> level> !+ 'level> ! ;

:ininode | nodo -- nodo+			| inicio de nivel
	@+ dup 3 >> 'padre !
	$7 and place 'bith !
	nodecolor+ 'colores !+ 'colores> ! ;

:nextnode | nodo -- nodo+
	@+
	dup 3 >> padre =? ( drop $7 and place bith or 'bith ! nodecolor+ colores> !+ 'colores> ! ; )
	oct2!+
	'padre ! $7 and place 'bith !
	nodecolor+ 'colores !+ 'colores> !
	;

:collectnode | end start --
	level!+
	ininode
	( over <? )( nextnode ) 2drop
	oct2!+
	level!+ ;

:,levelnode |  hasta desde --
	( over <? )(
		4+ @+ $ff and ,oc
		) 2drop ;

:calcdir | suma adr --- suma adr+
	dup @	 		| suma adr valor
	dup popcnt >r
	pick2 8 << or swap !+
	swap r> + swap
	;

:,levelcolor |  hasta desde --
	( over <? )(
		4+ @+ 8 >> ,oc
		) 2drop ;

:buildoctree | --
	memvox> dup 'octre ! 'octre> !
	'levels 'level> !
	|--- calcula hijos
	memvox> memvox collectnode
	'levels DEEPVOX 1-
	( 1? )( 1- swap
		@+ swap @+ rot collectnode
		swap ) 2drop

	|--- graba octree real
    octre> '$octree !
	level> ( 'levels >? )( 8 -
		dup 4+ @ over @
		,levelnode
		 ) drop
	1 $octree ( octre> <? )( calcdir ) 2drop
    octre> '$pixels !
	level> ( 'levels >? )( 8 -
		dup 4+ @ over @
		,levelcolor
		 ) drop
	memvox ( memvox> <? )(
		4+ @+ ,oc ) drop
	$pixels $octree - ,oc
	octre> '$end !
	;


|--------------------------------

:showoc
	show clrscr
		verde
		buildoctree
		'exit >esc< ;

|-----------------------------
:optoctree
	;


:repetidos | elimina repetidos
	sortvox
	memvox >r
	r@+ 4 r+ memvox 8 +
	( memvox> <? )(	| prevval nextdir
		@+			| prevval nextdir+ nextval
		pick2 =? ( drop 4+ )(
			rot drop	| nextdir+ nextval
			dup r!+ swap
			@+ r!+ )
		) drop
	r> 'memvox> !

	memvox> memvox - 3 >> 'vertices !
	;

|------------- load import
:load3dm | "filename" --
	memvox swap
	load 'memvox> !
| escala
	memvox> memvox - 3 >> 'vertices !

| escala----de 1024 a 256
|	memvox ( memvox> <? )( dup @ 6 >> swap !+ 4+ ) drop

	repetidos
	;

:testmodel
	sidevox ( 1? )( 1-
		$ff 0 0 pick3 vox!
		$ff00 0 pick2 0 vox!
		$ff0000 over 0 0 vox!
		) drop
	$ffffff 0 0 0 vox!
	repetidos
	;


:randvox
|	1000 ( 1? )( 1-
|		$ff rand $ff and rand $ff and rand $ff and vox!
|		) drop
	$ff00 0 0 0 vox!
	$ff00 0 0 1 vox!
	$ff 1 0 0 vox!
	$ff 1 0 1 vox!
	$ff0000 0 1 0 vox!
	$ff0000 0 1 1 vox!
	repetidos
	;

:memory
	mark
	here dup 'memvox ! 'memvox> !
	;

:savetxt
	$end 'here !
	mark
	$octree ( $end <? )(
		dup $octree - 2 >>  "%h." ,print
		@+ "%h " ,print ,cr ) drop

	"octree.txt" savemem
	empty ;

:dumpoc
	'levels ( level> <? )(
	@+ swap @+ rot - 3 >>
	"%h " print
	8 - @+ swap @+ rot
	( over <? )( 4+ @+ "%h " allowcr print ) 2drop
		cr allowchome ) drop
	cr
	$octree ( $end <? )(
		@+ "%h " allowcr print ) drop
	;

:saveoctree
	$octree $end over - "media/3do/cesna.3do" save
	;

|--------------------------
:main
|	"media/3dm/test.3dm"
|	"media/3dm/castle.3dm"
|	"media/3dm/armadillo.3dm"
|	"media/3dm/bunny.3dm"
|	"media/3dm/xyzrgb_statuette.3dm"
|	"media/3dm/dragon.3dm"
|	"media/3dm/sib-edb7.3dm"
|	"media/3dm/mario.3dm"
|	"media/3dm/luigi.3dm"
	"media/3dm/cesna.3dm"
	load3dm

|testmodel

	4
	show clrscr verde
		dup ":r%d F1-BUILD" print cr
		vertices "Puntos: %d " print
		vertices 3 << "mem:%d " print
		cr
		octre> octre - 3 >> "Octree: %d " print
		octre> octre - 1 >> vertices 2 << + "mem:%d " print
		cr
		$end $octree - 2 >> "ROctree: %d " print
		$end $octree - "mem:%d " print
		cr

|		dumpoc

		omode
		freelook
		xcam ycam zcam mtrans

		drawpcf

		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		[ buildoctree ; ] <f1>
		[ saveoctree ; ] <f2>
|		[ buildoctree savetxt ; ] <f3>

		'exit >esc< ;

: memory main ;
