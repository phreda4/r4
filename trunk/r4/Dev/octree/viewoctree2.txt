| genera vista de octree
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/fontj.txt
^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt

#xcam 0 #ycam 0 #zcam 3.0

#xmin #ymin #zmin #xmax #ymax #zmax

#lod 8


#octre
#pixels
#octre>

#mask

#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

|---------------------------
| tabla de vectores de sumas
#addvec )( 576 | 16 niveles
#addv 'addvec

:addv+ 36 'addv +! ;
:addv- -36 'addv +! ;

:nextl | adr -- adr'
	xsx dup 2/ 'xsx ! swap !+ xsy dup 2/ 'xsy ! swap !+ xsz dup 2/ 'xsz ! swap !+
	ysx dup 2/ 'ysx ! swap !+ ysy dup 2/ 'ysy ! swap !+ ysz dup 2/ 'ysz ! swap !+
	zsx dup 2/ 'zsx ! swap !+ zsy dup 2/ 'zsy ! swap !+ zsz dup 2/ 'zsz ! swap !+
	;

:filladdvect
	'addvec dup 'addv !
	10 ( 1? )( 1- swap nextl swap ) 2drop ;


|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;


:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:3dop project3d op ;
:3dline project3d line ;


:idmov | x y z id -- x y z
	1 and? ( >r xsz + rot xsx + rot xsy + rot r> )( >r xsz - rot xsx - rot xsy - rot r> )
	2 and? ( >r ysz + rot ysx + rot ysy + rot r> )( >r ysz - rot ysx - rot ysy - rot r> )
	4 and? ( >r zsz + rot zsx + rot zsy + rot r> )( >r zsz - rot zsx - rot zsy - rot r> )
	drop ;

:viewbox | x y z
	pick2 pick2 pick2 0 idmov project op
	pick2 pick2 pick2 1 idmov project line
	pick2 pick2 pick2 3 idmov project line
	pick2 pick2 pick2 2 idmov project line
	pick2 pick2 pick2 0 idmov project line
	pick2 pick2 pick2 4 idmov project op
	pick2 pick2 pick2 5 idmov project line
	pick2 pick2 pick2 7 idmov project line
	pick2 pick2 pick2 6 idmov project line
	pick2 pick2 pick2 4 idmov project line
	pick2 pick2 pick2 1 idmov project op
	pick2 pick2 pick2 5 idmov project line
	pick2 pick2 pick2 4 idmov project op
	pick2 pick2 pick2 0 idmov project line
	pick2 pick2 pick2 3 idmov project op
	pick2 pick2 pick2 7 idmov project line
	pick2 pick2 pick2 6 idmov project op
	pick2 pick2 pick2 2 idmov project line
	3drop
	;


:idmovn | x y z id -- x' y' z'
	1 and? ( >r addv >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv >r rot r@+ - rot r@+ - rot r> @ - r> )
	2 and? ( >r addv 12 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 12 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	4 and? ( >r addv 24 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 24 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	drop ;

#nro

:box2t | x y z nro -- x y z
	>r pick2 pick2 pick2 r> idmovn
	project atxy
	nro "%d" print
	1 'nro +!
	;

:box2e
	>r pick2 pick2 pick2 r> idmovn
	addv+

	mask
	>r

	amarillo
	r box2t
	verde
	r 1 xor box2t r 2 xor box2t r 4 xor box2t
	cyan
	r 3 xor box2t r 5 xor box2t r 6 xor box2t
	azul
	r> 7 xor box2t

	3drop
	addv-
	;

:viewoot | x y z --
	0 'nro !
	addv+

	mask
	>r

	amarillo
	r box2e
	verde
	r 1 xor box2t r 2 xor box2t r 4 xor box2t
	cyan
	r 3 xor box2t r 5 xor box2t r 6 xor box2t
	azul
	r> 7 xor box2t
	addv-
	;

:viewoctreeot
	viewoot 3drop ;

|---------------------------------
:pset | x y color
	rot -? ( 3drop ; ) sw >? ( 3drop ; )
	rot -? ( 3drop ; ) sh >? ( 3drop ; )
	setxy px!+ ;

|---------------------------------- version 1
:getchild | node bit nro -- node bit nro node'/0
	dup place 					| node bit nro child?
	pick2 nand? ( drop 0 ; )
	1- pick2 and popcnt 2 << pick3 + ;

:viewoo | x y z node --

	pixels 128000 - >? ( octre - pixels + @ >r project r> pset ; )
|	pixels >=? ( octre - pixels + @ >r project r> pset ; )
|	size lod <? ( drop octre - pixels + @ >r project r> pset ; ) drop

|	addv 'addvec 287 + >? ( drop octre - pixels + @ >r project r> pset ; ) 	drop

	addv+
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask
	mask getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 1 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 2 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 4 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 3 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 5 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 6 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	mask 7 xor getchild 1? ( >r >r pick4 pick4 pick4 r> idmovn r> viewoo )( 2drop )
	nip 4drop
	addv- ;
|---------------------------------- version 1

:viewchild | x y z node bit nro -- x y z node bit
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>
	|****** recursion (no poner ; !!)
:viewon | x y z node --

|	pixels 128000 - >? ( octre - pixels + @ >r project r> pset ; )
|	pixels >=? ( octre - pixels + @ >r project r> pset ; )
|	size lod <? ( drop octre - pixels + @ >r project r> pset ; ) drop

	addv 'addvec 287 + >? ( drop octre - pixels + @ >r project r> pset ; ) 	drop

	addv+
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask
	mask viewchild
	mask 1 xor viewchild
	mask 2 xor viewchild
	mask 4 xor viewchild
	mask 3 xor viewchild
	mask 5 xor viewchild
	mask 6 xor viewchild
	mask 7 xor viewchild
	nip 4drop
	addv- ;

:viewoctreeo | x y z --
	octre viewon ;


|--------------------------
:main
	here 'octre !
	"media/3do/mario.3do"
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !

	4
	show clrscr verde
		dup ":r%d " print cr
		lod "LOD:%d " print cr
		mask "mask:%h" print cr

		omode
		freelook
|		xcam ycam zcam mtrans


		msec 3 << mrotxi
		msec 4 << mrotyi
		0 0 0.5 transform 'zsz ! 'zsy ! 'zsx !
		0 0.5 0 transform 'ysz ! 'ysy ! 'ysx !
		0.5 0 0 transform 'xsz ! 'xsy ! 'xsx !


		matinv
		0 0 3.0 transform
		+? ( 4 )( 0 ) nip
		swap +? ( drop 2 or )( drop )
		swap +? ( drop 1 or )( drop )
		'mask !

		0 0 2.0 viewbox
	    filladdvect

|		0 0 3.0 viewoctreeot
		0 0 2.0 viewoctreeo

		[ lod 2* 'lod ! ; ] <le>
		[ lod 2/ 'lod ! ; ] <ri>
		[ -0.1 'zcam +! ; ] <up>
		[ 0.1 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
