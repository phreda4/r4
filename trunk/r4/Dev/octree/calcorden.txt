| calcula orden de octree
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/morton.txt
^r4/lib/sort.txt

^r4/lib/trace.txt

#xcam 0 #ycam 0 #zcam 3.0

#mask

#dmask
#dmask1
#dmask2
#dmask3
#dmask4
#dmask5
#dmask6
#dmask7
#dmask8

#dmaskn

|-------------- orden segun vista
#maskc )( 2048
#maskc1 )( 2048
#maskc2 )( 2048
#maskc3 )( 2048
#maskc4 )( 2048
#maskc5 )( 2048
#maskc6 )( 2048
#maskc7 )( 2048
#maskc8 )( 2048

#maskcn )( 2048

#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

|---------------------------
| tabla de vectores de sumas
#addvec )( 576 | 16 niveles
#addv 'addvec

:addv+ 36 'addv +! ;
:addv- -36 'addv +! ;

:nextl | adr -- adr'
	xsx dup 2/ 'xsx ! swap !+ xsy dup 2/ 'xsy ! swap !+ xsz dup 2/ 'xsz ! swap !+
	ysx dup 2/ 'ysx ! swap !+ ysy dup 2/ 'ysy ! swap !+ ysz dup 2/ 'ysz ! swap !+
	zsx dup 2/ 'zsx ! swap !+ zsy dup 2/ 'zsy ! swap !+ zsz dup 2/ 'zsz ! swap !+
	;

:filladdvect
	'addvec dup 'addv !
	10 ( 1? )( 1- swap nextl swap ) 2drop ;


|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;


:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:3dop project3d op ;
:3dline project3d line ;

:idmov | x y z id -- x y z
	1 and? ( >r xsz + rot xsx + rot xsy + rot r> )( >r xsz - rot xsx - rot xsy - rot r> )
	2 and? ( >r ysz + rot ysx + rot ysy + rot r> )( >r ysz - rot ysx - rot ysy - rot r> )
	4 and? ( >r zsz + rot zsx + rot zsy + rot r> )( >r zsz - rot zsx - rot zsy - rot r> )
	drop ;

:viewbox | x y z
	pick2 pick2 pick2 0 idmov project op
	pick2 pick2 pick2 1 idmov project line
	pick2 pick2 pick2 3 idmov project line
	pick2 pick2 pick2 2 idmov project line
	pick2 pick2 pick2 0 idmov project line
	pick2 pick2 pick2 4 idmov project op
	pick2 pick2 pick2 5 idmov project line
	pick2 pick2 pick2 7 idmov project line
	pick2 pick2 pick2 6 idmov project line
	pick2 pick2 pick2 4 idmov project line
	pick2 pick2 pick2 1 idmov project op
	pick2 pick2 pick2 5 idmov project line
	pick2 pick2 pick2 4 idmov project op
	pick2 pick2 pick2 0 idmov project line
	pick2 pick2 pick2 3 idmov project op
	pick2 pick2 pick2 7 idmov project line
	pick2 pick2 pick2 6 idmov project op
	pick2 pick2 pick2 2 idmov project line
	3drop
	;

|-----------------------------------------

:idmovn | x y z id -- x' y' z'
	1 and? ( >r addv >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv >r rot r@+ - rot r@+ - rot r> @ - r> )
	2 and? ( >r addv 12 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 12 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	4 and? ( >r addv 24 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 24 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	drop ;

|----------- test cube
#nro

:box2t | x y z nro -- x y z
	>r pick2 pick2 pick2 r> idmovn
	project atxy
	nro "%d" print
	1 'nro +!
	;

:box2e
	>r pick2 pick2 pick2 r> idmovn
	addv+
	mask >r
	amarillo
	r box2t
	verde r 1 xor box2t r 2 xor box2t r 4 xor box2t
	cyan  r 3 xor box2t r 5 xor box2t r 6 xor box2t
	azul  r> 7 xor box2t
	3drop
	addv- ;

:viewoot | x y z --
	0 'nro !
	addv+
	mask >r
	amarillo
	r box2t
	verde r 1 xor box2t r 2 xor box2t r 4 xor box2t
	cyan  r 3 xor box2t r 5 xor box2t r 6 xor box2t
	azul  r> 7 xor box2t
	addv- ;

|-----
#listpoint )( 64
#listpoint>

:boxo
	>r pick2 pick2 pick2 r idmovn
	dup >r
	project atxy
	r> r> 2dup listpoint> !+ !+ 'listpoint> !
	"%d(%d)" print
	;

:viewooo
	addv+
	0 boxo 1 boxo 2 boxo 3 boxo
	4 boxo 5 boxo 6 boxo 7 boxo
	addv- ;

:viewoctreeot
	'listpoint 'listpoint> !
	viewooo 3drop ;



|-------------------------
:libre
	@+ swap @ =? ( drop 1 ; ) drop 0 ;

:libre1 dmask1 libre ;
:libre2 dmask2 libre ;
:libre3 dmask3 libre ;
:libre4 dmask4 libre ;
:libre5 dmask5 libre ;
:libre6 dmask6 libre ;
:libre7 dmask7 libre ;
:libre8 dmask8 libre ;

:igual
	>r 'listpoint 8 ( 1? )( 1- swap
		@+ r@+ <>? ( 3drop rdrop 0 ; ) drop 4+ swap )
	2drop rdrop
	1 ;

:igual1 dmask1 igual ;
:igual2 dmask2 igual ;
:igual3 dmask3 igual ;
:igual4 dmask4 igual ;
:igual5 dmask5 igual ;
:igual6 dmask6 igual ;
:igual7 dmask7 igual ;
:igual8 dmask8 igual ;

:copia
	>r 'listpoint 8 ( 1? )( 1- swap
		@+ r!+ 4+ swap ) 2drop
	rdrop ;

:copia1	dmask1 copia ;
:copia2	dmask2 copia ;
:copia3	dmask3 copia ;
:copia4	dmask4 copia ;
:copia5	dmask5 copia ;
:copia6	dmask6 copia ;
:copia7	dmask7 copia ;
:copia8	dmask8 copia ;

:sortlist
	9 'listpoint shellsort2
	'listpoint 7 ( 1? )( 1- swap
		@+ over @ =? ( 3drop ; ) drop
		swap ) 2drop

	libre1 1? ( drop copia1 0 dmaskn ! ; ) drop
	igual1 1? ( drop 1 dmaskn +! ; ) drop
	libre2 1? ( drop copia2 0 dmaskn 4+ ! ; ) drop
	igual2 1? ( drop 1 dmaskn 4+ +! ; ) drop
	libre3 1? ( drop copia3 0 dmaskn 8 + ! ; ) drop
	igual3 1? ( drop 1 dmaskn 8 + +! ; ) drop
	libre4 1? ( drop copia4 0 dmaskn 12 + ! ; ) drop
	igual4 1? ( drop 1 dmaskn 12 + +! ; ) drop
	libre5 1? ( drop copia5 0 dmaskn 16 + ! ; ) drop
	igual5 1? ( drop 1 dmaskn 16 + +! ; ) drop
	libre6 1? ( drop copia6 0 dmaskn 20  + ! ; ) drop
	igual6 1? ( drop 1 dmaskn 20 + +! ; ) drop
	libre7 1? ( drop copia7 0 dmaskn 24 + ! ; ) drop
	igual7 1? ( drop 1 dmaskn 24 + +! ; ) drop
	libre8 1? ( drop copia8 0 dmaskn 28  + ! ; ) drop
	igual8 1? ( drop 1 dmaskn 28 + +! ; ) drop

|	trace
	;

:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	| ax ay az :r mask0
	maskabs r> or
	dup 'mask !
	dup 5 << 'maskc + 'dmask !
	dup 5 << 'maskc1 + 'dmask1 !
	dup 5 << 'maskc2 + 'dmask2 !
	dup 5 << 'maskc3 + 'dmask3 !
	dup 5 << 'maskc4 + 'dmask4 !
	dup 5 << 'maskc5 + 'dmask5 !
	dup 5 << 'maskc6 + 'dmask6 !
	dup 5 << 'maskc7 + 'dmask7 !
	dup 5 << 'maskc8 + 'dmask8 !

	5 << 'maskcn + 'dmaskn !

	0 0 1.0 transform
	rot abs rot abs rot abs
	pick2 =? ( 3drop ; )
	over =? ( 3drop ; )
	drop =? ( drop ; ) drop

	sortlist
	;



:copiade
	pick2 5 <<
	dup rot +
	swap 'maskc +
	>r
	8 ( 1? )( 1-
		swap @+ r!+ swap ) 2drop
	rdrop
	;

:copiade1 'maskc1 copiade ;
:copiade2 'maskc2 copiade ;
:copiade3 'maskc3 copiade ;
:copiade4 'maskc4 copiade ;
:copiade5 'maskc5 copiade ;
:copiade6 'maskc6 copiade ;
:copiade7 'maskc7 copiade ;
:copiade8 'maskc8 copiade ;

:comprueba
	'listpoint >r
	@+ 'copiade1 r!+ neg r!+
	@+ 'copiade2 r!+ neg r!+
	@+ 'copiade3 r!+ neg r!+
	@+ 'copiade4 r!+ neg r!+
	@+ 'copiade5 r!+ neg r!+
	@+ 'copiade6 r!+ neg r!+
	@+ 'copiade7 r!+ neg r!+
	@+ 'copiade8 r!+ neg r!+
	9 'listpoint shellsort2
	'listpoint @ exec
	rdrop ;

:printsave | adr -- adr'
	8 ( 1? )( 1-
		swap @+ "%d " ,print swap ) drop ;

:printsave2 | adr -- adr'
	0 >r
	0 ( 8 <? )(
		swap @+
		pick2 2 << << r+
		swap 1+ ) drop
	r> "$%h " ,print ;

:savelist
	'maskcn 0 ( 48 <? )( swap
		comprueba
		swap 1+ ) 2drop

	mark
	'maskc 0 ( 48 <? )(
		swap printsave swap ,cr 1+ ) 2drop
	"orden.txt" savemem
	empty

	mark
	'maskc 0 ( 48 <? )( swap
		printsave2
		swap ,cr 1+ ) 2drop

	"orden2.txt" savemem

	empty
	show 'exit >esc< ;

:printmask | adr -- adr'
	8 ( 1? )( 1-
		swap @+ "%d " print swap ) drop ;

#posx

|--------------------------
:main
	4
	show clrscr verde
		dup ":r%d " print cr
		mask "mask:%h" print cr
|		dmask "dmask:%h" print cr

|		'maskc 0 ( 48 <? )( dup "%h." print
|			swap printmask swap cr 1+ ) 2drop

		'maskcn 0 ( 48 <? )( dup "%h." print
			swap
			@+ "%d " print @+ "%d " print
			@+ "%d " print @+ "%d " print
			@+ "%d " print @+ "%d " print
			@+ "%d " print @+ "%d " print
			swap cr 1+ ) 2drop

		omode
		freelook
|		xcam ycam zcam mtrans

		msec 3 << mrotxi
		msec 4 << mrotyi
		msec 5 << mrotzi
		0 0 0.5 transform 'zsz ! 'zsy ! 'zsx !
		0 0.5 0 transform 'ysz ! 'ysy ! 'ysx !
		0.5 0 0 transform 'xsz ! 'xsy ! 'xsx !

		calcmask

		xcam ycam zcam viewbox
	    filladdvect
		cyan
		xcam ycam zcam viewoctreeot

		[ -0.2 'xcam +! ; ] <le>
		[ 0.2 'xcam +! ; ] <ri>
		[ -0.1 'zcam +! ; ] <up>
		[ 0.1 'zcam +! ; ] <dn>

		'savelist <f1>

		'exit >esc< ;

: mark main ;
