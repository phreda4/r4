| genera vista de octree
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/fontj.txt
^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt

#xcam 0 #ycam 0 #zcam 2048

#xmin #ymin #zmin #xmax #ymax #zmax

#octre
#octre>

|----------- graficacion
#rx
#ry
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;


:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:3dop project3d op ;
:3dline project3d line ;

|-------- dibujo octree
#xc #yc #zc
#size

:drawz | z --
	xc size - yc size - pick2 3dop
	xc size + yc size - pick2 3dline
	xc size + yc size + pick2 3dline
	xc size - yc size + pick2 3dline
	xc size - yc size - rot 3dline ;

:drawl | x1 x2 --
	2dup zc size - 3dop zc size + 3dline ;

:box3d
	zc size - drawz zc size + drawz
	xc size - yc size - drawl xc size + yc size - drawl
	xc size + yc size + drawl xc size - yc size + drawl
	;

|**** TODO  dibujar cubo sin lineas de atras

#cubon3
|$0462 [-1, 0, 0
|$1375 [+1, 0, 0
|$0154 [0, -1, 0
|$2673 [0, +1, 0
|$0231 [0, 0, -1
|$4576 [0, 0, +1

#cubo3d

0.0 0.0 0.0 $ff0000
0.0 0.0 1.0 $7f0000
0.0 1.0 0.0 $ff
0.0 1.0 1.0 $ff
1.0 0.0 0.0 $ff
1.0 0.0 1.0 $ff
1.0 1.0 0.0 $ff
1.0 1.0 1.0 $ff

:box3dhidenn
	zc size - drawz zc size + drawz
|	xc size - yc size - drawl xc size + yc size - drawl
|	xc size + yc size + drawl xc size - yc size + drawl
	;

|-------------- muestra oc de 1 punto
:+movx
	1 and? ( size )( size neg ) 'xc +!
	2 and? ( size )( size neg ) 'yc +!
	4 and? ( size )( size neg ) 'zc +!
	drop ;

:drawtree | nro shift --
	size 2/ 'size !
	2dup >> $7 and | nro shift val
	+movx box3d
	3 - 0? ( 2drop ; )
	drawtree ;

:showpoint | adr --
	0? ( drop ; ) @
	0 'xc ! 0 'yc ! 0 'zc !
	$1ff 'size ! box3d
	27 drawtree ;

|---------------------

:-mov | size id --
	1 and? ( over )( over neg ) 'xc +!
	2 and? ( over )( over neg ) 'yc +!
	4 and? ( over )( over neg ) 'zc +!
	2drop ;

:+mov | size id --
	1 and? ( over neg )( over ) 'xc +!
	2 and? ( over neg )( over ) 'yc +!
	4 and? ( over neg )( over ) 'zc +!
	2drop ;

:testbox
	size 2/ 'size !
	size %000 +mov box3d size %000 -mov
	size %010 +mov box3d size %010 -mov
	size %011 +mov box3d size %011 -mov
	size 2* 'size ! ;


|--- view full octree
#lod 128

:viewo | adr --

	size lod <? ( 2drop box3d ; ) drop

	@ $80000000 and? ( drop ; ) | box3d
	size 2/ 'size !
	dup 8 >> 2 << octre +
	swap $ff and		 | adr bitmask
	0 swap				| adr 0 bitmask
	( 1? )(
		1 and? (
			size pick2 +mov
			rot dup viewo 4+ rot rot
			size pick2 -mov )
		2/ swap 1+ swap )
	3drop
	size 2* 1+ 'size ! ;

:viewoctree | --
	$1ff 'size !
	0 'xc ! 0 'yc ! 0 'zc !
	octre viewo ;

|--- view with mask
:-mov | id --
	1 and? ( size )( size neg ) 'xc +!
	2 and? ( size )( size neg ) 'yc +!
	4 and? ( size )( size neg ) 'zc +!
	drop ;

:+mov | id --
	1 and? ( size neg )( size ) 'xc +!
	2 and? ( size neg )( size ) 'yc +!
	4 and? ( size neg )( size ) 'zc +!
	drop ;

#masko $ff | los 8 hijos

:viewom | adr --

	size lod <? ( 2drop box3d ; ) drop

	@ $80000000 and? ( drop ; ) | box3d
	size 2/ 'size !
	dup 8 >> 2 << octre +	| calcula primero
	swap $ff and		 | adr bitmask
	0 swap
	( 1? )(
		1 and? (
			rot 4+ rot rot 	)
		swap 1+ swap 2/ ) drop

|	masko and			| mask of visibility

	0 				| adr bitmask child
	( $100 <? )( over
		masko and and? (
			over +mov

|			rot dup viewom 4+ rot rot

			pick2

			over -mov )
		2/ swap 1+ swap

		swap 2* )
	3drop
	size 2* 1+ 'size ! ;

:viewoctreem | mask --
	'masko !
	$1ff 'size !
	0 'xc ! 0 'yc ! 0 'zc !
	octre viewom ;

|------ solo en direccion z
|    ix := x shr Size;
|    iy := y shr Size;
|    iz := 1;//z shr Size;
|    i  := iz * 4 + iy * 2 + ix;
|    Dec(x, ix shl Size);
|    Dec(y, iy shl Size);
|    Dec(z, iz shl Size);
|    if Node.Child[i] <> nil then
|      Result := RayCast(Node.Child[i], x, y, z, Size - 1)
|    else
|    begin
|      Inc(z, 1 shl Size);
|      Dec(i, 4);
|      if Node.Child[i] <> nil then
|        Result := RayCast(Node.Child[i], x, y, z, Size - 1);
|    end;

:endr | x y z size adr bit -- x y niv
	3drop
	255 swap 2/ -
	dup 8 << over 16 << or or ;

#mask
:raycast | x y z size adr -- x y niv
	dup
	@ $80000000 and? ( endr ; )
	dup 8 >> swap $ff and | x y z size adr 1rfhild bitmask
	mask and
	0? ( endr ; )
	4drop $ff00
	;

:testxy
	2dup xor ;

:viewo
	0 'mask !
	0 ( 512 <? )(
		0 over setxy
		0 ( 512 <? )(

|			511 8 octre rayCast
			testxy
			px!+
			1+ ) drop
		1+ ) drop
	;

:viewo2
	octre ( octre> <? )(
		dup showpoint 4+ ) drop ;

:printoctre
	octre ( octre> <? )(
		@+ "%h  "  allowcr print ) drop
	;

|-----------------------------
:flecha
	blanco
	1000 0 0 3dop 500 0 0 3dline
	550 50 0 3dline 500 0 0 3dline 550 -50 0 3dline ;

|--------------------------
:main
	here 'octre !
	"media/3do/castle.3do"

|	"media/3do/bunny.3do"
|	"media/3do/xyzrgb_statuette.3do"
|	"media/3do/dragon.3do"
	octre swap load 'octre> !

|	octre memmap
	4
	show clrscr verde
		dup ":r%d " print cr
		lod "LOD:%d " print cr
|		octre> octre - "%d bytes" print cr
|		printoctre


		omode
		freelook
		xcam ycam zcam mtrans

|		testbox
|		viewo

		viewoctree

|		testbox

|		rx mrotxi ry mrotyi flecha

		[ lod 2* 'lod ! ; ] <le>
		[ lod 2/ 1+ 'lod ! ; ] <ri>
		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
