| genera vista de octree
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/morton.txt

^r4/lib/trace.txt

#xcam 0 #ycam 0 #zcam 0.05

#xmin #ymin #zmin #xmax #ymax #zmax

#octre
#pixels
#octre>

|----------- graficacion
#rx
#ry
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;


:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:3dop project3d op ;
:3dline project3d line ;

|-------- dibujo octree
#xc #yc #zc
#size

:drawz | z --
	xc size - yc size - pick2 3dop
	xc size + yc size - pick2 3dline
	xc size + yc size + pick2 3dline
	xc size - yc size + pick2 3dline
	xc size - yc size - rot 3dline ;

:drawl | x1 x2 --
	2dup zc size - 3dop zc size + 3dline ;

:box3d
	zc size - drawz zc size + drawz
	xc size - yc size - drawl xc size + yc size - drawl
	xc size + yc size + drawl xc size - yc size + drawl
	;

:box3d2
	xc yc zc project3d
	1 fbox ;

|-------------- muestra oc de 1 punto
:+movx
	1 and? ( size )( size neg ) 'xc +!
	2 and? ( size )( size neg ) 'yc +!
	4 and? ( size )( size neg ) 'zc +!
	drop ;

:drawtree | nro shift --
	size 2/ 'size !
	2dup >> $7 and | nro shift val
	+movx box3d
	3 - 0? ( 2drop ; )
	drawtree ;

:showpoint | adr --
	0? ( drop ; ) @
	0 'xc ! 0 'yc ! 0 'zc !
	$1ff 'size ! box3d
	27 drawtree ;

|---------------------
:-mov | size id --
	1 and? ( over )( over neg ) 'xc +!
	2 and? ( over )( over neg ) 'yc +!
	4 and? ( over )( over neg ) 'zc +!
	2drop ;

:+mov | size id --
	1 and? ( over neg )( over ) 'xc +!
	2 and? ( over neg )( over ) 'yc +!
	4 and? ( over neg )( over ) 'zc +!
	2drop ;

|--- view full octree
#lod 8

:viewo | adr --
|	pixels >=? ( octre - pixels + @ ink box3d2 ; )
	size lod <? ( drop octre - pixels + @ ink box3d2 ; ) drop
	@
	size 2/ 'size !
	dup 8 >> 2 << octre +
	swap $ff and		 | adr bitmask
	0 swap				| adr 0 bitmask
	( 1? )(
		1 and? (
			size pick2 +mov
			rot dup viewo 4+ rot rot
			size pick2 -mov )
		2/ swap 1+ swap )
	3drop
	size 2* 'size ! ;

:viewoctree | --
	$200 'size !
	0 'xc ! 0 'yc ! 0 'zc !
	octre viewo ;

|--------------------------
| ver octree en orden
|   *** mal
#mask
#zzd
#yyd
#xxd

:getmask
	0 0 0 transform >r >r >r
	0.0 0.0 0.01 transform
	rot r> - rot r> - rot r> -
	pick2 pick2 pick2 'zzd ! 'yyd ! 'xxd !

	cyan
	0.0 0.0 0.01 3dop
	0 0 0 3dline
	verde

	+? ( 4 )( 0 ) nip
	swap +? ( drop 2 or )( drop )
	swap +? ( drop 1 or )( drop )
	'mask !
	;


:getchild | node bit nro -- node bit nro node'/0
	dup place 					| node bit nro child?
	pick2 nand? ( drop 0 ; )
	1- pick2 and popcnt 2 << pick3 + ;

:viewoo | node --
|	pixels >=? ( octre - pixels + @ ink box3d2 ; )
	size lod <? ( drop octre - pixels + @ ink box3d2 ; ) drop

	size 2/ 'size !

	@ dup 8 >> 2 << octre +
	swap $ff and		 | adr bitmask
	mask getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 1 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 2 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 4 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 3 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 5 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 6 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	mask 7 xor getchild 1? ( size pick2 +mov viewoo size swap -mov )( 2drop )
	2drop
	size 2* 'size ! ;

:viewoctreeo
	$200 'size !
	0 'xc ! 0 'yc ! 0 'zc !
	getmask
	octre viewoo ;


|--------------------------
:main
	here 'octre !
	"media/3do/mario.3do"
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !

	4
	show clrscr verde
		dup ":r%d " print cr
		lod "LOD:%d " print cr
		mask "mask:%h" print cr
zzd
yyd
xxd "x:%f y:%f z:%f" print cr

		omode
		freelook
		xcam ycam zcam mtrans

|		msec 2 << mrotxi

		viewoctree
|		viewoctreeo

		[ lod 2* 'lod ! ; ] <le>
		[ lod 2/ 'lod ! ; ] <ri>
		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
