| prueba de quadtree
| PHREDA 2014
|---------------------
^r4/lib/gui.txt
^r4/lib/morton.txt


#xcam 0 #ycam 0 #zcam 0.25

#octre
#pixels
#octre>

#dmask

#sizeq 512
#xc #yc
#color

|-------------- orden segun vista
#maskc
$4152637	$15043726	$26370415	$37261504	$40516273	$51407362	$62734051	$73625140
$4216537	$15307426	$26034715	$37152604	$40625173	$51743062	$62470351	$73516240
$1234567	$10352476	$23016745	$32107654	$45670123	$54761032	$67452301	$76543210
$1452367	$10534276	$23670145	$32716054	$45016723	$54107632	$67234501	$76325410
$2461357	$13570246	$20634175	$31725064	$46052713	$57134602	$64207531	$75316420
$2134657	$13025746	$20316475	$31207564	$46570213	$57461302	$64725031	$75643120

|-------
:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	maskabs r> or
	2 << 'maskc + @ 'dmask !
	;


|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4+ ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( 2drop )( 2drop 1+ )
	nip ;

:getxyd | x y z -- X Y
	swap over c9 >r c9 xc + r> yc + ;

|---------------------------------
| vectores para rotar puntos
#level

#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

#rotconv )( 96 | 8 dir*3 dim*4 bytes

:fillrotvec | --
	0 0 2048 transform 'zsz ! 'zsy ! 'zsx !
	0 2048 0 transform 'ysz ! 'ysy ! 'ysx !
	2048 0 0 transform 'xsz ! 'xsy ! 'xsx !

	'rotconv >r
	xsx ysx zsx + + neg r!+	xsy ysy zsy + + neg r!+ xsz ysz zsz + + neg r!+	| 111
	xsx ysx zsx + - r!+	xsy ysy zsy + - r!+ xsz ysz zsz + - r!+	| 110
	ysx zsx xsx + - r!+	ysy zsy xsy + - r!+ ysz zsz xsz + - r!+	| 101
	xsx ysx zsx - + r!+	xsy ysy zsy - + r!+ xsz ysz zsz - + r!+	| 100
	zsx ysx xsx + - r!+ zsy ysy xsy + - r!+ zsz ysz xsz + - r!+ | 011
	xsx zsx ysx - + r!+ xsy zsy ysy - + r!+ xsz zsz ysz - + r!+ | 010
	ysx zsx xsx - + r!+ ysy zsy xsy - + r!+ ysz zsz xsz - + r!+	| 001
	xsx ysx zsx + + r!+	xsy ysy zsy + + r!+ xsz ysz zsz + + r!+	| 000
	rdrop ;

:idmovn | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ level >> + rot r@+ level >> + rot r> @ level >> + ;

:idmov | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ + rot r@+ + rot r> @ + ;

#x1 #y1 #x2 #y2
:calcbox | x y z --
	pick2 pick2 pick2 0 idmovn getxyd 2dup 'y1 ! 'x1 ! 'y2 ! 'x2 !
	8 ( 1? )( 1-
		pick3 pick3 pick3 pick3 idmovn getxyd
		y1 <? ( dup 'y1 ! ) y2 >? ( dup 'y2 ! ) drop
		x1 <? ( dup 'x1 ! ) x2 >? ( dup 'x2 ! ) drop
		) drop
	3drop ;


|-----------------------
|  L R x  U D y 0 0
| -z z c -z z y 0 0
| 8*8*4=256
|-----------------------

#lrud )( 8192
#lrud> 'lrud

#bbox )( 2048
#bbox> 'bbox

|  L R x  U D y 0 0
:getaxy | adr -- x y
	dup 8 + @ swap dup 20 + @ swap 24 + @
	swap over c9 >r c9 xc + r> yc + ;

:callimites
	lrud> 256 -
	dup getaxy dup 'y1 ! 'y2 ! dup 'x2 ! 'x1 !
	32 +
	7 ( 1? )( 1- swap
		dup getaxy
		y1 <? ( dup 'y1 ! ) y2 >? ( dup 'y2 ! ) drop
		x1 <? ( dup 'x1 ! ) x2 >? ( dup 'x2 ! ) drop
		32 + swap ) 2drop
	;

:genpuntos | octree x y z -- octree
	'lrud >r
	8 ( 1? )( 1-
		pick3 pick3 pick3 pick3 idmov rot	| y z x
		over dup neg r!+ r!+ r!+
		dup neg r!+ r!+ r!+
		r 8 - @ dup r!+ r!+
|		0 r!+ 0 r!+
		)
	r> 'lrud> !
	4drop
	'bbox >r
	0 512 2dup r!+ r!+ r!+ r!+
	r> 'bbox> !
	| calcular puntos limites? vx1 vy1 vx2 vy2

|	callimites
	;

:pushchild | i --
	$7 xor
	5 << lrud> dup >r
	dup 256 - rot over + swap | last Gi G0
	( pick2 <? )( over | last Gi Gn Gi
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap

		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap

		@+ rot @+ rot + 2/ r!+
|		8 + 8 r+
		nip ) 3drop
	r> 'lrud> !
	bbox> dup >r dup 16 -
	( over <? )( @+ r!+ ) 2drop
	r> 'bbox> !
	;

:popchild
	-256 'lrud> +! -16 'bbox> +! ;

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;

:viewbox | x y z
	pick2 pick2 pick2 0 idmovn getxyd op
	pick2 pick2 pick2 1 idmovn getxyd line
	pick2 pick2 pick2 3 idmovn getxyd line
	pick2 pick2 pick2 2 idmovn getxyd line
	pick2 pick2 pick2 0 idmovn getxyd line
	pick2 pick2 pick2 4 idmovn getxyd op
	pick2 pick2 pick2 5 idmovn getxyd line
	pick2 pick2 pick2 7 idmovn getxyd line
	pick2 pick2 pick2 6 idmovn getxyd line
	pick2 pick2 pick2 4 idmovn getxyd line
	pick2 pick2 pick2 1 idmovn getxyd op
	pick2 pick2 pick2 5 idmovn getxyd line
	pick2 pick2 pick2 4 idmovn getxyd op
	pick2 pick2 pick2 0 idmovn getxyd line
	pick2 pick2 pick2 3 idmovn getxyd op
	pick2 pick2 pick2 7 idmovn getxyd line
	pick2 pick2 pick2 6 idmovn getxyd op
	pick2 pick2 pick2 2 idmovn getxyd line
	3drop
	;

|------------------------------
:load3do | "" --
	here 'octre !
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !
	octre> 'here ! ;


|  L R x  U D y 0 0
:getaxy | adr -- x y
	dup 8 + @ swap dup 20 + @ swap 24 + @
	swap over c9 >r c9 xc + r> yc + ;

:dumpcubenow
	lrud> dup 256 -
	over 32 - getaxy op
	( over <? )(
		dup getaxy line
		32 + )
	2drop ;

|----------------
| x y
#stackoct )( $ffff
#stackoct> 'stackoct

#noderoot
#xr #yr


:pusho |
	stackoct> !+ 'stackoct> ! ;

:popo	| 0 / nodo
	stackoct> 'stackoct =? ( 0 nip ; )
	4 - dup 'stackoct> ! @ ;


:pushch | oct noct bit child -- oct noct bit
	1 over << pick2 nand? ( 2drop ; ) 	| oct noct bit child place
|	swap pushchild						| oct noct bit place
	1- over and popcnt 2 << pick2 +		| oct noct bit 'oct
	pusho
	;

:allch | oct --
	dup @ dup 8 >> 2 << octre + swap $ff and 	|  oct noct bit
	dmask $7 and pushch
	dmask 4 >> $7 and pushch
	dmask 8 >> $7 and pushch
	dmask 12 >> $7 and pushch
	dmask 16 >> $7 and pushch
	dmask 20 >> $7 and pushch
	dmask 24 >> $7 and pushch
	dmask 28 >> $7 and pushch
	3drop ;


:searchbox | y x -- y x octree
	'stackoct noderoot !+ 'stackoct> !
	( popo 1? )(
		pixels >=? ( ; )	| si es ultimo .. color
							| si el tamano es menor al pixel.. color
     	allch
		) drop ;

:searchpoint | x y -- x y nodo/0 sin nodo


	;


:searchbox | y x -- y x color
	2dup 'xr ! 'yr !
|	'lrud 256 + 'lrud> !
|	noderoot sear
	color 1? ( octre - pixels + @ )
	;

:drawboxxx
|	callimites
	x2 y2 x1 y1
	2dup setxy
	( pick2 <=? )( over | x2 y2 x1 yn xn
		( pick4 <=? )(
			searchbox px!+
			1+ )
		pick2 - neg sw + px+!
		1+ ) 4drop ;

:m3dto2dt | --
	azul dumpcubenow callimites x1 y1 x2 y2 caja
	0 pushchild verde dumpcubenow callimites x1 y1 x2 y2 caja
	0 pushchild rojo dumpcubenow callimites x1 y1 x2 y2 caja
|	0 pushchild cyan dumpcubenow callimites x1 y1 x2 y2 caja
	;

:renderm3d2dtest | octree x y z --
	0 'level !
	genpuntos
	'noderoot !
	m3dto2dt ;

|--------------------------------

#rot2d )( 256

:dumpcube
	lrud> 12 - >r
	r@+ r@+ r@+ rdrop
	viewbox ;

:dumpxy
	bbox> 8 - >r
	r@+ r@+ 2 box
	rdrop ;

:pushch | i --
	1 'level +!
	lrud> 12 - >r
	r@+ r@+ r@+ pick3 idmovn

	bbox> >r
	pick2 pick2 pick2 getxyd
	swap r!+ r!+ r> 'bbox> !

	rot r!+ swap r!+ r!+ r> 'lrud> !
	drop
	;

:push2d | i -- x y
	3 << 'rot2d + >r
	bbox> 8 - >r r@+ r@+ rdrop | x y

	swap r@+ 2/ +
	swap r@+ 2/ +
	rdrop
	;

:m3dto2dt2
	azul dumpcube dumpxy
	0 push2d 4 box

	0
	pushch verde dumpcube |dumpxy
	0
	pushch rojo dumpcube |dumpxy
	lrud> 12 - >r r@+ r@+ r@+ rdrop calcbox 
	x1 y1 x2 y2 caja
	;

:dump2
	'rot2d >r
	0 ( 8 <? )( 1+
		r@+ "dx: %d " print
		r@+ "dy: %d " print cr
		) drop rdrop
	;
:renderm3d2dtest2 | octree x y z --
	0 'level !

	'bbox >r
	pick2 pick2 pick2 getxyd
	swap r!+ r!+
	r> 'bbox> !

	'rot2d >r
	0 ( 8 <? )(
		pick3 pick3 pick3 pick3 idmov getxyd

		swap bbox - r!+
		'bbox 4+ @ - r!+
		1+ ) drop
	rdrop

	'lrud >r
	rot r!+ swap r!+ r!+
	r> 'lrud> !

	'noderoot !

    dump2
	m3dto2dt2 ;

:main
	"media/3do/luigio.3do" load3do

	sh 2/ 256 - 'yc !
	sw 2/ 256 - 'xc !
	33
	$0 'color !


	show clrscr
		verde
		dup "%d " print cr

		omode
		freelook
|		msec 3 << mrotxi
|		msec 4 << mrotyi
		fillrotvec
		calcmask

|		octre xcam ycam zcam renderm3d2dtest | octre x y z

		octre xcam ycam zcam renderm3d2dtest2 | octre x y z

		[ -0.025 'zcam +! ; ] <up>
		[ 0.025 'zcam +! ; ] <dn>
		[ -0.025 'xcam +! ; ] <le>
		[ 0.025 'xcam +! ; ] <ri>
		[ -0.025 'ycam +! ; ] <pgup>
		[ 0.025 'ycam +! ; ] <pgdn>

		'exit >esc<
		cminiflecha
		;

: mark main ;

