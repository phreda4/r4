| test traverse oc
| PHREDA 2014
|----------------------

^r4/lib/gui.txt
^r4/lib/trace.txt

#xi 280 #yi 80

#x0 1 #y0 2 #z0 0
#xd 11 #yd 16 #zd 0

#grid )( 1024

:grid! | c x y --
	4 << + 'grid + c! ;

:grid@ | x y -- c
	4 << + 'grid + c@ ;

:drawcell | x y color -- x y
	dup 8 << or dup 8 << or ink
	over 4 << xi +
	over 4 << yi +
	16 dup 2swap vfill
	;

:drawgrid
	0 ( 16 <? )(
		0 ( 16 <? )(
		2dup grid@ 1? ( drawcell )( drop )
		1+ ) drop
	1+ ) drop
	gris
	17 ( 1? )( 1-
		$3 nand? ( blanco )( gris )
		xi over 4 << + yi op
		xi over 4 << + yi 16 4 << + line
		xi yi pick2 4 << + op
		xi 16 4 << + yi pick2 4 << + line
	) drop ;


:randgrid
	20 ( 1? )( 1-
		rand dup 16 >> swap dup 3 >> $f and swap 7 >>  $f and grid!
		) drop ;


:grid1@ | x y --
	$e and swap $e and swap
	4 ( 1? )( 1-
		pick2 over $1 and or
		pick2 pick2 $2 and 2/ or
		grid@ 1? ( nip nip nip ; ) drop
		)
	3drop 0 ;

:grid2@ | x y --
	$c and swap $c and swap
	16 ( 1? )( 1-
		pick2 over $3 and or
		pick2 pick2 $c and 2 >> or
		grid@ 1? ( nip nip nip ; ) drop
		)
	3drop 0 ;

:grid3@ | x y --
	$8 and swap $8 and swap
	64 ( 1? )( 1-
		pick2 over $7 and or
		pick2 pick2 $38 and 3 >> or
		grid@ 1? ( nip nip nip ; ) drop
		)
	3drop 0 ;

:ingrid | x y --
	swap 4 << xi + swap 4 << yi + 16 dup 2swap vfill ;

:ingrid2 | x y --
	swap 4 << xi + swap 4 << yi + 8 dup 2swap vfill ;

|-------------- rutinas
#ex #ey
#cx #cy
#dx #dy
#sx #sy
#dmax

:dda2ini | x y x y --
	0 dup 'ex ! 'ey !
	pick2 - +? ( 1 )( -1 ) 'sy ! abs 'dy !
	pick2 - +? ( 1 )( -1 ) 'sx ! abs 'dx !
	'cy ! 'cx !
	dx dy max 'dmax !
	;

|*********
:dda2step
	cx cy ingrid
	dx 'ex +! dy 'ey +!
	ex 2* dmax >=? ( sx 'cx +! dmax neg 'ex +! ) drop
	ey 2* dmax >=? ( sy 'cy +! dmax neg 'ey +! ) drop
	;

:dda2step
	cx cy ingrid
	dmax
	dx ex + over 2/ >=? ( sx 'cx +! over - ) 'ex !
	dy ey + over 2/ >=? ( sy 'cy +! over - ) 'ey !
	drop
	;

|------- paso octree
| sim 2/ para que no se pase
:dda | dmax sx sy dx dy --
	ey + swap ex +
	pick4 >=? ( pick3 'cx +! pick4 - ) 'ex !
	pick3 >=? ( over 'cy +! pick3 - ) 'ey !
	3drop ;

:micro | dmax sx sy --
	ex ey
	pick4 >=? ( pick2 'cy +! pick4 - 'ey ! )( drop )
	pick3 >=? ( pick2 'cx +! pick3 - 'ex ! )( drop )
	3drop ;

|  micropaso con 2/ porque es el ultimo
:micro2 | --
	dmax
	ex over 2/ >=? ( sx 'cx +! over - 'ex ! )( drop )
	ey over 2/ >=? ( sy 'cy +! over - 'ey ! )( drop )
	drop ;


:adv1
	dmax 3 << sx 3 << sy 3 << dx 3 << dy 3 << dda
	dmax 2 << sx 2 << sy 2 << micro
	dmax 2* sx 2* sy 2* micro
	micro2 ;
:adv2
	dmax 2 << sx 2 << sy 2 << dx 2 << dy 2 << dda
	dmax 2* sx 2* sy 2* micro
	micro2 ;
:adv3
	dmax 2* sx 2* sy 2* dx 2* dy 2* dda
	micro2 ;
:dda2
	dmax
	dx ex + over 2/ >=? ( sx 'cx +! over - ) 'ex !
	dy ey + over 2/ >=? ( sy 'cy +! over - ) 'ey !
	drop ;

:stepoc
	cx cy ingrid
	cx cy grid3@ 0? ( drop adv1 ; ) drop
	cx cy grid2@ 0? ( drop adv2 ; ) drop
	cx cy grid1@ 0? ( drop adv3 ; ) drop
	cx cy grid@ 0? ( drop dda2 ; ) drop
	violeta
	;

|---- bresenham
#paso

:paso1
	cx cy ingrid
	ey +? ( sy 'cy +! dx 2* - )
	dy 2* + 'ey !
	sx 'cx +!
	;

:paso2
	cx cy ingrid
	ex +? ( sx 'cx +! dy 2* - )
	dx 2* + 'ex !
	sy 'cy +!
	;

:stepbres
	dy dx cy cx ey ex "ex:%d ey:%d cx:%d cy:%d dx:%d dy:%d" print cr
	paso exec ;

:ini2bre
	dda2ini
	dx dy >=? ( dy 2* dx - 'ey ! 'paso1 )( dx 2* dy - 'ex ! 'paso2 ) 'paso ! drop ;
|--------------

:paso1a
	cx cy ingrid
	ey
	dy >? ( sy 'cy +! dx 2* - 'ey ! ; )
	dy 2* + 'ey !
	sx 'cx +!
	;

:paso2a
	cx cy ingrid
	ex
	dx >? ( sx 'cx +! dy 2* - 'ex ! ; )
	dx 2* + 'ex !
	sy 'cy +!
	;

| paso que cambia el bit N en cualquier dimencion

#pasom

:pasobb
	ex over >? ( sx + over 2* -
:paso1b | bit
	cx cy ingrid

 	;

:paso2b | bit
	cx cy ingrid
	;

:ini2bre2 | x y xf yf
	pick2 - +? ( 1 )( -1 ) 'sy ! abs 'dy !
	pick2 - +? ( 1 )( -1 ) 'sx ! abs 'dx !
	'cy ! 'cx !
	dx dy >=? ( dy 2* dx - 'ey ! 'paso1b 'paso1a )(
		dx 2* dy - 'ex ! 'paso2b 'paso2a )
	'paso ! 'pasom !
	drop ;
	;

:stepoc2
	3 pasom exec
	;

:shot
	verde
	x0 y0 ingrid
	x0 4 << xi + 8 + y0 4 << yi + 8 + op
	xd 4 << xi + 8 + yd 4 << yi + 8 + line

|	x0 y0 xd yd dda2ini
|	x0 y0 xd yd ini2bre
	x0 y0 xd yd ini2bre2
	azul
	show
|		[ step xa ya ingrid ; ] <f1>
|		[ dda2step ; ] <f1>

		[ stepbres ; ] <f1>
		[ dx 2* 'dx ! sx 2* 'sx ! dy 2* 'dy ! sy 2* 'sy ! dmax 2* 'dmax ! ; ]  <f2>
		[ dx 2/ 'dx ! sx 2/ 'sx ! dy 2/ 'dy ! sy 2/ 'sy ! dmax 2/ 'dmax ! ; ] <f3>

		'stepoc <f4>

		'stepoc2 <f5>
		'exit >esc< ;

:test1
	0 ( 16 <? )(
		0 ( 16 <? )(
			2dup grid1@ 1? ( verde )( azul )
			drop 2dup ingrid2
			2 + ) drop
		2 + ) drop
	show 'exit >esc< ;

:test2
	0 ( 16 <? )(
		0 ( 16 <? )(
			2dup grid2@ 1? ( verde )( azul )
			drop 2dup ingrid2
			4+ ) drop
		4+ ) drop
	show 'exit >esc< ;

:drawstep
	rojo x0 y0 ingrid
	azul xd yd ingrid
	;

:main
|	randgrid
	$ff 8 9 grid!
	$ff 5 9 grid!

	show clrscr
		y0 x0 "xo:%d yo:%d " print cr
		yd xd "xd:%d yd:%d " print cr

        drawgrid

		blink 1? ( drawstep ) drop

		'shot <f1>
		'test1 <f2>
		'test2 <f3>

		[ 1 'xd +! ; ] <ri>
		[ -1 'xd +! ; ] <le>
		[ 1 'yd +! ; ] <dn>
		[ -1 'yd +! ; ] <up>

		'exit >esc<
		cminiflecha ;

: mark main ;

