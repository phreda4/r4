| Editor de mapas
| PHREDA 2015
|-----------------------------
^r4/lib/gui.txt
^r4/lib/btn.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt
^r4/lib/dlg.txt
^r4/lib/dlgfile.txt

^r4/lib/ricons.txt
^inc/ric/fontawesomewebfont.ric

^r4/dev/octree/wirelib.txt
^r4/dev/octree/buildoctree.txt
^r4/dev/octree/iso_9.txt

^r4/lib/trace.txt

#filename )( 1024

|------ vista
#xcam 0 #ycam 0 #zcam 1.6
#rx #ry

|-------- cursor
#curx #cury #curz
#color $0

#memini

#tiles )( 1024
#tiles> 'tiles
#tsize )( 1024
#tsize> 'tsize
#tname )( 1024
#tname> 'tname

#strname )( 8192
#strname> 'strname

:addstr | str -- strname
	strname> strcpyl strname> swap 'strname> ! ;

:tilecnt
	tiles> 'tiles - 2 >> ;

:tile | n -- tile
	2 << 'tiles + @ ;

:tilename | n -- str
	2 << 'tname + @ ;

:tilesize | n -- size
	2 << 'tsize + @ ;

:listiles
	tilecnt
	0 ( over <? )(
		dup tilesize 10 >> over tilename pick2 "%d:%s %dKb" print cr
		1+ ) 2drop ;

:listiles
	tilecnt
	0 ( over <? )(
		color =? ( cyan )( azul )
		[ dup 'color ! ; ] over tilename "%s" mprint link cr
		1+ ) 2drop ;

|---------------------
:setvoxsize | level -- level
	dup 'deepvox !
	1 over << 1- 'qsize !
	;

|---- archivo a grabar
#:$inifile
#$octree
#$lastlev
#$pixels
#$colori
#$realpixels
#$end

#bith	| bitmask hijos
#padre	| de que padre

#levels )( 1024	| niveles del octree
#level>

#xmin #ymin #zmin #xmax #ymax #zmax

|------------ construye octree
:,oc | val --
	octre> !+ 'octre> ! ;

#colores 0 0 0 0 0 0 0 0 0 0
#colores )( $ffff
#colores>

#sumr #sumg #sumb
:promediocol | -- rgb
	0 'sumr ! 0 'sumg ! 0 'sumb !
	'colores ( colores> <? )(
		@+
		dup $ff and 16 << 'sumb +!
		dup $ff00 and 8 << 'sumg +!
		$ff0000 and 'sumr +!
		) drop
	colores> 'colores - 2 >>
	1.0 swap / | optimizacion
	sumr over *. $ff0000 and
	sumg pick2 *. 8 >> $ff00 and or
	sumb rot *. 16 >> $ff and or
	;

:nodecolor+ | node -- node+ color
	memvox> <? ( @+ ; ) @+ 8 >> ;

:oct2!+
	padre ,oc
	promediocol 8 << bith or ,oc ;

:level!+
	octre> level> !+ 'level> ! ;

:ininode | nodo -- nodo+			| inicio de nivel
	@+ dup 3 >> $1fffffff and 'padre !
	$7 and place 'bith !
	nodecolor+ 'colores !+ 'colores> ! ;

:nextnode | nodo -- nodo+
	@+ dup 3 >> $1fffffff and
	padre =? ( drop $7 and place bith or 'bith ! nodecolor+ colores> !+ 'colores> ! ; )
	oct2!+
	'padre ! $7 and place 'bith !
	nodecolor+ 'colores !+ 'colores> ! ;

:collectnode | end start --
	level!+
	ininode ( over <? )( nextnode ) 2drop
	oct2!+
	level!+ ;

:,levelnode |  hasta desde --
	( over <? )(
		4+ @+ $ff and ,oc
		) 2drop ;

:calcdir | suma adr --- suma adr+
	dup @	 		| suma adr valor
	dup popcnt >r
	pick2 8 << or swap !+
	swap r> + swap
	;

:,levelcolor |  hasta desde --
	( over <? )(
		4+ @+ 8 >>
		$ffffff and
|***		$f8fcf8 and | 16 bits
		,oc
		) 2drop ;

|------------ elimina repetidos
:repetidos
	memvox memvox> over - 3 >> 1+ swap
	shellsort

	memvox >r
	r@+ 4 r+ memvox 8 +
	( memvox> <? )(	| prevval nextdir
		@+			| prevval nextdir+ nextval
		pick2 =? ( drop 4+ )(
			rot drop	| nextdir+ nextval
			dup r!+ swap
			@+ r!+ )
		) 2drop
	r> 'memvox> !
	;
|-------------------------------
::buildmaptree | --
	memvox> dup '$inifile !
	memvox =? ( drop ; ) drop	| sin puntos
	repetidos

	memvox>	dup
	'octre ! 'octre> !
	'levels 'level> !
	|--- calcula hijos
	memvox> memvox collectnode

	'levels deepvox 1-
	( 1? )( 1- swap
		@+ swap @+ rot collectnode
		swap ) 2drop

	|--- graba octree real
	octre> '$inifile !
	$3d000100
	deepvox or
	,oc
	0 ,oc | pixels
	0 ,oc | p1
	0 ,oc | p2
	0 ,oc | xlim
	0 ,oc | ylim
	0 ,oc | zlim

    octre> '$octree !
	level> ( 'levels >? )( 8 -
		'levels =? ( octre> '$lastlev ! )
		dup 4+ @ over @
		,levelnode
		 ) drop

	1 $octree ( octre> <? )( calcdir ) 2drop

    octre> '$pixels !
	level> ( 'levels >? )( 8 -
		dup 4+ @ over @
		,levelcolor
		 ) drop

	octre> dup '$realpixels ! '$colori !
	memvox ( memvox> <? )(
		4+ @+	| nro de tile

		,oc ) drop

	|... save header
	$pixels $octree - $inifile 4+ !

	|.... tiles
	0 ( tilecnt <? )(
		dup tile >r
		dup tilesize 2 >> ( 1? )( r@+ ,oc 1- )
		drop rdrop
		1+ ) drop

	octre> dup '$end ! 'here !
	;

|--------------------------------------------------
:buildmaptree
	here dup 'octre ! 'octre> !
	|--- graba octree real
	octre> '$inifile !
	$3d000100 ,oc
	0 ,oc | pixels
	0 ,oc | p1
	0 ,oc | p2
	0 ,oc | xlim
	0 ,oc | ylim
	0 ,oc | zlim
    octre> '$octree !
	$00000035 ,oc
	$00000353 ,oc
	$00000635 ,oc
	$00000953 ,oc
	$00000c35 ,oc
    octre> '$pixels !
	$00ffffff ,oc
	$00ff00ff ,oc
	$00ff007f ,oc
	$00ff03f ,oc
	$00ff01f ,oc
	octre> dup '$realpixels ! '$colori !
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$0000000 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	$00000021 ,oc
	|... save header
	$pixels $octree - $inifile 4+ !

	|.... tiles
	0 tile >r
	0 tilesize 2 >>
	( 1? )( r@+ ,oc 1- )
	drop rdrop

	octre> dup '$end ! 'here !

	;

|----------------
:clearvox
	memvox 'memvox> ! ;

:vox-cnt-mem | -- cnt mem
	memvox memvox> over - 3 >> 1+ swap ;

:vox! | c x y z --
	mortonlut
:mvox! | c m --
	memvox> !+ !+ 'memvox> ! ;

:vox@ | x y z -- c
	mortonlut vox-cnt-mem binsearch
	0? ( -1 nip ; ) 4+ @ ;

:vox- | x y z --
	mortonlut vox-cnt-mem binsearch
	0? ( drop ; ) | adr
	dup 8 +   | dest src
	memvox> over - 3 >> 1+
	move
|	-8 'memvox> +!
	;


|----------------
:savemaptree
	"media/3do" dlgfilesave 0? ( drop ; )
	'filename strcpy
	'filename ".3do" =pos
	0? ( ".3do" pick2 strcat ) drop
	$inifile $end over - rot save ;


|------------- load import
:loadoctree
	"media/3do" dlgfileload 0? ( drop ; )
	dup addstr tname> !+ 'tname> !
	load3do dup tiles> !+ 'tiles> !
	here swap - tsize> !+ 'tsize> !
	;

|------ vista
#xm #ym
:dnlook
	xymouse 'ym ! 'xm ! ;

:movelook
	xymouse
	ym over 'ym ! - 7 << 'rx +!
	xm over 'xm ! - neg 7 << neg 'ry +!  ;

|------- cursor
:drawcursor
	 blink 1? ( blanco )( gris ) drop
	1.0 deepvox >> >r
	1 deepvox 1- <<
	dup curz - r * r 2/ -
	over cury - r * r 2/ -
	pick2 curx - r * r 2/ -
	r> xyzcubo
	drop
	;

:setvox
	tilecnt 0? ( drop ; ) drop
    curx cury curz vox-
	color curx cury curz vox!
	buildmaptree ;

:delvox
	tilecnt 0? ( drop ; ) drop
    curx cury curz vox-
	buildmaptree ;


:changesize
	deepvox 1+
	9 =? ( 4 nip )
	setvoxsize
	'deepvox !
	0 dup 'curx ! dup 'cury ! 'curz !
	;

:botonera
	;

:drawvoxel
; :a
	$inifile dup @ 16 >> $3d00 <>? ( 2drop ; ) drop
	maskb.clear
	drawoctree
	;

:main
	4 setvoxsize drop
	4
	show clrscr

		3dini
		rx mrotx ry mroty
		xcam ycam zcam mtrans

		draw3dgrid
		drawvoxel
		drawcursor

		'dnlook 'movelook guiDnMove

|		modogui exec

		fonti
		verde oscuro 2 linesfill blanco
		dup ":r%d MapEditor " print
		tiles> 'tiles - 2 >> "[ %d tiles ]" print memvox> memvox - 3 >> "[ %d Pnts ]" print cr
		'filename sp print cr
|		tiles> 'tiles - 2 >> "%d tiles" print cr
		listiles

		1 rows 2 - gotoxy azul
		'changesize qsize 1+ dup dup "%dx%dx%d" mprint sp btnt
		'loadoctree dup <f1> "F1-Load" sp btnt
		[ buildmaptree savemaptree ; ] dup <f2> "F2-Save" sp btnt
		azul
		naranja
		'voxelbox "1" sp btnt
		'voxelcuad "2" sp btnt
		'voxelboxc "3" sp btnt

		[ curx 1+ qsize >? ( 0 nip ) 'curx ! ; ] <up>
		[ curx 1- -? ( qsize nip ) 'curx ! ; ] <dn>
		[ cury 1+ qsize >? ( 0 nip ) 'cury ! ; ] <le>
		[ cury 1- -? ( qsize nip ) 'cury ! ; ] <ri>
		[ curz 1+ qsize >? ( 0 nip ) 'curz ! ; ] <pgup>
		[ curz 1- -? ( qsize nip ) 'curz ! ; ] <pgdn>
		'setvox <spc>
		'delvox <del>

		botonera
		'exit >esc<
		cminiflecha ;

|--------------------------
:memory
	mark
	maskb.ini
	here 'memini !

	'tiles 'tiles> !
	'tsize 'tsize> !
	'tname 'tname> !
	'strname 'strname> !
	;

: memory main ;
