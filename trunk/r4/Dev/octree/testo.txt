| prueba de quadtree
| PHREDA 2014
|---------------------
^r4/lib/gui.txt
^r4/lib/morton.txt
^r4/lib/trace.txt

#xcam 0 #ycam 0 #zcam 4.0

#octre
#pixels
#octre>

#dmask

#xc #yc

#color

|-------------- orden segun vista
#maskc
$4152637	$15043726	$26370415	$37261504	$40516273	$51407362	$62734051	$73625140
$4216537	$15307426	$26034715	$37152604	$40625173	$51743062	$62470351	$73516240
$1234567	$10352476	$23016745	$32107654	$45670123	$54761032	$67452301	$76543210
$1452367	$10534276	$23670145	$32716054	$45016723	$54107632	$67234501	$76325410
$2461357	$13570246	$20634175	$31725064	$46052713	$57134602	$64207531	$75316420
$2134657	$13025746	$20316475	$31207564	$46570213	$57461302	$64725031	$75643120

|-------
:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	maskabs r> or
	2 << 'maskc + @ 'dmask !
	;


#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;

:idmov | x y z id -- x y z
	1 and? ( >r xsz + rot xsx + rot xsy + rot r> )( >r xsz - rot xsx - rot xsy - rot r> )
	2 and? ( >r ysz + rot ysx + rot ysy + rot r> )( >r ysz - rot ysx - rot ysy - rot r> )
	4 and? ( >r zsz + rot zsx + rot zsy + rot r> )( >r zsz - rot zsx - rot zsy - rot r> )
	drop ;

|------------------------------
:load3do | "" --
	here 'octre !
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !
	octre> 'here ! ;

|----------- version newmask
| tabla de vectores de sumas

#addvec )( 576 | 16 niveles
#addv 'addvec

:addv+ 36 'addv +! ;
:addv- -36 'addv +! ;

:nextl | adr -- adr'
	xsx dup 2/ 'xsx ! swap !+ xsy dup 2/ 'xsy ! swap !+ xsz dup 2/ 'xsz ! swap !+
	ysx dup 2/ 'ysx ! swap !+ ysy dup 2/ 'ysy ! swap !+ ysz dup 2/ 'ysz ! swap !+
	zsx dup 2/ 'zsx ! swap !+ zsy dup 2/ 'zsy ! swap !+ zsz dup 2/ 'zsz ! swap !+
	;

:filladdvect
	'addvec dup 'addv !
	10 ( 1? )( 1- swap nextl swap ) 2drop ;

|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ )
	nip nip nip ;

:drawpoint	| x y z nodo
	>r swap over c9 >r c9 xc + r> yc + setxy
	r> octre - pixels + @ px!+ ;

:idmovn | x y z id -- x' y' z'
	1 and? ( >r addv >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv >r rot r@+ - rot r@+ - rot r> @ - r> )
	2 and? ( >r addv 12 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 12 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	4 and? ( >r addv 24 + >r rot r@+ + rot r@+ + rot r> @ + r> )( >r addv 24 + >r rot r@+ - rot r@+ - rot r> @ - r> )
	drop ;

:viewchildm | x y z node bit nro -- x y z node bit
	$7 xor	| de atras para adelante
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>
	|****** recursion (no poner ; !!)

:viewom | x y z node --

	addv 'addvec 287 + >? ( drop drawpoint ; ) 	drop

	addv+
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask
	dmask $7 and viewchildm
	dmask 4 >> $7 and viewchildm
	dmask 8 >> $7 and viewchildm
	dmask 12 >> $7 and viewchildm
	dmask 16 >> $7 and viewchildm
	dmask 20 >> $7 and viewchildm
	dmask 24 >> $7 and viewchildm
	dmask 28 >> $7 and viewchildm
	nip 4drop
	addv- ;

:viewoctreeo | x y z --
	octre viewom ;

|---------------------

|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ )
	nip nip nip ;


:bcover | x y z --
	addv @+ swap @+ swap @ max max

	4drop
	;

|-----------------------------------
| calculo linea para cada punto
|
| d rx mx ry my x y z
| 32x8 =256 (cada cubo de 8 puntos gasta 256 bytes)
|
|
#nodos )( 1024
#nodos> 'nodos

:oct!+
	nodos> !+ 'nodos> ! ;

#puntos )( 4096
#puntos> 'puntos

#ac #c

:calcline | adr --
	dup @ 2/ dup rot !+ >r	| half the dim
	r@+ r@+ r 8 + @	| d r m X
	>? ( pick2 - swap 2* )( pick2 + swap 2* 1+ ) | c91
	dup 1 and 'c !		| quad?
	r 8 - !+ !
	r@+ r@+ r 4+ @  | d r m Y
	>? ( pick2 - swap 2* )( pick2 + swap 2* 1+ ) | c91
	dup 1 and 2* c or 	| quad?
	place ac or 'ac !	| quad!
	r> 8 - !+ !
	drop ;

:adv8point | -- ac
	0 'ac !
	'puntos ( puntos> <? )( dup calcline 32 + ) drop
|	ac
	;

:8pnt+! | x y z --
	puntos> >r
	dup r!+ 0 dup dup dup r!+ r!+ r!+ r!+
	rot r!+ swap r!+ r!+ r> 'puntos> ! ;

:set8point | x y z --
	'puntos 'puntos> !
	pick2 pick2 pick2 0 idmov 8pnt+!
	pick2 pick2 pick2 1 idmov 8pnt+!
	pick2 pick2 pick2 2 idmov 8pnt+!
	pick2 pick2 pick2 3 idmov 8pnt+!
	pick2 pick2 pick2 4 idmov 8pnt+!
	pick2 pick2 pick2 5 idmov 8pnt+!
	pick2 pick2 pick2 6 idmov 8pnt+!
	7 idmov 8pnt+!
	;

|---------- dump
:boxd | adr --
	>r
	r 4+ @+ xc + swap 4+ @ yc + atxy
	4 r+ r@+ r@+ r@+ r@+ "%d %d %d %d " print
	rdrop
	;

:dump8point
	'puntos ( puntos> <? )( dup boxd 32 + ) drop ;

|---------- dump

:testoct
	dup oct!+
	xcam ycam zcam set8point
	adv8point
	adv8point
	adv8point
	adv8point
	adv8point
	adv8point
	adv8point
	adv8point
	adv8point


	dump8point
	;

| actual octree
#xq #yq #sq

:fillq | color --
	xq yq setxy
	sq dup ( 1? )( 1-
		over ( 1? )( 1-
			pick3 px!+
			) drop
		sw pick2 - px+!
		) 3drop ;

:fillq1 | color --
	xq yq setxy px!+ ;


:octquad | x y z oct --
	xc 'xq ! yc 'yq ! 512 'sq !
	oct!+
	set8point


	;

|-------------
:fillqtree | size xc yc --
	setxy
	dup ( 1? )( 1-
		over ( 1? )( 1-
			color px!+
			) drop
		sw pick2 - px+!
		)
	2drop
	$f 'color +! ;

:qtree | x y nivel --
	1 =? ( drop setxy color px!+ 1  'color +! ; )
	2/
	pick2 pick2 pick2 qtree
	pick2 pick2 pick2 + pick2 qtree
	pick2 over + pick2 pick2 qtree
	pick2 over + pick2 pick2 + pick2 qtree
	3drop ;

:main
	"media/3do/luigi.3do" load3do

	sh 2/ 256 - 'yc !
	sw 2/ 256 - 'xc !
	33
	show clrscr
		verde
|		dup "%d " print cr
		pick2 pick2 pick2 "%d %d %d" print cr

		omode
		freelook

		msec 3 << mrotxi
|		msec 4 << mrotyi
		0 0 1.0 transform 'zsz ! 'zsy ! 'zsx !
		0 1.0 0 transform 'ysz ! 'ysy ! 'ysx !
		1.0 0 0 transform 'xsz ! 'xsy ! 'xsx !
		calcmask

		cyan
		testoct
|		xcam ycam zcam octre quadoct

|	    filladdvect
|		xcam ycam zcam octre viewom


		[ -0.1 'zcam +! ; ] <up>
		[ 0.1 'zcam +! ; ] <dn>
		[ -0.1 'xcam +! ; ] <le>
		[ 0.1 'xcam +! ; ] <ri>
		[ -0.1 'ycam +! ; ] <pgup>
		[ 0.1 'ycam +! ; ] <pgdn>

		'exit >esc<
		cminiflecha
		;

: mark main ;

