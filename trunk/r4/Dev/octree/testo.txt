| prueba de quadtree
| PHREDA 2014
|---------------------
^r4/lib/gui.txt
^r4/lib/morton.txt
^r4/lib/trace.txt

^r4/dev/octree/qbuffer.txt

#xcam 0 #ycam 0 #zcam 4096

#octre
#pixels
#octre>

#dmask
#xc #yc

|---------------------------------
| vectores para rotar puntos

#level

#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

#rotconv )( 96 | 8 dir*3 dim*4 bytes

:fillrotvec | --
	0 0 2048 transform 'zsz ! 'zsy ! 'zsx !
	0 2048 0 transform 'ysz ! 'ysy ! 'ysx !
	2048 0 0 transform 'xsz ! 'xsy ! 'xsx !
	'rotconv >r
	xsx ysx zsx + + neg r!+	xsy ysy zsy + + neg r!+ xsz ysz zsz + + neg r!+	| 111
	xsx ysx zsx + - r!+	xsy ysy zsy + - r!+ xsz ysz zsz + - r!+	| 110
	ysx zsx xsx + - r!+	ysy zsy xsy + - r!+ ysz zsz xsz + - r!+	| 101
	xsx ysx zsx - + r!+	xsy ysy zsy - + r!+ xsz ysz zsz - + r!+	| 100
	zsx ysx xsx + - r!+ zsy ysy xsy + - r!+ zsz ysz xsz + - r!+ | 011
	xsx zsx ysx - + r!+ xsy zsy ysy - + r!+ xsz zsz ysz - + r!+ | 010
	ysx zsx xsx - + r!+ ysy zsy xsy - + r!+ ysz zsz xsz - + r!+	| 001
	xsx ysx zsx + + r!+	xsy ysy zsy + + r!+ xsz ysz zsz + + r!+	| 000
	rdrop ;

:idmovn | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ level >> + rot r@+ level >> + rot r> @ level >> + ;

:idmov | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ + rot r@+ + rot r> @ + ;

|------------------------------
:load3do | "" --
	here 'octre !
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !
	octre> 'here ! ;

|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4+ ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( 2drop )( 2drop 1+ )
	nip ;

:drawpoint	| x y z nodo
	>r swap over c9 >r c9 xc + r> yc + setxy
	r> octre - pixels + @ px!+ ;

:viewchildm | x y z node bit nro -- x y z node bit
	$7 xor	| de atras para adelante
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>
	| ;; recursion !!

|	level 7 >? ( drop drawpoint ; ) drop
	pixels >? ( drawpoint ; )

:viewom | x y z node --

	1 'level +!
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask

	dmask $7 and viewchildm
	dmask 4 >> $7 and viewchildm
	dmask 8 >> $7 and viewchildm
	dmask 12 >> $7 and viewchildm
	dmask 16 >> $7 and viewchildm
	dmask 20 >> $7 and viewchildm
	dmask 24 >> $7 and viewchildm
	dmask 28 >> $7 and viewchildm

	nip 4drop
	-1 'level +! ;

|**** calculo orden v0 ****
:prevx
	pick4 xcam - +? ( 1 )( 0 ) nip
	pick4 ycam - +? ( drop 2 or )( drop )
	pick3 zcam - +? ( drop 4 or )( drop )

	>r
	r viewchildm
	r 1 xor viewchildm
	r 2 xor viewchildm
	r 4 xor viewchildm
	r 3 xor viewchildm
	r 5 xor viewchildm
	r 6 xor viewchildm
	r> 7 xor viewchildm
;
|***************************

|
| morton d mx x my y
| 8 puntos por nodo. 8 niveles = 6*8*8*4
|
#puntos )( 4096
#pntnow> 'puntos
#pntlas> 'puntos

|-----------
:pnt+! | x y z --
	pntlas> >r 0 r!+ r!+ 0 r!+ swap r!+ 0 r!+ r> !+ 'pntlas> ! ;

:pntini | x y z --
	'puntos dup 'pntlas> ! 'pntnow> !
	'rotconv >r
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	3drop rdrop
	;

|--------------- v2
| morton d mx x my y

:calcline | acc adr -- acc adr'
	>r
	r@+ 2 << r@+ 2/ | acc m d/2
	r@+ r@+ >? ( over - )( over + rot 1 or rot rot ) r 8 - !
	r@+ r@+ >? ( over - )( over + rot 2 or rot rot ) r 8 - !
	swap 			| acc d/2 m
	rot 1 pick2 $3 and << or rot rot
	r 24 - !+ !
	r> ;

:adv8pnt | -- acc
|	0 pntnow> ( pntlas> <? )( calcline 1 over 24 - @ << rot or swap ) drop ;
	0 pntnow> ( pntlas> <? )( calcline  ) drop ;

:mortonnow | -- mortonow
	pntnow> @ ;

|---------- DUMP
:dumpline
	>r r@+ r@+ r@+ r@+ r@+ r@+ "%d %d %d %d %d %h " print cr r> ;

:dumpoct
	pntnow> ( pntlas> <? )( dumpline ) drop ;

:boxd | adr --
	>r
	r@+ invmorton2d yc + swap xc + swap atxy
	r@+ r@+ r@+ r@+ r@+ "%d %d %d %d %d" print
	rdrop ;

:dump8pnt
	pntnow> ( pntlas> <? )( dup boxd 24 + ) drop ;


|-----------
:pushchild | i --
	3 << dup 2* + pntnow> +
	pntlas> dup >r pntnow>
	over 'pntnow> !
	( over <? )(
		pick2 | Gi last Gj Gi
		@+ r!+
		@+ rot 4+ @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+
		nip
		) 3drop
	r> 'pntlas> ! ;

:popchild
	-192 dup 'pntlas> +! 'pntnow> +! ;

:lastchild | -- 0/n
	pntlas> 'puntos 6 4 <<
	2 << | 4 niveles
	+ - ;


|--------------
| algo 1
| si es hoja de quadtree, pintar el punto del color del octree
| si es hoja del octree, pintar el quadtree del color del octree
|
| si los 8 vertices estan en un cuadrante..dividir quadtree y otra vez
| sino dividir el octree y otravez
| --

:setxymorton | morton --
	256 >r
	2 9 pick2 24 >> - 1- 2* << | mask	| 9 es quadsize
	xc yc rot 		| morton x y mask
	( 1? )( | morton x y mask
		pick3 and? ( rot r + rot rot )
		2/
		pick3 and? ( swap r + swap )
		2/
		r> 2/ >r )
	rdrop
	drop rot drop
	setxy ;

:fillquad | oct qua noct bit child 'oct -- oct qua noct bit

	nip
	octre - pixels + @  | getcolor
	pick3 | setqbuffer
	1 over 24 >> <<
	trace
	swap setxymorton | color size --
	dup ( 1? )( 1-
		over ( 1? )( 1-
			pick3 px!+
			) drop
		sw pick2 - px+!
		) 3drop ;

:fillpoint | oct qua --
	swap octre - pixels + @  | getcolor
	swap | setqbuffer
	setxymorton px!+ ;

:reducequad | oct qua -- oct qua'
	$1000000 - $ff000000 and mortonnow or ;

:m3dto2d-child | oct qua noct bit child mask -- oct qua noct bit
	1- pick2 and popcnt 2 << pick3 +	| oct qua noct bit child 'oct
	pixels >=? ( fillquad ; )			| ....si es ultimo llena quad
	pick4 								| qua oct noct bit |oct' qua'
:m3dto2d | oct qua --
	( adv8pnt dup 1- and 0? )( drop 		| oct qua
		reducequad
		$ff000000 nand? ( fillpoint ; )	| si es punto..pinta
		) drop
	over @ dup | oct qua nodo nodo
	8 >> 2 << octre + swap $ff and 			|  oct qua noct bit

	dmask $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 4 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 8 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 12 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 16 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 20 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 24 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	dmask 28 >> $7 and 1 over <<
	pick2 and? ( over pushchild m3dto2d-child popchild )( 2drop )
	4drop ;

:octquad | oct x y z --
	pntini
				|	$9 24 << xc 12 << yc  or or | view
	$9000000	| level(8)-morton(24)
	m3dto2d ;

|-------------- orden segun vista
#maskc
$4152637	$15043726	$26370415	$37261504	$40516273	$51407362	$62734051	$73625140
$4216537	$15307426	$26034715	$37152604	$40625173	$51743062	$62470351	$73516240
$1234567	$10352476	$23016745	$32107654	$45670123	$54761032	$67452301	$76543210
$1452367	$10534276	$23670145	$32716054	$45016723	$54107632	$67234501	$76325410
$2461357	$13570246	$20634175	$31725064	$46052713	$57134602	$64207531	$75316420
$2134657	$13025746	$20316475	$31207564	$46570213	$57461302	$64725031	$75643120

|-------
:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	maskabs r> or
	2 << 'maskc + @ 'dmask !
	;


|-------------
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;

|-------------
:main
	"media/3do/luigio.3do" load3do

	sh 2/ 256 - 'yc !
	sw 2/ 256 - 'xc !
	33
	show clrscr
		verde
|		dup "%d " print cr
		pick2 pick2 pick2 "%d %d %d" print cr

		omode
		freelook

|		msec 3 << mrotxi
|		msec 4 << mrotyi

		fillrotvec
		calcmask

		octre xcam ycam zcam octquad

		0 'level !
		xcam ycam zcam octre viewom

		[ -0.025 'zcam +! ; ] <up>
		[ 0.025 'zcam +! ; ] <dn>
		[ -0.025 'xcam +! ; ] <le>
		[ 0.025 'xcam +! ; ] <ri>
		[ -0.025 'ycam +! ; ] <pgup>
		[ 0.025 'ycam +! ; ] <pgdn>

		'exit >esc<
		cminiflecha
		;

: mark main ;

