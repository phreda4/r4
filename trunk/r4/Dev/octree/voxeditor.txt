
| Editor de Voxels
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/btn.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt
^r4/lib/dlg.txt
^r4/lib/dlgfile.txt
^r4/lib/dlgcol.txt

^r4/lib/ricons.txt
^inc/ric/fontawesomewebfont.ric

^r4/dev/octree/iso_6_3.txt
^r4/dev/octree/buildoctree.txt
^r4/dev/octree/wirelib.txt

^r4/lib/trace.txt

#filename )( 1024

|------ vista
#xcam 0 #ycam 0 #zcam 1.6
#rx #ry

|------ cursor
#curx #cury #curz
#color $ff00

#memini
#bitmap1
#bitmap2
#bitmap3

|------ ajustes
:setvoxsize | level -- level
	dup 'deepvox !
	1 over << 1- 'qsize !
	;

:drawvoxel
	$inifile dup @ 16 >> $3d00 <>? ( 2drop ; ) drop
	maskb.clear
	drawoctree ;

|----------------
:clearvox
	memvox 'memvox> ! ;

:vox-cnt-mem | -- cnt mem
	memvox memvox> over - 3 >> 1+ swap ;

:vox! | c x y z --
	mortonlut
:mvox! | c m --
	memvox> !+ !+ 'memvox> ! ;

:vox@ | x y z -- c
	mortonlut vox-cnt-mem binsearch
	0? ( -1 nip ; ) 4+ @ ;

:vox- | x y z --
	mortonlut vox-cnt-mem binsearch
	0? ( drop ; ) | adr
	dup 8 +   | dest src
	memvox> over - 2 >> move
	-8 'memvox> +! ;



|------------- generadores
:3* dup 2* + ;

:clearbitmap
	qsize 1+ dup * 3*
	bitmap1 >r
	( 1? )( 1- -1 r!+ ) drop
	rdrop ;

:memmapas
	qsize 1+ dup * 2 <<
	memini
	dup 'bitmap1 !
	over + dup 'bitmap2 !
	+ dup 'bitmap3 !
	clearbitmap
	;

:drawbitmap | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 1 px+! drop )( px!+ )
			) drop
		sw qsize - 1- px+!
		) drop
	rdrop ;

:dot2 | col --
	dup px!+ dup px!+
	sw 2 - px+! dup px!+ px!+
	sw neg px+! ;

:drawbitmap2 | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 2 px+! drop )( dot2 )
			) drop
		sw qsize - 2* 2 - px+!
		) drop
	rdrop ;

:dot4 | col --
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ px!+
	sw 3* neg px+! ;

:drawbitmap4 | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 4 px+! drop )( dot4 )
			) drop
		sw qsize - 2 << 4 - px+!
		) drop
	rdrop ;

:bitxy | x y -- adr
    qsize clamp0max
	deepvox << swap
	qsize clamp0max
	+ 2 << ;

:getbitmap1 | x y -- color
	bitxy bitmap1 + @ ;

:getbitmap2 | x y -- color
	bitxy bitmap2 + @ ;

:getbitmap3 | x y -- color
	bitxy bitmap3 + @ ;

:voxelmap | vec --
	memvox 'memvox> !
	0 ( qsize <=? )(
		0 ( qsize <=? )(
			0 ( qsize <=? )(
				pick3 exec
			1+ ) drop
		1+ ) drop
	1+ ) 2drop
	buildoctree
	;

|---- mapeos
:mVoxel1 | x y z -- x y z
	qsize 1+ 2/ >r
	pick2 r - dup * over r - dup * + sqrt r> +
	pick2 getbitmap1
	-? ( drop ; )
	pick3 qsize pick4 - pick3 vox! ;

:mVoxel2 | x y z -- x y z
	pick2 pick2 getbitmap1 -? ( drop ; )
	over pick3 getbitmap2 -? ( 2drop ; )
	colavg
	pick3 qsize pick4 - pick3 vox! ;

:mVoxel3 | x y z -- x y z
	pick2 pick2 getbitmap1 -? ( drop ; )
	over pick3 getbitmap2 -? ( 2drop ; )
	colavg
	pick3 pick2 getbitmap3 -? ( 2drop ; )
	colavg
	pick3 qsize pick4 - pick3 vox! ;

|----- dibujo

|-- zoom4
:bp4! | x y --
	yc h 2/ - - 2 >> swap xc w 2/ - - 2 >>
	swap bitxy pick3 + color swap ! ;

:boxedit4
	gcxyxy [ xymouse bp4! ; ] [ xymouse bp4! ; ]  guiDnMove
	setxy drawbitmap4
	2+gc blanco 4 rgrilla ;

:suma4
	2dup qsize 1+ 2 << pick2 + qsize 1+ 2 << pick2 + ;

:draw4x
	bitmap1 4 32 suma4 boxedit4
	bitmap2 16 qsize 2 << + 32 suma4 boxedit4
    bitmap3 28 qsize 3 << + 32 suma4 boxedit4
	;

|-- zoom2
:bp2! | x y --
	yc h 2/ - - 2/ swap xc w 2/ - - 2/
	swap bitxy pick3 + color swap ! ;

:boxedit2
	gcxyxy [ xymouse bp2! ; ] [ xymouse bp2! ; ]  guiDnMove
	setxy drawbitmap2
	2+gc blanco 4 rgrilla ;

:suma2
	2dup qsize 1+ 2* pick2 + qsize 1+ 2* pick2 + ;

:draw2x
	bitmap1 4 32 suma2 boxedit2
	bitmap2 16 qsize 2* + 32 suma2 boxedit2
	bitmap3 28 qsize 2 << + 32 suma2 boxedit2
	;

|----- zoom1
:bp1! | x y --
	yc h 2/ - - swap xc w 2/ - -
	swap bitxy pick3 + color swap ! ;

:boxedit1
	gcxyxy [ xymouse bp1! ; ] [ xymouse bp1! ; ]  guiDnMove
	setxy drawbitmap
	2+gc blanco 4 rgrilla ;

:suma1
	2dup qsize 1+ pick2 + qsize 1+ pick2 + ;

:draw1x
	bitmap1 4 32 suma1 boxedit1
	bitmap2 16 qsize + 32 suma1 boxedit1
	bitmap3 28 qsize 2* + 32 suma1 boxedit1
	;

|---------------
#drawmapas 'draw4x

:mainmapas
	memmapas
	show clrscr
		fonti
		verde oscuro 2 linesfill blanco
		" Voxel GenMap" print

		drawmapas exec

		1 rows 4 - gotoxy

		azul
		sp
		[ 'mVoxel1 voxelmap ; ] dup <f1> "F1-1+r  " sp btnt
		[ 'mVoxel2 voxelmap ; ] dup <f2> "F2-1+2  " sp btnt
		[ 'mVoxel3 voxelmap ; ] dup <f3> "F3-1+2+3" sp btnt

		3dini
		msec dup mrotx mroty
		xcam ycam zcam 1.0 + mtrans
		drawvoxel

		sw 26 - 48 pos
		'color btncol

		'exit >esc<
		cminiflecha ;

|------------- save/load import
:saveoctree
	"media/3do" dlgfilesave 0? ( drop ; )
	'filename strcpy
	'filename ".3do" =pos
	0? ( ".3do" pick2 strcat ) drop
	$inifile $end over - rot save ;

:loadoctree
	"media/3do" dlgfileload 0? ( drop ; )
	mark
	load3do '$inifile !
	empty
	$inifile @ $f and
	0? ( 8 + )
	setvoxsize drop
	clearvox
	[ mvox! ; ] $inifile 3domap
	buildoctree ;


|--------------------------------------
:deletevox
	"Delete Voxels?" dlgsino 0? ( drop ; ) drop
	clearvox
	buildoctree
	0 dup 'curx ! dup 'cury ! 'curz !
	;

:botonsimple2
	btne blanco 8-gc drawric 8+gc ;

|------ rotar
#xm #ym

:dnlook
	xymouse 'ym ! 'xm ! ;

:movelook
	xymouse
	ym over 'ym ! - 7 << 'rx +!
	xm over 'xm ! - neg 7 << neg 'ry +! ;

|------------------------------------
:3dline | x y z --
	pick3 pick3 pick3
	voxLine
	( cx curx - cy cury - or cz curz - or 1? )( drop
		color cx cy cz vox!
		voxPaso
		) drop
	color cx cy cz vox!
	'curz ! 'cury ! 'curx !
	buildoctree
	;

:test3dline
	64 ( 1? )( 1-
	rand 5 >> qsize and
	rand 7 >> qsize and
	rand 9 >> qsize and
	3dline
	rand 3 >> 'color !
	) drop
	;

|------- pencil
:setvox
    curx cury curz vox-
	color curx cury curz vox!
	buildoctree ;

:delvox
    curx cury curz vox-
	buildoctree ;

:inside? | ; adentro del bbox?
	cx cy or cz or qsize not and ;

:setcur! | ; guarda en cursor
	cx 'curx ! cy 'cury ! cz 'curz ! ;

:prevmouse
	xymouse testbox 0? ( drop ; ) drop
	hx1 'ox ! hy1 'oy ! hz1 'oz !
	hx0 hy0 hz0 voxline
	setcur!
	( inside? 0? )( drop
		cx cy cz vox@ +? ( drop ; ) drop	| voxel lleno
		setcur!
		voxPaso
		) drop ;

:inmouse
	xymouse testbox 0? ( drop ; ) drop
	hx1 'ox ! hy1 'oy ! hz1 'oz !
	hx0 hy0 hz0 voxline
	( inside? 0? )( drop
		cx cy cz vox@ +? ( drop setcur! ; ) drop	| voxel lleno
		voxPaso
		) drop ;

|------- agregar
:modpencil
	bmouse 2 =? ( drop 'dnlook 'movelook guiDnMove ; ) drop
	prevmouse
	'setvox <spc>
	;

:toopencil
	cyan oscuro
	'i.download_alt 'loadoctree botonsimple2 gc>>
	cyan oscuro
	'i.upload_alt 'saveoctree botonsimple2 gc<< gcdn
|	cyan oscuro
|	'i.zoom_in [ -0.01 'zcam +! ; ] botonsimple2 gc>>
|	cyan oscuro
|	'i.zoom_out [ 0.01 'zcam +! ; ] botonsimple2 gc<< gcdn
	verde oscuro
	'i.cog 'mainmapas botonsimple2 gc>>
	gcdn gc<<
|	tpos
	;

|------- pintar
:modtint
	bmouse 2 =? ( drop 'dnlook 'movelook guiDnMove ; ) drop
	inmouse
	'setvox <spc>
	;

:tootint
	;

|------- borrar
:modcut
	bmouse 2 =? ( drop 'dnlook 'movelook guiDnMove ; ) drop
	inmouse
	'delvox <spc>
	;

:toocut
	rojo oscuro
	'i.trash 'deletevox botonsimple2 gc>>
	;

|----- botonera
#modos 'modpencil 'modtint 'modcut
#tools 'toopencil 'tootint 'toocut

#modo 0
#modogui 'modpencil
#modotoo 'toopencil

:setmodo
	dup 'modo !
	dup 2 <<
	dup 'modos + @ 'modogui !
	'tools + @ 'modotoo !
	;

:botonmodo | icon nro --
	modo =? ( azul )( negro )
	'setmodo btne
	modo =? ( blanco )( gris )
	drop
	8-gc drawric 8+gc gcdn ;

:botonsimple | icon vec --
	btne blanco 8-gc drawric 8+gc gcdn ;

:botonera
	48 qdim
	sw 26 - sh 32 - pos
	rojo 'exit dup >esc< btne blanco 'i.off drawric

	24 48 pos
	'i.pencil 0 botonmodo
	'i.tint 1 botonmodo
	'i.cut 2 botonmodo
    24 qdim
	-10 -10 +pos
	modotoo exec

	sw 26 - 48 pos
	'color btncol
	;

|--- tamaño
:setsize
	8 =? ( 'draw1x 'drawmapas ! )
	7 =? ( 'draw2x 'drawmapas ! )
	7 <? ( 'draw4x 'drawmapas ! )
	setvoxsize
	memmapas ;

:changesize
	deepvox 1+
	9 =? ( 4 nip )
	setsize
	'deepvox ! 
	0 dup 'curx ! dup 'cury ! 'curz !
	;

|-----------------
:main
	4 setvoxsize drop
	voxelbox
	clearvox
	buildoctree

	4 show clrscr
		fonti
		verde oscuro 2 linesfill blanco
		dup ":r%d VoxelEditor " print
		octre> octre - 2 >> memvox> memvox - 3 >>
		"[ %d Pnts %d Nods ]" print cr
		'filename sp print
|		curz cury curx "x:%d y:%d z:%d" print
|		cr

		|------
		3dini
		rx mrotx ry mroty
		xcam ycam zcam mtrans
		draw3dgrid
|		xymouse testbox blanco "%b" print

		modogui exec

		drawvoxel
		blink 1? ( blanco )( gris ) drop
		curx cury curz voxcursor

		|------
		1 rows 2 - gotoxy azul
		azul
		'changesize qsize 1+ dup dup "%dx%dx%d" mprint sp btnt
		naranja
		'voxelbox "1" sp btnt
		'voxelcuad "2" sp btnt
		'voxelboxc "3" sp btnt

		[ curx 1+ qsize >? ( 0 nip ) 'curx ! ; ] <up>
		[ curx 1- -? ( qsize nip ) 'curx ! ; ] <dn>
		[ cury 1+ qsize >? ( 0 nip ) 'cury ! ; ] <le>
		[ cury 1- -? ( qsize nip ) 'cury ! ; ] <ri>
		[ curz 1+ qsize >? ( 0 nip ) 'curz ! ; ] <pgup>
		[ curz 1- -? ( qsize nip ) 'curz ! ; ] <pgdn>

		[ 1 0 0 movevoxel buildoctree ; ] <f1>
		[ 0 1 0 movevoxel buildoctree ; ] <f2>
		[ 0 0 1 movevoxel buildoctree ; ] <f3>
		'test3dline  <f4>

		botonera
		'exit >esc<
		cminiflecha ;

|--------------------------
:memory
	mark
	maskb.ini
	here dup 'memini !
	dup 'memvox !
	dup 'memvox> !
	$ffffff + 'here !
	;

: memory main ;
