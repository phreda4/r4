| Editor de Voxels
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/btn.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt
^r4/lib/dlg.txt

^r4/dev/octree/buildoctree.txt
^r4/dev/octree/iso_7.txt

^r4/lib/trace.txt

#filename )( 1024

#octsize 0.05

#xcam 0 #ycam 0 #zcam 0.2
#rx #ry

|-------- cursor
#curx #cury #curz
#color $ff00

#memini
#bitmap1
#bitmap2
#bitmap3

|----------------
:clearvox
	memvox 'memvox> ! ;

:vox-cnt-mem | -- cnt mem
	memvox memvox> over - 3 >> 1+ swap ;

:vox! | c x y z --
	mortonlut memvox> !+ !+ 'memvox> ! ;

:vox@ | x y z -- c
	mortonlut vox-cnt-mem binsearch
	0? ( -1 nip ; ) 4+ @ ;

|----------- graficacion
:3dop transform 3dproject op ;
:3dline transform 3dproject line ;

|---- dibujos de grillas
:drawboxz | z --
	octsize neg octsize neg pick2 3dop
	octsize octsize neg pick2 3dline
	octsize octsize pick2 3dline
	octsize neg octsize pick2 3dline
	octsize neg octsize neg rot 3dline ;

:drawboxy | y --
	octsize neg over octsize neg 3dop
	octsize over octsize neg 3dline
	octsize over octsize 3dline
	octsize neg over octsize 3dline
	octsize neg swap octsize neg 3dline ;

:drawboxx | x --
	dup octsize neg octsize neg 3dop
	dup octsize octsize neg 3dline
	dup octsize octsize 3dline
	dup octsize neg octsize 3dline
	octsize neg octsize neg 3dline ;

:drawlinez | x1 x2 --
	2dup octsize neg 3dop octsize 3dline ;

:draw3dbox
	$707070 neg ink
	octsize neg drawboxz
	octsize drawboxz
	octsize neg octsize neg drawlinez
	octsize octsize neg drawlinez
	octsize octsize drawlinez
	octsize neg octsize drawlinez ;

|------------- generadores
:3* dup 2* + ;

:clearbitmap
	qsize 1+ dup * 3*
	bitmap1 >r
	( 1? )( 1- -1 r!+ ) drop
	rdrop ;


:memmapas
	qsize 1+ dup * 2 <<
	memini
	dup 'bitmap1 !
	over + dup 'bitmap2 !
	over + dup 'bitmap3 !
	+ dup 'memvox !
	'memvox> !
	clearbitmap
	;

:drawbitmap | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 1 px+! drop )( px!+ )
			) drop
		sw qsize - 1- px+!
		) drop
	rdrop ;

:dot2 | col --
	dup px!+ dup px!+
	sw 2 - px+! dup px!+ px!+
	sw neg px+! ;

:drawbitmap2 | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 2 px+! drop )( dot2 )
			) drop
		sw qsize - 2* 2 - px+!
		) drop
	rdrop ;

:dot4 | col --
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ dup px!+ sw 4 - px+!
	dup px!+ dup px!+ dup px!+ px!+
	sw 3* neg px+! ;

:drawbitmap4 | adr --
	>r qsize 1+ ( 1? )( 1-
		qsize 1+ ( 1? )( 1-
			r@+ -? ( 4 px+! drop )( dot4 )
			) drop
		sw qsize - 2 << 4 - px+!
		) drop
	rdrop ;

:bitxy | x y -- adr
    qsize and deepvox << swap qsize and + 2 << ;

:getbitmap1 | x y -- color
	bitxy bitmap1 + @ ;

:getbitmap2 | x y -- color
	bitxy bitmap2 + @ ;

:getbitmap3 | x y -- color
	bitxy bitmap3 + @ ;

:voxelmap | vec --
	memvox 'memvox> !
	0 ( qsize <=? )(
		0 ( qsize <=? )(
			0 ( qsize <=? )(
				pick3 exec
			1+ ) drop
		1+ ) drop
	1+ ) drop
	buildoctree
	;

|---- mapeos
:mVoxel1 | x y z -- x y z
	qsize 1+ 2/ >r
	pick2 r - dup * over r - dup * + sqrt r> +
	pick2 getbitmap1
	-? ( drop ; )
	pick3 pick3 pick3 vox! ;

:mVoxel2 | x y z -- x y z
	pick2 pick2 getbitmap1 -? ( drop ; )
	over pick3 getbitmap2 -? ( 2drop ; )
	colavg
	pick3 pick3 pick3 vox! ;

:mVoxel3 | x y z -- x y z
	pick2 pick2 getbitmap1 -? ( drop ; )
	over pick3 getbitmap2 -? ( 2drop ; )
	colavg
	pick3 pick2 getbitmap3 -? ( 2drop ; )
	colavg
	pick3 pick3 pick3 vox! ;

|----- dibujo


|-- zoom4
:bp4! | x y --
	yc h 2/ - - 2 >> swap xc w 2/ - - 2 >>
	swap bitxy pick3 + color swap ! ;

:boxedit4
	gcxyxy [ xymouse bp4! ; ] [ xymouse bp4! ; ]  guiDnMove
	setxy drawbitmap4
	2+gc blanco 4 rgrilla ;

:suma4
	2dup qsize 1+ 2 << pick2 + qsize 1+ 2 << pick2 + ;

:draw4x
	bitmap1 4 32 suma4 boxedit4
	bitmap2 16 qsize 2 << + 32 suma4 boxedit4
    bitmap3 28 qsize 3 << + 32 suma4 boxedit4
	;

|-- zoom2
:bp2! | x y --
	yc h 2/ - - 2/ swap xc w 2/ - - 2/
	swap bitxy pick3 + color swap ! ;

:boxedit2
	gcxyxy [ xymouse bp2! ; ] [ xymouse bp2! ; ]  guiDnMove
	setxy drawbitmap2
	2+gc blanco 4 rgrilla ;

:suma2
	2dup qsize 1+ 2* pick2 + qsize 1+ 2* pick2 + ;

:draw2x
	bitmap1 4 32 suma2 boxedit2
	bitmap2 16 qsize 2* + 32 suma2 boxedit2
	bitmap3 28 qsize 2 << + 32 suma2 boxedit2
	;

|----- zoom1
:bp1! | x y --
	yc h 2/ - - swap xc w 2/ - -
	swap bitxy pick3 + color swap ! ;

:boxedit1
	gcxyxy [ xymouse bp1! ; ] [ xymouse bp1! ; ]  guiDnMove
	setxy drawbitmap
	2+gc blanco 4 rgrilla ;

:suma1
	2dup qsize 1+ pick2 + qsize 1+ pick2 + ;

:draw1x
	bitmap1 4 32 suma1 boxedit1
	bitmap2 16 qsize + 32 suma1 boxedit1
	bitmap3 28 qsize 2* + 32 suma1 boxedit1
	;

|---------------
#drawmapas 'draw4x

:setsize
	8 =? ( 'draw1x 'drawmapas ! )
	7 =? ( 'draw2x 'drawmapas ! )
	7 <? ( 'draw4x 'drawmapas ! )
	dup 'deepvox !
	1 over << 1- 'qsize !
	memmapas ;

:toolsize
	4 ( 9 <? )(
		deepvox =? (
			1 over << dup " %dx%d " print
		)(
			1 over << dup " %dx%d " mprint 'setsize swap sp btnt
			)
		1+ ) drop ;

:mainmapas
	memmapas
	4
	show clrscr fonti
		verde dup ":r%d Voxel GenMap " print cr cr2

		drawmapas exec

		1 rows 4 - gotoxy
		sp 'color dlgcolora sp
		cyan
		toolsize cr cr
		azul
		sp
		[ 'mVoxel1 voxelmap ; ] dup <f1> "F1-Genera" sp btnt
		[ 'mVoxel2 voxelmap ; ] dup <f2> "F2-Genera" sp btnt
		[ 'mVoxel3 voxelmap ; ] dup <f3> "F3-Genera" sp btnt

		3dini

|		sw sh sw 2/ sh 2/ voxelini
		rx mrotx ry mroty
		xcam ycam zcam mtrans
		qsize 2/ neg dup dup mtransi

|		draw3dbox
		maskb.clear
		$inifile drawoctree

		'exit >esc<
		cminiflecha ;

|------------- load import
:testmodel
	clearvox
	qsize 1+ ( 1? )( 1-
		$ff 0 0 pick3 vox!
		$ff00 0 pick2 0 vox!
		$ff0000 over 0 0 vox!
		) drop
|	$ffffff 0 0 0 vox!
	repevoxel
	;


:randvox
	$ff00 0 0 0 vox!
	$ff00 0 0 1 vox!
	$ff 1 0 0 vox!
	$ff 1 0 1 vox!
	$ff0000 0 1 0 vox!
	$ff0000 0 1 1 vox!
	;

|------ vista
#xm #ym
:dnlook
	xymouse 'ym ! 'xm ! ;

:movelook
	xymouse
	ym over 'ym ! - 7 << 'rx +!
	xm over 'xm ! - neg 7 << neg 'ry +!  ;

|-----------------
:main
	$3f 'qsize ! 6 'deepvox !

	testmodel
|	randvox
	buildoctree

|	qsize 1+ 5 << 'zcam !
	4
	show clrscr

		3dini
		rx mrotx ry mroty
		xcam ycam zcam mtrans
		qsize 2/ neg dup dup mtransi

		draw3dbox
		maskb.clear
		$inifile drawoctree

		'dnlook 'movelook guiDnMove

		verde
		dup ":r%d VoxelEditor " print
		qsize 1+ dup dup "%dx%dx%d " print
		memvox> memvox - 3 >> "Pnt:%d " print
		octre> octre - 2 >> "Oct:%d " print
		cr

		curz cury curx "x:%d y:%d z:%d" print cr

		1 rows 2 - gotoxy azul
		'mainmapas dup <f5> "F5-Mapa" sp btnt

		[ curx 1+ qsize >=? ( 0 nip ) 'curx ! ; ] <up>
		[ curx 1- -? ( qsize 1- nip ) 'curx ! ; ] <dn>
		[ cury 1+ qsize >=? ( 0 nip ) 'cury ! ; ] <le>
		[ cury 1- -? ( qsize 1- nip ) 'cury ! ; ] <ri>
		[ curz 1+ qsize >=? ( 0 nip ) 'curz ! ; ] <pgup>
		[ curz 1- -? ( qsize 1- nip ) 'curz ! ; ] <pgdn>
		[ color curx cury curz vox! buildoctree ; ] <spc>

		[ 1 0 0 movevoxel buildoctree ; ] <f1>
		[ 0 1 0 movevoxel buildoctree ; ] <f2>
		[ 0 0 1 movevoxel buildoctree ; ] <f3>

		'voxelbox <f6>
		'voxelcuad <f7>

		'exit >esc<
		cminiflecha ;

|--------------------------
:memory
	mark
	maskb.ini
	here dup 'memini !
	dup 'memvox !
	'memvox> !
	;

: memory main ;
