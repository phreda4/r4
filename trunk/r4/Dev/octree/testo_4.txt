| prueba de quadtree
| PHREDA 2014
|---------------------
^r4/lib/gui.txt
^r4/lib/morton.txt
^r4/lib/trace.txt

^r4/dev/octree/qbuffer.txt

|#xcam 0 #ycam 0 #zcam 4096
#xcam 000 #ycam 000 #zcam 8192

#octre
#pixels
#octre>

#dmask
#xc #yc

|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4+ ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( 2drop )( 2drop 1+ )
	nip ;

:getxyd | x y z -- X Y
	swap over c9 >r c9 xc + r> yc + ;

|---------------------------------
| vectores para rotar puntos
#level

#vx1 #vx2 #vy1 #vy2
#ymin #ymax #xmin #xmax

#zsz #zsy #zsx
#ysz #ysy #ysx
#xsz #xsy #xsx

#rotconv )( 96 | 8 dir*3 dim*4 bytes

:fillrotvec | --
	0 0 2048 transform 'zsz ! 'zsy ! 'zsx !
	0 2048 0 transform 'ysz ! 'ysy ! 'ysx !
	2048 0 0 transform 'xsz ! 'xsy ! 'xsx !

	'rotconv >r
	xsx ysx zsx + + neg r!+	xsy ysy zsy + + neg r!+ xsz ysz zsz + + neg r!+	| 111
	xsx ysx zsx + - r!+	xsy ysy zsy + - r!+ xsz ysz zsz + - r!+	| 110
	ysx zsx xsx + - r!+	ysy zsy xsy + - r!+ ysz zsz xsz + - r!+	| 101
	xsx ysx zsx - + r!+	xsy ysy zsy - + r!+ xsz ysz zsz - + r!+	| 100
	zsx ysx xsx + - r!+ zsy ysy xsy + - r!+ zsz ysz xsz + - r!+ | 011
	xsx zsx ysx - + r!+ xsy zsy ysy - + r!+ xsz zsz ysz - + r!+ | 010
	ysx zsx xsx - + r!+ ysy zsy xsy - + r!+ ysz zsz xsz - + r!+	| 001
	xsx ysx zsx + + r!+	xsy ysy zsy + + r!+ xsz ysz zsz + + r!+	| 000
	rdrop
	;

:idmovn | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ level >> + rot r@+ level >> + rot r> @ level >> + ;

:idmov | x y z id -- x' y' z'
	$7 and dup 2* + 2 << 'rotconv + >r
	rot r@+ + rot r@+ + rot r> @ + ;

:viewrot
	'rotconv >r
	0 ( 8 <? )(
		r@+ r@+ r@+ pick3 "%d - %d %d %d " print cr
		1+ ) drop
	rdrop ;

|------------------------------
:load3do | "" --
	here 'octre !
	octre swap load 'octre> !
	octre> 4 - @ octre + 'pixels !
	octre> 'here ! ;


:drawpixels
	0 0 setxy
	pixels ( octre> <? )( @+ px!+ ) drop ;

:drawpoint	| x y z nodo
	>r swap over c9 >r c9 xc + r> yc + setxy
	r> octre - pixels + @ px!+ ;

:viewchildm | x y z node bit nro -- x y z node bit
	$7 xor	| de atras para adelante
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>
	| ;; recursion !!

|	level 7 >? ( drop drawpoint ; ) drop
	pixels >? ( drawpoint ; )

:viewom | x y z node --

	1 'level +!
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask

	dmask $7 and viewchildm
	dmask 4 >> $7 and viewchildm
	dmask 8 >> $7 and viewchildm
	dmask 12 >> $7 and viewchildm
	dmask 16 >> $7 and viewchildm
	dmask 20 >> $7 and viewchildm
	dmask 24 >> $7 and viewchildm
	dmask 28 >> $7 and viewchildm

	nip 4drop
	-1 'level +! ;

|***************************
| morton d mx x my y
| 8 puntos por nodo. 8 niveles = 6*8*8*4
|***************************

#SIZEV 192
#puntos )( 8192
#pntlas> 'puntos

:pnt+! | x y z --
	pntlas> >r 0 r!+ r!+ 0 r!+ swap r!+ 0 r!+ r> !+ 'pntlas> ! ;

:pntini | x y z --
	'puntos 'pntlas> !
	'rotconv >r
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	pick2 r@+ + pick2 r@+ + pick2 r@+ + pnt+!
	3drop rdrop ;

|-------- avanzo quadrante (estan en el mismo!!)
| morton d mx x my y
|--
:calcmm | adr -- adr' mor
	8 + >r
	r@+ r@+ >? ( 0 )( 1 ) drop
	r@+ r@+ <=? ( swap 2 or swap ) drop
	r> swap ;

|---- 0 si los vertices estan en cuadrantes separados
|---- o un nivel de morton (ya que estan en el mismo cuadrante)
:mort8pnt | -- 0/morton+1
	pntlas> dup SIZEV -
	dup calcmm | adrl adr mor0
	( pick2 <? )(	| mor0 adr
		calcmm 		| mor0 adr' mor
		pick2 <>? ( 4drop 0 ; )
		drop ) drop nip
	1+ ; | para que 0 sea sin coincidencia


:calcmm | adr -- mor
	8 + >r
	r@+ r@+ >? ( 0 )( 1 ) drop
	r@+ r@+ <=? ( swap 2 or swap ) drop
	rdrop ;

:mort8pntf | --
	pntlas> dup SIZEV -
	( over <? )(
		dup calcmm
		over @ 2 << or swap !+ 20 +
		) 2drop ;

|--------------------------
:m00 | --
	pntlas> dup SIZEV - | last first
	( over <? )( >r
		r @ 2 << r!+ r @ 2/ dup r!+			| last d/2
		r @ over - r!+ 4 r+ r @ over - r!+ 4 r+
		drop r> ) 2drop ;

:m01 | --
	pntlas> dup SIZEV - | last first
	( over <? )( >r
		r @ 2 << %01 or r!+	r @ 2/ dup r!+	| last d/2
		r @ over + r!+ 4 r+ r @ over - r!+ 4 r+
		drop r> ) 2drop ;

:m10 | --
	pntlas> dup SIZEV - | last first
	( over <? )( >r
		r @ 2 << %10 or r!+	r @ 2/ dup r!+	| last d/2
		r @ over - r!+ 4 r+ r @ over + r!+ 4 r+
		drop r> ) 2drop ;

:m11 | --
	pntlas> dup SIZEV - | last first
	( over <? )( >r
		r @ 2 << %11 or r!+	r @ 2/ dup r!+	| last d/2
		r @ over + r!+ 4 r+ r @ over + r!+ 4 r+
		drop r> ) 2drop ;

#advm m00 m01 m10 m11

:adv8pnt | morton --
	$3 and 2 << 'advm + @ exec ;
|		r @ pick3 1 and? ( drop over + )( drop over - ) r!+ 4 r+
|		r @ pick3 2 and? ( drop over + )( drop over - ) r!+ 4 r+

:pushchild | i --
	3 << dup 2* + SIZEV - 	| Gi
	pntlas> dup rot +		| last Gi
	swap dup SIZEV -		| Gi last G0
	over >r
	( over <? )( pick2 | Gi last Gj Gi
		@+ r!+
		@+ rot 4+ @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+ swap
		@+ rot @+ rot + 2/ r!+
		nip ) 3drop
	r> 'pntlas> !
	;

:popchild
	-192 'pntlas> +! ;

|********* DUMP ***********
:dumpline
	>r r@+ r@+ r@+ r@+ r@+ r@+ "y:%d my:%d x:%d mx:%d d:%d m:%h " print cr r> ;

:dumpoct
	pntlas> dup SIZEV - ( over <? )( dumpline ) 2drop ;

:dumpprev
	pntlas> SIZEV 2* - 'puntos <? ( drop ; )
	( pntlas> <? )( dumpline ) drop ;

:boxd | adr --
	>r
	r@+ invmorton2d yc + swap xc + swap atxy
	r@+ r@+ r@+ r@+ r@+ "%d %d %d %d %d" print
	rdrop ;

:dump8pnt
	pntlas> dup SIZEV - ( over <? )( dup boxd 24 + ) 2drop ;

:linevec
	pntlas> SIZEV - 24 - @ invmorton2d yc + swap xc + swap op
	pntlas>	dup SIZEV - ( over <? )( dup @ invmorton2d yc + swap xc + swap line 24 + ) 2drop ;

:showshot
	show clrscr
		pick2 pick2 pick2
		"act:%h quad:%h oct:%d " print cr
		pntlas> 'puntos - 24 / "%d vertices total " print cr

		cr
		dumpprev
		cr
		dumpoct

		'exit >esc<
		cminiflecha ;

|********* DUMP ***********

|--------------
| algo 2
| si es hoja de quadtree, pintar el punto del color del octree
| si es hoja del octree, pintar el quadtree del color del octree
|
| si los 8 vertices estan en un cuadrante..dividir quadtree
| sino dividir el octree y otravez
| --

:setxymorton | morton --
	256 >r
	2 9 pick2 24 >> - 1- 2* << | mask	| 9 es quadsize
	xc yc rot 		| morton x y mask
	( 1? )( | morton x y mask
		pick3 and? ( rot r + rot rot ) 2/
		pick3 and? ( swap r + swap ) 2/
		r> 2/ >r )
	rdrop
	drop rot drop
	setxy ;

:fillquad | oct qua noct bit child 'oct -- oct qua noct bit
	octre - pixels + @  | getcolor
	pick3 | setqbuffer
	1 over 24 >> <<
	swap setxymorton | color size --
	dup ( 1? )( 1-
		over ( 1? )( 1-
			pick3 px!+
			) drop
		sw pick2 - px+!
		) 3drop ;

:fillpoint | oct qua --
	| setqbuffer
	setxymorton
	octre - pixels + @
	px!+ ;

|-------------------------------
:m3dto2d-child | oct qua noct bit child mask -- oct qua noct bit
	swap pushchild
	1- over and popcnt 2 << pick2 +	| oct qua noct bit child 'oct
	pixels >=? ( fillquad ; )			| ....si es ultimo llena quad
	pick3 								| qua oct noct bit |oct' qua'
:m3dto2d | oct qua --
	( mort8pnt 1? )( 1-
		adv8pnt
		$1000000 - $ff000000 and or
		$ff000000 nand? ( fillpoint ; )	| si es punto..pinta
		) drop
	over @ dup | oct qua nodo nodo
	8 >> 2 << octre + swap $ff and 			|  oct qua noct bit

	dmask $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

|	pick2 getqbuffer 1? ( nip 4drop ; )( drop )

	dmask 4 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 8 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 12 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 16 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 20 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 24 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )

	dmask 28 >> $7 and 1 over <<
	pick2 and? ( m3dto2d-child popchild )( 2drop )
	4drop ;

| morton d mx x my y

:getxy | adr -- x y
	dup 12 + @ swap
	dup 20 + @ swap
	4+ @
	swap over c9 >r c9 xc + r> yc +
	;

:drawpnt
	pntlas> dup 24 - getxy op
	dup SIZEV -
	( over <? )(
		dup getxy line
		24 + ) 2drop ;

:octquad | oct x y z --
	pntini mort8pntf
|	$9000000	| level(8)-morton(24)
|	m3dto2d
	drop ;
:ll
	verde drawpnt dumpoct
	0 pushchild mort8pntf
	rojo drawpnt dumpoct
	7 pushchild mort8pntf
	azul drawpnt dumpoct
	blanco
	;

|---------------------------------------------------------
| size x y z octre Mx My morton
|
:dumppnt
	'puntos ( pntlas> <? )(
		@+ "s:%d " print
		@+ "x:%d " print
		@+ "y:%d " print
		@+ "z:%d " print
		@+ "o:%h " print
		cr
		) drop ;

:drawbox | adr --
	dup 12 + @ | adr z
	over 4 + @ over c9 xc + | adr z X
	pick2 8 + @ pick2 c9 yc + | adr z X Y
	pick3 @ pick3 c9 256 - | adr z X Y R
	box
	2drop
	;

|-----------------------------------


#x1 #y1 #x2 #y2
:calcbox1
	'puntos 4+ >r r@+ r@+ r@+ rdrop
	pick2 pick2 pick2 0 idmov getxyd 2dup 'y1 ! 'x1 ! 'y2 ! 'x2 !
	8 ( 1? )( 1-
		pick3 pick3 pick3 pick3 idmov getxyd
		y1 <? ( dup 'y1 ! ) y2 >? ( dup 'y2 ! ) drop
		x1 <? ( dup 'x1 ! ) x2 >? ( dup 'x2 ! ) drop
		) drop
	3drop
	x1 y1 x2 y2 caja
	;


:calcbox2
	'puntos 4+ >r r@+ r@+ r@+ rdrop

	pick2 pick2 pick2 0 idmov getxyd
	dup 'ymin ! 'ymax ! dup 'xmin ! 'xmax !
	0 dup dup dup 'vy1 ! 'vy2 ! 'vx1 ! 'vx2 !
	1 ( 8 <? )(
		pick3 pick3 pick3 pick3 idmov getxyd
		ymin <? ( dup 'ymin ! pick2 'vy1 ! )
		ymax >? ( dup 'ymax ! pick2 'vy2 ! ) drop
		xmin <? ( dup 'xmin ! over 'vx1 ! )
		xmax >? ( dup 'xmax ! over 'vx2 ! ) drop
		1+ ) drop
	rdrop

	pick2 pick2 pick2 vx1 idmov getxyd drop 'x1 !
	pick2 pick2 pick2 vx2 idmov getxyd drop 'x2 !
	pick2 pick2 pick2 vy1 idmov getxyd nip 'y1 !
	pick2 pick2 pick2 vy2 idmov getxyd nip 'y2 !
	3drop
	x1 y1 x2 y2 caja

	;

:drawboxf
	'puntos 4+ >r r@+ r@+ r@+ rdrop
	pick2 pick2 pick2 0 idmov getxyd op
	pick2 pick2 pick2 1 idmov getxyd line
	pick2 pick2 pick2 3 idmov getxyd line
	pick2 pick2 pick2 2 idmov getxyd line
	pick2 pick2 pick2 0 idmov getxyd line
	pick2 pick2 pick2 4 idmov getxyd line
	pick2 pick2 pick2 5 idmov getxyd line
	pick2 pick2 pick2 7 idmov getxyd line
	pick2 pick2 pick2 6 idmov getxyd line
	pick2 pick2 pick2 4 idmov getxyd line

	3drop
	;

:octobox
	'puntos >r
	2048 r!+ rot r!+ swap r!+ r!+ r!+
	r> 'pntlas> !
	cyan
	calcbox1
	verde
|	calcbox2
	drawboxf
	;

|---------------- searchpoint
:viewchildm | node bit nro -- node bit
	$7 xor	| de atras para adelante
	dup place pick2 nand? ( 2drop ; ) | x y z node bit bitc
	1- pick2 and popcnt 2 << pick3 +
	>r >r pick4 pick4 pick4 r> idmovn r>

	| ;; recursion !!

|	level 7 >? ( drop drawpoint ; ) drop
	pixels >? ( drawpoint ; )

:search | node --

	1 'level +!
	@ dup 8 >> 2 << octre + swap $ff and | x y z adr bitmask

	dmask $7 and viewchildm
	dmask 4 >> $7 and viewchildm
	dmask 8 >> $7 and viewchildm
	dmask 12 >> $7 and viewchildm
	dmask 16 >> $7 and viewchildm
	dmask 20 >> $7 and viewchildm
	dmask 24 >> $7 and viewchildm
	dmask 28 >> $7 and viewchildm

	nip 4drop
	-1 'level +! ;


:searchpoint | y x -- y x color
	2dup xor

|	octre search
	;

:renderwin | x y --
	setxy
 	0 ( 512 <? )(
	 	0 ( 512 <? )(
			searchpoint px!+
			1+ ) drop
		sw 512 - px+!
		1+ ) drop ;


|-------------- orden segun vista
#maskc
$4152637	$15043726	$26370415	$37261504	$40516273	$51407362	$62734051	$73625140
$4216537	$15307426	$26034715	$37152604	$40625173	$51743062	$62470351	$73516240
$1234567	$10352476	$23016745	$32107654	$45670123	$54761032	$67452301	$76543210
$1452367	$10534276	$23670145	$32716054	$45016723	$54107632	$67234501	$76325410
$2461357	$13570246	$20634175	$31725064	$46052713	$57134602	$64207531	$75316420
$2134657	$13025746	$20316475	$31207564	$46570213	$57461302	$64725031	$75643120

|-------
:maskabs | ax ay az -- mask
	| ax ay az
	pick2 <? ( over <? ( | x<z && y<z
			drop <? ( 0 )( 8 )
			nip ; ) )
	rot | ay az ax
	pick2 <? ( over <? ( | y<x && z<x
			drop <? ( 16 )( 24 )
			nip ; ) )
	<? ( 32 )( 40 )
	nip nip ;

:calcmask
	matinv
	0 0 1.0 transform
	rot +? ( 1 )( 0 ) >r abs
	rot +? ( 2 r+ ) abs
	rot +? ( 4 r+ ) abs
	maskabs r> or
	2 << 'maskc + @ 'dmask !
	;

|--------------------------
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx mroty ;

|--------------------------
:main
	"media/3do/luigio.3do" load3do

	sh 2/ 256 - 'yc !
	sw 2/ 256 - 'xc !
	33
	show clrscr
		verde
|		dup "%d " print cr
		pick2 pick2 pick2 "%d %d %d" print cr

		vy2 vx2 vy1 vx1 "%d %d %d %d " print cr

		cr
		omode
		freelook

|		msec 3 << mrotxi
|		msec 4 << mrotyi


		fillrotvec
		viewrot

		calcmask

|		octre xcam ycam zcam octquad
		octre xcam ycam zcam octobox

|		xc yc renderwin

    	drawpixels

		0 'level ! xcam ycam zcam octre viewom

		[ -0.025 'zcam +! ; ] <up>
		[ 0.025 'zcam +! ; ] <dn>
		[ -0.025 'xcam +! ; ] <le>
		[ 0.025 'xcam +! ; ] <ri>
		[ -0.025 'ycam +! ; ] <pgup>
		[ 0.025 'ycam +! ; ] <pgdn>

		'exit >esc<
		cminiflecha
		;

: mark main ;

