| MC 2013
| -------
| move whole canvas, or object under the mouse when there is one
| rename words

^r4/lib/gui.txt
^r4/lib/math.txt
^r4/lib/graf.txt
^r4/lib/rfont.txt
^r4/lib/formkit.txt
^inc/rft/robotoregular.rft

| objects :         nobjs, [ x, y, len, chars ] * nobjs

#selected -1
#objs )( 10000
#pad 4
#buffer )( 64
#xdrag #ydrag #dragging? 0 #dx 0 #dy 0

:s!+ | ( mem val -- mem+4 )
swap !+ ;

:dummy.data
	5 'objs !+
	200 s!+ 110 s!+ 3 s!+ "abc" swap strcpyl
	300 s!+ 410 s!+ 6 s!+ "123456" swap strcpyl
	600 s!+ 410 s!+ 8 s!+ "________" swap strcpyl
	20  s!+ 410 s!+ 2 s!+ "mM" swap strcpyl
	230 s!+ 510 s!+ 27 s!+ "A longer string -_98+mMjJkK" swap strcpyl ;
|       x       y       len   str

:next.obj | ( mem -- mem.next ) returns pointer to next object
8 + dup @ 1+ 4 + + ;

:get.ptr | ( obj.num -- ptr.mem )
'objs 4 + >r 1- ( +? )( r> next.obj >r 1- ) drop r> ;

:load.objs | ( -- )
'objs "mem/todo.mem" load drop ;

:save.objs | ( -- )
dummy.data 'objs 10000 "mem/todo.mem" save ;

:rot- | ( a b c -- c a b )
rot rot ;

:4dup | ( a b c d -- a b c d a b c d )
pick3 pick3 pick3 pick3 ;

:add.padding | ( h w x y -- hh ww xx yy )
pad neg dup 2dtrans 2swap pad 2* dup 2dtrans 2swap ;

:debug 
dup rojo "[%d]" print ;

:getxy.dragging 
dragging? 0? ( xymouse dy - swap dx - swap 'ydrag ! 'xdrag ! ) drop ;

:updatedxdy 
dragging? 1? ( xymouse ydrag - 'dy ! xdrag - 'dx ! ) drop ;

:pcr print cr ;

:i@+ | ( mem -- @mem mem+4 )
@+ swap ;

:get.xy | ( n -- x y )
get.ptr i@+ @  ;

:ini.dx.dy 
0 dup 'dx ! 'dy ! ;

:update.x.y | ( n -- )
dup >r get.xy dx dy 2dtrans swap r> get.ptr !+ ! xymouse 'ydrag ! 'xdrag ! ;

:dragging 
selected +? ( dragging? 0? ( getxy.dragging ) drop updatedxdy selected update.x.y ) drop ;

:handle.mouse 
negro xymouse swap "[ %d , %d ]" pcr bmouse 1? ( dragging 1 )( ini.dx.dy 0 -1 'selected ! ) 'dragging? ! drop ;

:calc.wh | ( str -- w h )
sizeprint nip cch ;

:n.objs | ( -- nobjs )
'objs @ ;

:draw | ( x y str ** )
>r 2dup r calc.wh 2swap add.padding 4dup vfill negro rect atxy r> print ;

:get.str | ( n -- mem )
get.ptr 12 + ;

:get.obj.attr | ( n -- x y str ) returns attributes of object #n 
get.ptr i@+ i@+ 4 + ;

:draw.obj | ( n -- )
get.obj.attr draw ;

:draw.list.objs | ( -- )
n.objs ( +? )( dup amarillo selected =? ( oscuro ) draw.obj 1- ) drop ;

:txtin 
azul 'buffer 64 input ;

:screen.setup 
$cccccc paper robotoregular 0.05 %s rfont! rojo 'exit "Exit" 1 menur
sp sp negro debug cr cr handle.mouse cr cr ;

| change wh xy to xy wh ?
:get.wh.xy | ( n -- w h x y )
dup get.str calc.wh rot get.xy ;

| should be ( w h x y -- 0/1 )
| use binary vars and AND them
:mouse.over.obj?  | ( n -- 0/1 )
get.wh.xy 2dup xymouse 2<=? 0 =? ( drop 4drop 0 )( drop 2dtrans xymouse 2>=? 1 =? ( drop 1 )( drop 0 ) ) ;

:selected.object  | returns first object under the mouse
n.objs ( +? )( dup mouse.over.obj? 1 =? ( drop 'selected ! ; )( drop ) 1- ) drop -1 'selected ! ;

:edit.objs
	screen.setup
	0 'buffer !
	show clrscr
	     screen.setup txtin
	     amarillo 360 560 'buffer draw
	     draw.list.objs
	     dragging? 0 =? ( selected -1 =? ( selected.object ) drop ) drop
	     50 150 atxy selected ">   %d" pcr
	     cminiflecha
	     'exit >esc< ;

: save.objs | <---------- make sure new format is used, to be removed.....
  load.objs 33 edit.objs save.objs ;
