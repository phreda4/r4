
^r4/lib/gui.txt
^r4/lib/graf.txt
^r4/lib/fonti.txt
^r4/lib/formkit.txt

|one object: 
| n, [ x, y, w, h, 64 chars ] *

#objs )( 10000
#pad 4 
#buffer )( 64
#xdrag #ydrag  | keep mouse position when first clicked
#dragging? 0
#dx 0 #dy 0 
#dummy "1234567890123456789012345678901234567890123456789012345678901234"

:s!+ swap !+ ;

:translate | ( x y dx dy | x+dx y+dy )
	   pick2 + >r nip + r> ;

:dummy.data
	4 'objs !+
|       str                 w       h      x       y
	'dummy swap strcpyl 512 s!+ 10 s!+ 200 s!+ 110 s!+ 
	'dummy swap strcpyl 512 s!+ 10 s!+ 150 s!+ 238 s!+
	'dummy swap strcpyl 512 s!+ 10 s!+ 250 s!+ 330 s!+ 
	'dummy swap strcpyl 512 s!+ 10 s!+ 350 s!+ 485 swap ! ;

:load.objs | ( -- )
	   'objs "mem/todo.mem" load drop ;

:save.objs | ( -- )
	   dummy.data
	   'objs 10000 "mem/todo.mem" save ;

:rot- | ( a b c -- c a b )
      rot rot ;

:add.padding | ( h w x y -- hh ww xx yy )
	     pad - swap pad - swap
	     2swap
	     pad 2* + swap pad 2* + swap
	     2swap ;

:rect | ancho alto x y --
        2swap >r >r
        2dup op over r> + over 2dup line r + line
        2dup r> + line line ;

:4dup | ( a b c d -- a b c d a b c d )
      pick3 pick3 pick3 pick3 ;

:clip.xy | ( x y -- x' y')
      1 max swap 1 max swap ;

:debug dup rojo "[%d]" print ;

:getxy.dragging
	dragging? 0? ( xymouse dy - swap dx - swap 'ydrag ! 'xdrag ! ) drop ;

:updatedxdy
	dragging? 1? ( xymouse ydrag - 'dy ! xdrag - 'dx ! ) drop ;

:pcr print cr ;

:dragging getxy.dragging updatedxdy ;

:handle.mouse
	   negro xymouse swap "[ %d , %d ]" pcr
	   bmouse 1? ( dragging 1 )( 0 ) 'dragging? ! drop ;

:n.objs 'objs @ ;

:get.ptr | ( n -- mem )
	 1- 81 * 4 + 'objs + ;

| -----------------------------------------------

:draw | ( str w h x y ** )
	dx dy translate clip.xy
	2dup >r >r amarillo add.padding vfill r> r> atxy negro print ;

:i@+ | ( mem -- @mem mem+4 )
	@+ swap ;

:get.xy | ( mem -- x y )
	i@+ @  ;

:get.wh | ( mem -- w h mem' )
	i@+ i@+ ;

:get.str | ( mem -- mem mem+64 )
	 dup 65 + ;

:get.obj.attr | ( mem -- x y w h str )
	get.str get.wh get.xy ;

:draw.obj | ( n -- )
	    get.ptr get.obj.attr draw ;

:draw.list.objs | ( -- )
		n.objs ( +? )( dup draw.obj 1- ) drop ;

| -----------------------------------------------

:txtin
	azul 'buffer 64 input ;

:screen.setup
    $cccccc paper fonti
    rojo 'exit "Exit" 4 menur sp sp
    negro debug cr cr
    handle.mouse cr cr ;

:edit.objs
	screen.setup
	0 'buffer !
	show clrscr
	     screen.setup txtin

	     'buffer 512 10 300 300 draw

	     draw.list.objs 
	     cminiflecha
	     'exit >esc< ;

: load.objs 33 edit.objs save.objs ;
