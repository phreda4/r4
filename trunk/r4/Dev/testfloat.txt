^r4/lib/gui.txt

:fx>f | m e s -- f
	$80000000 and swap $7f + rot | s e m
	0? ( nip 0 swap ) 
	$7fffff and 		| m
	swap			| s m e
	1 <? ( 1- ( swap 2/ swap 1+ 1? ) )
	$fe >? ( 2drop 0 $ff )
	swap
	$7fffff and
	swap 23 << or or ;


:f>fx | f -- m e s
	dup $80000000 and swap
	dup $7f800000 and 23 >> $7f - swap | s e m
	$7fffff and 
	swap	| s m e
	-$7f >? ( swap $800000 or swap rot ; ) 
	swap 0? ( swap rot ; )
	( 2* $800000 nand? )( swap 1- swap ) 
	swap rot ;

:S>F | d -- f  
	0? ( -127 0  )( | e = -127, s = 0
	DUP $80000000 AND >R | sign 
	DUP -? ( NEG ) 
	31 >R ( DUP 0 >? )( 2* R> 1- >R ) | normleft 
	8 >> R> | mantissa, exponent
	R> | sign 
	) | m e s = fx 
	FX>F ; 

:f>fix | float -- fix
	f>fx >r
	23 - 16 +
	| falta manejo de numeros mas grandes!!!
	+? ( << )( neg >> )
	r> 0? ( drop )( drop neg )
	;

:fix>f | fix -- float
	0? ( ; ) 
	DUP $80000000 AND >R | sign 
	-? ( NEG ) 
	0 r> fx>f ;
:a	 
	31 >R ( DUP 0 >? )( 2* R> 1- >R ) | normleft 
	8 >> R> | mantissa, exponent
	R> | sign 
	fx>f
	;	
#test
$3f800000 | = 1
$c0000000 | = -2
$7f7fffff | .. 3.4028234 × 1038  (max single precision)
$80000000 | = -0
$7f800000 | = infinity
$ff800000 | = -infinity
$3eaaaaab | .. 1/3
$00000000 | = 0

:test1 | nro --
	dup "%h -> " print
	dup f>fx 31 >> "s:%h e:%d M:%h " print
	f>fix " %f" print
	cr
	;


:main
	33 verde
	show clrscr	
		dup "%d" print cr

		'test ( @+ 1? )( test1 ) test1
		drop
		cr
		1.0 fix>f "%h = $3f800000" print cr
		-2.0 fix>f "%h = $c0000000" print cr
		0.3333 fix>f "%h = $3eaaaaab" print cr
		0 fix>f "%h = $0" print cr
		
		'exit >esc< ;
: main ;