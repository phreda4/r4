^r4/lib/gui.txt
^r4/lib/parse.txt
^r4/lib/trace.txt

|--------- format fuente
| en 32 bits
#yp #xp
:a0 drop ; | el valor no puede ser 0
:a1 xp $80000000 <>? ( yp pline )( drop )
	gc>xy 2dup 'yp !+ ! op ;  | punto
:a2 gc>xy pline ; | linea
:a3 swap >r gc>xy r@+ gc>xy pcurve r> ;  | curva
:a4 swap >r gc>xy r@+ gc>xy r@+ gc>xy pcurve3 r> ; | curva3
:a5 drop xp yp pline $80000000 'xp ! ;

#gfont a0 a1 a2 a3 a4 a5 0 0 0 0 0 0 0 0 0 0

:drawrf | 'rf --
	0? ( drop ; )
	$80000000 'xp !
	( @+ 1? )( dup $f and 2 << 'gfont + @ exec ) drop
	a5 poli ;


:dumprf | 'rf
	$80000000 'xp !
	( @+ 1? )( "%h " allowcr print ) 2drop
	cr
	;

|---------------------------------------------------
#xml
#$xml
#inidec
#decode

#advx
#unic

#finfo )( $ffff
#funic )( $ffff
#findex )( $ffff
#findex> 'findex

#unitspe
#ascent
#descent

:,dec | nro --
	decode !+ 'decode ! ;
:+ind
	advx findex> 'findex - 'finfo + !
	unic findex> 'findex - 'funic + !
	decode findex> !+ 'findex> ! ;

:]ind
	2 << 'findex + @ ;

:]unic
	2 << 'funic + @ ;

:]info
	2 << 'finfo + @ ;

|------------------ PARSE
:=p | s1 s2 -- 1/0
	( c@+ 1? )( rot c@+ rot - 1? ( 3drop 0 ; ) drop swap ) 3drop 1 ;

:find | adr "texto" -- adr'
	( 2dup =p 0? )( drop swap 1+ $xml >? ( 2drop 0 ; ) swap ) 2drop ;

|------------------ NRO
:signo | str -- str signo
	dup c@
	$2c =? ( drop 1+ dup c@ )
	$2b =? ( drop 1+ 0 ; )	| + $2b
	$2d =? ( drop 1+ 1 ; )	| - $2d
	drop 0 ;

#f | fraccion

:getfrac | nro adr' char -- nro adr' char
	drop
	0 swap | nro 0 adr'
	( c@+ $2f >? )(
			$39 >? ( rot 'f ! ; )
			$30 - rot 10* + swap )
	rot 'f ! ;

::getnro | adr -- adr' nro
	trim
	signo
	over c@ 33 <? ( 2drop 1- 0 ; ) | caso + y - solos
	swap  1? ( [ neg ; ] >r ) drop
	drop
	0 swap ( c@+ $2f >? )(	| 0 adr car
		$39 >? ( drop 1- swap ; )			| 0..9
		$30 - rot 10* + swap )
	$2e =? ( getfrac )
	drop 1- swap ;

|----------------------SVG path-----------------------
#sx $100 #sy $100
#x1 #y1
#x2 #y2
#x3 #y3

:moveto | adr -- adr' ; XY
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 1 or ,dec ;
:movetor | adr -- adr' ; xy
	getnro 'x1 +!
	getnro 'y1 +!
	x1 y1 xy>gc 1 or ,dec ;
:lineto | adr -- adr' ; XY
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 2 or ,dec ;
:linetor | adr -- adr' ; xy
	getnro 'x1 +!
	getnro 'y1 +!
	x1 y1 xy>gc 2 or ,dec ;
:hori | adr -- adr' ; X
	getnro 'x1 !
	x1 y1 xy>gc 2 or ,dec ;
:horir | adr -- adr' ; X
	getnro 'x1 +!
	x1 y1 xy>gc 2 or ,dec ;
:vert | adr -- adr' ; Y
	getnro 'y1 !
	x1 y1 xy>gc 2 or ,dec ;
:vertr | adr -- adr' ; Y
	getnro 'y1 +!
	x1 y1 xy>gc 2 or ,dec ;
:ccurve | adr -- adr' ; XYXYXY
	getnro 'x3 !
	getnro 'y3 !
	getnro 'x2 !
	getnro 'y2 !
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 4 or ,dec
	x2 y2 xy>gc 4 or ,dec
	x3 y3 xy>gc 4 or ,dec
	;
:ccurver | adr -- adr' ; XYXYXY
	getnro x1 + 'x3 !
	getnro y1 + 'y3 !
	getnro x1 + 'x2 !
	getnro y1 + 'y2 !
	getnro x1 + 'x1 !
	getnro y1 + 'y1 !
	x1 y1 xy>gc 4 or ,dec
	x2 y2 xy>gc 4 or ,dec
	x3 y3 xy>gc 4 or ,dec
	;

:surve | adr -- adr' ; XYXY
	x1 2* x2 - 'x3 !
	y1 2* y2 - 'y3 !
	getnro 'x2 !
	getnro 'y2 !
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 4 or ,dec
	x2 y2 xy>gc 4 or ,dec
	x3 y3 xy>gc 4 or ,dec
	;
:surver | adr -- adr' ; XYXY
	x1 2* x2 - 'x3 !
	y1 2* y2 - 'y3 !
	getnro x1 + 'x2 !
	getnro y1 + 'y2 !
	getnro x1 + 'x1 !
	getnro y1 + 'y1 !
	x1 y1 xy>gc 4 or ,dec
	x2 y2 xy>gc 4 or ,dec
	x3 y3 xy>gc 4 or ,dec
	;

:qurve | adr -- adr' ; XYXY
	getnro 'x2 !
	getnro 'y2 !
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 3 or ,dec
	x2 y2 xy>gc 3 or ,dec
	;
:qurver | adr -- adr' ; XYXY
	getnro x1 + 'x2 !
	getnro y1 + 'y2 !
	getnro x1 + 'x1 !
	getnro y1 + 'y1 !
	x1 y1 xy>gc 3 or ,dec
	x2 y2 xy>gc 3 or ,dec
	;

:turve | adr -- adr' ; XY
	x1 2* x2 - 'x2 !
	y1 2* y2 - 'y2 !
	getnro 'x1 !
	getnro 'y1 !
	x1 y1 xy>gc 3 or ,dec
	x2 y2 xy>gc 3 or ,dec
	;
:turver | adr -- adr' ; XY
	x1 2* x2 - 'x2 !
	y1 2* y2 - 'y2 !
	getnro x1 + 'x1 !
	getnro y1 + 'y1 !
	x1 y1 xy>gc 3 or ,dec
	x2 y2 xy>gc 3 or ,dec
	;

:ellip | adr -- adr' ; XY
:ellipr
	getnro 'x1 !
	getnro 'y1 !
	getnro 'x1 !
	getnro 'y1 !
	getnro 'x1 !
	getnro 'y1 !
	;
:close | adr -- adr'
|	dup c@ "**%k" print redraw
|	trace
	5 ,dec
	;

:resolve | adr char -- adr'
	$4d =? ( drop moveto ; )	| M move
	$6d =? ( drop movetor ; )	| m move rel
	$4c =? ( drop lineto ; )	| L lineto
	$6c =? ( drop linetor ; )	| l lineto rel
	$48 =? ( drop hori ; )		| H
	$68 =? ( drop horir ; )		|h
	$56 =? ( drop vert ; )		|V
	$76 =? ( drop vertr ; )		|v
	$43 =? ( drop ccurve ; )		|C
	$63 =? ( drop ccurver ; )	|c
	$53 =? ( drop surve ; )		| S
	$73 =? ( drop surver ; )	| s
	$51 =? ( drop qurve ; ) 	| Q curve
	$71 =? ( drop qurver ; )	| q curve rel
	$54 =? ( drop turve ; )		| T
	$74 =? ( drop turver ; )	| t
	$41 =? ( drop ellip ; )		| A
	$61 =? ( drop ellipr ; )	| a
	$5a =? ( drop close ; )		| Z
	$7a =? ( drop close ; )		| z
	"**%k" print redraw
	;

:encode | adr -- adr'
	redraw
	( trim c@+ 0? ( drop 1- ; )
		$22 <>? )( resolve ) drop  ;

:endchar
	decode 4 - @
	$f and 5 =? ( -4 'decode +! ) drop
    0 ,dec ;

:widthgc | width -- v
	w 14 <</ ;

:propchar | adr -- adr'
	dup "horiz-adv-x=" find 1? ( 13 + getnro widthgc 'advx ! )
	drop
	dup "unicode=" find 1? ( 9 + dup 'unic ! )
	drop ;


:findglyp | adr -- adr'
	0? ( ; )

	"<glyph " find 0? ( ; )
	propchar
	dup "d=" find 0? ( nip ; )
	swap "/>" find 0? ( nip ; )    | d= />
	over <? ( nip ; ) | no tiene d=
	drop |
	3 +
	+ind
	encode
	endchar ;

#minx
#miny
#maxx
#maxy
#xe #ye

:bbox
	dup "bbox=" find 0? ( drop ; )
	6 +
	getnro 1- 'minx !
	getnro 1- 'miny !
	getnro 1+ 'maxx !
	getnro 1+ 'maxy !
	drop
	maxx minx - 40 + maxy miny - 40 + neg dim
	minx maxx + 2/ miny maxy + 2/
	over w 14 <</ neg 'xe !
	dup h 14 <</ neg 'ye ! | 0 0 es el origen de la letra
	pos
	;

:convertfont | adr --
    "<font-face" find
	"units-per-em=" find
	14 + getnro 'unitspe !
	"ascent=" find
	8 + getnro 'ascent !
	"descent=" find
	9 + getnro 'descent !
	unitspe 2/ dup ascent descent + 2 >> - pos
|	unitspe 2/ ascent descent + 2/ pos
	unitspe dup neg dim
	bbox
	( 1? )( findglyp ) drop ;

#pagina
:main
	clrscr
	xml convertfont
	33
	show clrscr
		dup "%d" print cr

		descent ascent unitspe "U:%d A:%d D:%d" print cr
		maxy miny maxx miny "mX:%d MX:%d mY:%d MY:%d " print 
		ye xe "Ox:%d Oy:%d" print cr
		decode inidec - "TAMAÑO: %d bytes " print
		findex> 'findex - 2 >> "CANTIDAD: %d" print cr

		pagina "Actual: %d " print cr
		pagina ]unic c@
		pagina ]info "info:%d unic:%k " print cr
		blanco
		0 0 fpos
		400 cubo
		gc.box
		pagina ]ind drawrf

		rojo
		xe w 14 *>> xc +
		ye h 14 *>> yc +
		2dup op
		over pagina ]info w 14 *>> + over line
		verde
		4 cruz

		[ 1 'pagina +! ; ] <ri>
		[ -1 'pagina +! ; ] <le>

		[ 8 'pagina +! ; ] <dn>
		[ -8 'pagina +! pagina -? ( 0 'pagina ! ) drop ; ] <up>

		'exit >esc<
	;
:me
	mark
	here dup 'xml !
|	"media/svg/fontawesomewebfont.svg"
|	"media/svg/gooddog.svg"
	"media/svg/robotobold.svg"
	load dup '$xml !
	0 swap !+
	dup 'inidec !
	'decode !
	;

: me main ;