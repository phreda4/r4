| genera octree de lista ordenada de morton vertices
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/fontj.txt
^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/bsearch.txt
^r4/lib/morton.txt

#horse 0 0	| 3dm file 'adr cnt

#xcam 0 #ycam 0 #zcam 2048
#xmin #ymin #zmin #xmax #ymax #zmax

:load3dm | "" 'var --
	>r here dup r !
	swap load dup 'here !
	r@+ - 3 >> r> !
	;

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

#nodoa 0

:drawpc | '3do --
	@+ >r @
	( 1? )( 1-
		r nodoa =? ( blanco )( azul ) drop
		r@+ invmorton3d drawp
		4 r+ ) drop
	rdrop ;


:drawp2
	project3d
	2dup op
	over 1+ over line
	over 1+ over 1+ line
	over over 1+ line
	line ;

:drawpcf | '3do --
	@+ >r @
	( 1? )( 1-
		r@+ r@+ ink
		invmorton3d drawp2
		) drop
	rdrop ;

:3dop project3d op ;
:3dline project3d line ;

|-------- dibujo octree
#xc #yc #zc
#size

:drawz | z --
	xc size - yc size - pick2 3dop
	xc size + yc size - pick2 3dline
	xc size + yc size + pick2 3dline
	xc size - yc size + pick2 3dline
	xc size - yc size - rot 3dline ;

:drawl | x1 x2 --
	2dup zc size - 3dop zc size + 3dline ;

:box3d
	zc size - drawz zc size + drawz
	xc size - yc size - drawl xc size + yc size - drawl
	xc size + yc size + drawl xc size - yc size + drawl ;

|-------------- muestra oc de 1 punto
:+movx
	1 and? ( size )( size neg ) 'xc +!
	2 and? ( size )( size neg ) 'yc +!
	4 and? ( size )( size neg ) 'zc +!
	drop ;

:drawtree | nro shift --
	size 2/ 'size !
	2dup >> $7 and | nro shift val
	+movx box3d
	3 - 0? ( 2drop ; )
	drawtree ;

:showpoint | adr --
	0? ( drop ; ) @
	0 'xc ! 0 'yc ! 0 'zc !
	$1ff 'size ! box3d
	27 drawtree ;



|------------ construye octree
#inisor | inicio de puntos ordenados
#vertices | cantida

#octre
#octre>

#arroc )( $ffffff | array de nodos
#arroc> 'arroc
#arroc< 'arroc

#indexoc | indice actual

#octomas 0 0 0 0 0 0 0 0

|---------- arreglo circular
:cntoc | -- cnt
	arroc< arroc> - ;

:pushoc | shift ini fin --
	arroc> 'arroc> 12 - >=? ( 'arroc nip )
	!+ !+ !+ 'arroc> !
	1 'indexoc +! ;

:getoc | -- fin ini ahift
	arroc< 'arroc> 12 - >=? ( 'arroc nip )
	>r r@+ r@+ r@+ r> 'arroc< ! ;

|--------------------------
:,oc | val --
	octre> !+ 'octre> ! ;

:fillmass | fin ini shift --
	0 0 0 0 0 0 0 0 'octomas
	!+ !+ !+ !+ !+ !+ !+ !
	pick2 3 << inisor +
	pick2 3 << inisor +
	( over <? )( | fin ini shift fina nowa
		@+ pick3 | mask fina nowa morton
		>> $7 and 2 << 'octomas +
		1 swap +!
		4+ )
	2drop ;

:buildbit | -- 8bitchild
	0 'octomas $1
	( $ff and 1? )(
		swap @+ 1? ( drop rot pick2 or rot rot )( drop )
		swap 2* ) 2drop ;

:buildnext
	getoc				| fin ini shift
	fillmass rot drop	| ini shift
	3 - -? ( 2drop $ff00 ,oc ; )
	buildbit						| ini shift bitmask
	| si es 0 no lo agrego en el anterior nivel

|----	calculo de primer hijo
	indexoc 		| absoluto
	|octre> octre - 2 >> - | relativo
	8 <<
	over or
	pick2 0? ( drop $80000000 or )( drop )
	,oc		| graba nodo interno
	over 0? ( 4drop ; ) drop
	'octomas >r				| ini shift bit
	rot dup r@+ + rot 		| shift ini fin bitmask
	( 1? )(
		1 and? ( pick3 pick3 pick3 pushoc )
		rot drop
		swap dup r@+ +		| shift bitmask ini fin
		rot 2/ ) rdrop
	4drop ;

:buildoctree | 'lista --
	@+ 'inisor ! @ 'vertices !
	here 'octre !
	octre 'octre> !	| mem de nodos
	0 'indexoc !
	'arroc  dup 'arroc> ! 'arroc< !	| array de nodos
	27 0 vertices pushoc
	( cntoc 1? )( drop
		buildnext
		) drop
	octre> 'here !
	;

|--------------- build2

:buildnext2
	getoc				| fin ini shift
	fillmass rot drop	| ini shift
	4 - -? ( 2drop 0 ,oc ; )
	buildbit						| ini shift bitmask
	| si es 0 no lo agrego en el anterior nivel

|----	calculo de primer hijo
	indexoc 		| absoluto
	|octre> octre - 2 >> - | relativo
	8 <<
	over or
	pick2 0? ( drop $80000000 or )( drop )
	,oc		| graba nodo interno
	over 0? ( 4drop ; ) drop
	'octomas >r				| ini shift bit
	rot dup r@+ + rot 		| shift ini fin bitmask
	( 1? )(
		1 and? ( pick3 pick3 pick3 pushoc )
		rot drop
		swap dup r@+ +		| shift bitmask ini fin
		rot 2/ ) rdrop
	4drop ;

:buildoctree2 | 'lista --
	@+ 'inisor ! @ 'vertices !
	here 'octre !
	octre 'octre> !	| mem de nodos
	0 'indexoc !
	'arroc  dup 'arroc> ! 'arroc< !	| array de nodos
	27 0 vertices pushoc
	( cntoc 1? )( drop
		buildnext2
		) drop
	octre> 'here !
	;

:savetxt
	mark
	octre ( octre> <? )(
		@+ "%h" ,print ,cr
		) drop
	"octree.txt" savemem
	empty
	;

:saveoct
	savetxt
	octre octre> over - "media/3do/bunny.3do" save
	;

:saveoct2
	savetxt
	octre octre> over - "media/3do/dragon.foc" save
	;

|-----------------------------
:flecha
	blanco
	1500 0 0 3dop 1000 0 0 3dline
	1050 50 0 3dline 1000 0 0 3dline 1050 -50 0 3dline ;

|--------------------------
:main
|	"media/3dm/bunny.3dm" 'horse load3dm
|	"media/3dm/xyzrgb_statuette.3dm" 'horse load3dm
	"media/3dm/dragon.3dm" 'horse load3dm

	4
	show clrscr verde
		dup ":r%d " print cr
		vertices 3 << "%d " print cr
		octre> octre -  "%d " print
|		octre ( octre> <? )( dup octre - 2 >> "%h." print @+ "%h " print cr allowchome ) drop

		azul
|		cflecha

		omode
		freelook
		xcam ycam zcam mtrans

|		cyan draw3dnorm
		azul nodoa showpoint
		'horse drawpc


		azul

		[ nodoa 0? ( horse nip )( 8 + ) 'nodoa ! ; ] <le>
		[ nodoa 0? ( horse nip )( 8 + ) 'nodoa ! ; ] <ri>

		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		[ 'horse buildoctree saveoct ; ] <f1>
		[ 'horse buildoctree2 saveoct2 ; ] <f2>

		'exit >esc< ;

: mark main ;
