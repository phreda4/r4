| linea c/antialiasing
| algoritmo de Wu

^r4/lib/gui.txt
^r4/lib/trace.txt

#px #py

:acpx!+ | alpha col --
	dup $ff00ff and				| alpha color colorand
	px@ dup $ff00ff and 		| alpha color colorand inkc inkcand
	pick2 - pick4 * 8 >> rot +	| alpha color inkc inkcandl
	$ff00ff and >r				| alpha color inkc
	swap $ff00 and 				| alpha px colorand
	swap $ff00 and 				| alpha colorand pxa
	over - rot * 8 >> + $ff00 and
	r> or px!+  ;

:pxa | alpha --
	ink@ acpx!+ ;

:sxy2
	setxy ;

:setxy
	-? ( trace ; )
	sh >=? ( trace ; )
	swap -? ( trace ; )
	sw >=? ( trace ; )
	swap sxy2 ;


|------ wuline
:nhline | x y dx --
	-? ( neg swap pick2 swap | ax>x
		)( px rot )
						| x cnt x y
	setxy 1+
	( 1? )( 1- ink@ px!+ ) drop
	'px ! ;

:nvline | x y --
	dup py - | x y dy
	-? ( neg rot pick2	| py>y
		)( rot py )
						| y cnt x y
	setxy 1+
	( 1? )( 1- ink@ px!+ sw 1- px+! ) drop
	'py ! ;

:li00 | x y dx dy -- x y .. +dx +dy
	px py
:cont00 | x y dx dy x1 y1 ....
	2dup setxy ink@ px!+
	2swap
	over <? ( | x y x1 y1 dx dy ...dy<dx
		16 << over / 0 rot	| x y x1 y1 ea ec dx
		( 1? )( 1- >r		| x y x1 y1 ea ec
			2dup + $ffff and		| x y x1 y1 ea ec ea+ec
			swap <=? ( rot 1+ rot rot )
			>r rot 1+ rot rot r>
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			2over 1+ setxy
			$ff over 8 >> $ff and - pxa
			r> )
		)(
		swap 16 << over / 0 rot | x y x1 y1 ea ec dx
		( 1? )( 1- >r
			2dup + $ffff and
			swap <=? ( >r rot 1+ rot rot r> )
        	rot 1+ rot rot
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			$ff over 8 >> $ff and - pxa
			r> )
		)
 	nip 4drop ;

:li11 | x y dx dy -- x y ; -dx -dy
	neg swap neg swap 2over cont00 ;

:li01 | x y dx dy -- x y ... -dx +dy
	px py
:cont01 | x y dx dy x1 y1 ....
	2dup setxy ink@ px!+
	2swap swap neg swap
	over <? ( | x y x1 y1 dx dy ...dy<dx
		16 << over / 0 rot	| x y x1 y1 ea ec dx
		( 1? )( 1- >r		| x y x1 y1 ea ec
			2dup + $ffff and	| x y x1 y1 ea ec ea+ec
			swap <=? ( rot 1+ rot rot )
			>r rot 1- rot rot r>
			| falta alpha
			2over setxy
			dup 8 >> $ff and pxa
			2over 1+ setxy
			$ff over 8 >> $ff and - pxa
			r> )
		)(
		swap 16 << over / 0 rot | x y x1 y1 ea ec dx
		( 1? )( 1- >r
			2dup + $ffff and
			swap <=? ( >r rot 1- rot rot r> )
        	rot 1+ rot rot
			| falta alpha
			2over setxy
			$ff over 8 >> $ff and - pxa
			dup 8 >> $ff and pxa
			r> )
		)
 	nip 4drop ;

:li10 | x y dx dy -- x y ; +dx -dy
	neg swap neg swap 2over cont01 ;

#acclin li00 li01 li10 li11

:nlinen | x y --
	over px - 0? ( drop nvline ; )
	over py - 0? ( drop nhline ; )
	| x y dx dy
	over 29 >> $4 and
	over 28 >> $8 and or 'acclin + @ exec
	'py ! 'px ! ;

:nop | x y --
	'py ! 'px ! ;

|--- WU segunda implemantacio con clip
|----------------------------
:wvline | y x --
	-? ( drop 'py ! ; ) sw >=? ( drop 'py ! ; )
	py pick2 dup 'py !	| y x py  y
	<? ( swap rot )		| y1 x y2
	-? ( 3drop ; ) sh 1- clampmax
	rot sh >=? ( 3drop ; ) clamp0 | x y2 y1
	swap over - swap rot swap setxy
	1+ ( 1? )( 1- ink@ px!+ sw 1- px+! ) drop ;

:whline | x y --
	-? ( drop 'px ! ; ) sh >=? ( drop 'px ! ; )
	px pick2 dup 'px !	| x y px x
	<? ( swap rot )		| x1 y x2
	-? ( 3drop ; ) sw clampmax
	rot sw >=? ( 3drop ; ) clamp0	| y x2 x1
	swap over - swap rot setxy
	1+ ( 1? )( 1- ink@ px!+ ) drop ;

|------- clipline
:clip1 | y1 x1 y2 x2 c1 -- y1 x1 y2 x2 c1
    8 <? ( 0 )( sh 2 - ) nip >r
	2swap | y2 x2 y1 x1
|		X1+=(V-Y1)*(X2-X1)/(Y2-Y1);Y1=V;
 	pick3 pick2 - r pick3 - pick4 pick3 - rot */ +
	nip r> swap
	-? ( $1 )( 0 ) >r sw >=? ( $2 r+ )
	2swap r> ;

:clip2 | y1 x1 y2 x2 c2 -- y1 x1 y2 x2 c2
	8 <? ( 0 )( sh 2 - ) nip >r	| y1 x1 y2 x2
| 		X2+=(V-Y2)*(X2-X1)/(Y2-Y1);Y2=V;
	over pick4 - over pick4 - r pick4 - swap rot */ +
	nip r> swap
	-? ( $1 )( 0 ) >r sw >=? ( $2 r+ )
	r> ;

:clip3 | y1 x1 y2 x2 c2 -- y1 x1 y2 x2 c2
	1 =? ( 0 )( sw 1- ) nip >r
	swap | y1 x1 x2 y2
|		Y2+=(V-X2)*(Y2-Y1)/(X2-X1);X2=V;C2=0;
	dup pick4 - pick2 pick4 - r pick4 - rot rot */ +
	nip r> 0 ;

:clip4 | y1 x1 y2 x2 c1 -- y1 x1 y2 x2 c1
	1 =? ( 0 )( sw 1- ) nip >r
	2swap swap 	| y2 x2 x1 y1
|		Y1+=(V-X1)*(Y2-Y1)/(X2-X1);X1=V;C1=0;
	pick3 over - pick3 pick3 - r pick4 - rot rot */ +
	nip r>
	2swap 0 ;

:clipline | x2 y2 x1 y1 -- y1 x1 y2 x2 in
	sh >=? ( $8 )( 0 ) >r -? ( $4 r+ )	| y1
	swap sw >=? ( $2 r+ ) -? ( $1 r+ )	| x1
	2swap | y1 x1 x2 y2
	sh >=? ( $8 )( 0 ) >r -? ( $4 r+ )	| y2
	swap sw >=? ( $2 r+ ) -? ( $1 r+ )	| x2
	r> r>	| y1 x1 y2 x2 c2 c1
	2dup and 1? ( drop or ; ) drop
	2dup or 0? ( drop or ; ) drop
	>r 12 and? ( clip2 ) r> swap >r 12 and? ( clip1 ) r>
	2dup and 1? ( drop or ; ) drop
	2dup or 0? ( drop or ; ) drop
	>r 1? ( clip4 ) r> swap >r 1? ( clip3 ) r> or ;

:nline21 | | sx dy dx
	16 << over / 		| sx dy ea
	0 rot 				| sx ea ec dy
	( 1? )( 1- >r
		over + $ffff0000 and? ( $ffff and pick2 px+! )
		sw px+!
		dup 8 >>
		dup pxa pick3 1- px+!
		$ff xor pxa pick2 neg 1- px+!
		r> )
	4drop ;

:nline2 | x y --
|	trace
	py =? ( whline ; )
	swap px =? ( wvline ; )	| y x
	py pick2 <? ( px 2swap 2dup )( px 2over ) 'px ! 'py !
	swap -? ( 4drop ; ) 			| y1 x1 x2 y2 ; termina en y neg..
	2swap swap sh >=? ( 4drop ; )	| x2 y2 x1 y1 ; termina en y>sh
	clipline 1? ( 4drop drop ; ) drop	| y1 x1 y2 x2
	pick2 - swap pick3 -		| y1 x1 dx dy
|0? ( trace )
	0? ( 4drop ; )
	2swap					| dx dy y1 x1
	swap setxy ink@ px!+ -1 px+!	| dx dy
	swap -? ( neg -1 )( 1 )		| dy dx sx
	rot rot					| sx dy dx
	over <? ( nline21 ; )

	swap 16 <<
	over / 		| sx dx ea
	0 rot 					| sx ea ec dx
	( 1? )( 1- >r	| sx ea ec
		over + $ffff0000 and? ( $ffff and sw px+! )
		pick2 px+!		| sx ea ec
		dup 8 >>		| sx ea ec ci
		dup pxa sw 1- px+!
		$ff xor pxa sw 1+ neg px+!
		r> ) 4drop ;

:r2
	rand $7ff and
	rand $7ff and $2ff -
	;

:main
	4
	show clrscr
		verde
		cr cr cr dup ":r%d" print cr
		blanco
    	10 10 nop
		xymouse nlinen

		cyan
		400 100 nop
		xymouse swap 80 - swap 80 - nline2
		500 150 nline2

		r2 nop
		100  ( 1? )( 1-
			r2 nline2
			) drop

		'exit >esc<
		;

: main ;