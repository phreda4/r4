| NoHash Compressor
| Delta
| phreda 2012
|-----------------------
^r4/lib/gui.txt
^r4/lib/trace.txt

:timelog | str --
	msec time "%d:%d:%d %d %s %." mprint count "log.txt" append ;

#cntbytes
#inic	| datos a comprimir
#inis	| arreglo direccion
#inio	| datos a comprimir delta
#iniu   | datos comprimidos
#endu
#arena

|--------------- aremo arreglo de links
:buscolink | last pos -- last pos link
	dup @
	over 1+		| pos v poss
	( pick3 <? )(
		dup @ pick2 =? ( drop nip ; )
		drop 1+ ) 2drop
	-1 ;

:linkigual
	inis >r
	cntbytes ( 1? )( 1- -1 r!+ ) drop
	rdrop | inicializo puntero a -1
	inic cntbytes +
	inic ( over <? )(
		buscolink
		-1 =? ( drop )( inic - 2 << inis + over swap ! )
		1+ ) 2drop ;

#vac
:calccoin
	0 'vac !
	inis
	cntbytes ( 1? )( 1-
		swap @+ -1 =? ( 1 'vac +! ) drop
		swap ) 2drop
	;
|--------------
:,w here w!+ 'here ! ;
:,cw dup $ff and ,c 8 >> ,w ;
:cw@+ c@+ $ff and >r w@+ 8 << r> or ;

|---------------------------
|    formato comprimido
| byte-lit (byte de literal)
| 0    .. ningun literal
| 1-252.. cnt literal
| 253	  next byte cnt
| 254     next word cnt
| 255     next qword cnt
|... secuencia de literales
| byte-copia (byte de copia)
| 2 hibits posicion de inicio
| 00 en byte sig (8bits)
| 01 en word sig (16bits)
| 10 en bword sig (24bits)
| 11 en qword sig (32bits)
| 6..0 bits cantidad de bytes copiados
| 0..59 +4
| 60 en byte +63
| 61 en word +63
| 62 en bword +63
| 63 en qword +63
|-------------------------
#cntlit
#inilit

:,litc | adr cnt --
	( 1? )( 1- swap c@+ ,c swap ) 2drop ;

:,lit | adr cnt
	dup
	253 <? ( ,c ,litc ; )
	253 -
	$100 <? ( 253 ,c ,c ,litc ; )
	$10000 <? ( 254 ,c ,w ,litc ; )
	255 ,c , ,litc ;

:,literal
	cntlit 0? ( ,c ; )
	inilit inic +
	swap ,lit
	0 'cntlit ! ;

|......................
:cntcopy | rel byt cnt -- rel
	64 <? ( 4 - or ,c ; )
	63 -	| rel byt cnts
	$100 <? ( swap 60 or ,c ,c ; )
	$10000 <? ( swap 61 or ,c ,w ; )
	$1000000 <? ( swap 62 or ,c ,cw ; )
	swap 63 or ,c , ;

:,copy | cnt relini(positivo) --
	$100 <? ( $00 )(
		$10000 <? ( $40 )(
			$1000000 <? ( $80 )( $C0 ) ) )
	| cnt rel byt
	rot cntcopy  | rel
	$100 <? ( ,c ; )
	$10000 <? ( ,w ; )
	$1000000 <? ( ,cw ; )
	, ;

|......................
#maxl 0
#howl 0

| little endian
:ultimodes | val -- val cnt
	$ffffff nand? ( 3 ; )
	$ffff nand? ( 2 ; )
	$ff nand? ( 1 ; )
	0 ;

:largoigualc | pos1 pos2 -- largo
	4+ >r | es menor
	4+ 4 swap | la primer comprobacion ya esta hecha
	( @+ r@+ xor 0? )( drop
		swap 4+ swap
		inis >=? ( drop rdrop ; )
		)
	ultimodes nip nip rdrop
	+ ;

:cadac | pos -- pos
	dup 2 << inis + @			| pos link
	-1 =? ( drop 1 'cntlit +! ; )
	0 'maxl !	| pos link
	over inic + swap | pos p1 p2
	( -1 <>? )(
		2dup largoigualc
		maxl >? ( 'maxl ! dup 'howl ! )( drop )
		inic - 2 << inis + @ ) drop
	,literal
	howl - maxl swap ,copy
	maxl + dup 'inilit !
	1- ;

:scangen
	iniu 'here !
	0 'cntlit !
	0 'inilit !
	mark
	0 ( cntbytes <? )( cadac 1+ ) drop
	,literal
	here 'endu !
	here 4+ 'arena !
	"compresso" savemem
	empty ;

|-----------------------------------------

:descntlit | adr l -- adr. lr
	253 <? ( ; )
	253 =? ( swap c@+ $ff and rot + ; )
	254 =? ( drop w@+ $ffff and 253 + ; )
	drop @+ 253 + ;

:deslit | adr l -- adr.
	0? ( drop ; )
	$ff and descntlit | adr cnt
	( 1? )( 1- swap c@+ ,c swap ) drop ;

:descntcp | adr v c -- adr v c.
	$3f and
	60 <? ( 4+ ; )
	60 =? ( drop swap c@+ $ff and 63 + rot swap ; )
	61 =? ( drop swap w@+ $ffff and 63 + rot swap ; )
	62 =? ( drop swap cw@+ $ffffff and 63 + rot swap ; )
	drop swap @+ 63 + rot swap ;

:desrelcp | adr c v -- adr r c
	$c0 and
	$00 =? ( drop swap c@+ $ff and rot ; )
	$40 =? ( drop swap w@+ $ffff and rot ; )
	$80 =? ( drop swap cw@+ $ffffff and rot ; )
	drop swap @+ rot ;

:descpy | adr v -- adr.
	dup descntcp	| adr v cnt
	swap desrelcp	| adr rel cnt
	swap neg here +	| adr cnt from
	swap ( 1? )( 1- swap c@+ ,c swap ) 2drop ;

:decompress | adrf adr --	; decompress in here
	c@+ deslit
	( over <? )(
		c@+ descpy
		c@+ deslit
		) 2drop ;

|----------------------------------
:testd
	arena 'here !
	endu iniu decompress
	;

:printcorpus
	amarillo
	inic
	5 ( 1? )( 1- >r
		32 ( 1? )( 1- >r
			c@+ "%h " print
			r> ) drop
			cr
		r> ) 2drop ;

#iniv

:printinfo
	[ iniv 40 - -? ( 0 nip ) 'iniv ! ; ] <up>
	[ iniv 40 + cntbytes >? ( 40 - ) 'iniv ! ; ] <dn>

	cr chome!
	blanco
	inis iniv 3 << +
	40 ( 1? )( 1- swap
		@+ " %h " print
		@+ " %d " print cr
       	swap ) 2drop
	chome
	rojo
	inio iniv 2 << +
	40 ( 1? )( 1- swap
		@+ " %h " print cr
		swap ) 2drop
	chome
	amarillo
	inio iniv 2 << +
	40 ( 1? )( 1- swap
		@+  inis >=? ( inio <? ( @ " %h " print )( drop ) )( drop )
		cr
		swap ) 2drop
	chome< ;

:printinfo2
	[ iniv 20 - -? ( 0 nip ) 'iniv ! ; ] <up>
	[ iniv 20 + cntbytes >? ( 20 - ) 'iniv ! ; ] <dn>

	cr chome!
	blanco
	0 ( 20 <? )(
		dup iniv + inic + " %h. " print
		dup iniv + inic + c@ $ff and dup "%h " print 32 <? ( 32 nip ) emit sp sp
		dup iniv + 2 << inis + @ " %h " print
		cr
		1+ ) drop
	chome< ;

:printraw
	inic >r
	5 ( 1? )( 1-
		90 ( 1? )( 1-
				r> c@+ 32 <? ( 33 nip )
				"%k" print
				>r
			) drop
			cr
		) drop
	rdrop
	cr
	arena >r
	5 ( 1? )( 1-
		90 ( 1? )( 1-
				r arena - inic + c@
				r> c@+
				rot =? ( verde )( rojo )

				32 <? ( 33 nip )
				"%k" print
				>r
			) drop
			cr
		) drop
	rdrop
	blanco
	iniu >r
	5 ( 1? )( 1-
		90 ( 1? )( 1-
				r>
			|	iniv iniu + =? ( verde )( blanco )
				c@+ 32 <? ( 33 nip )
				"%k" print
				>r
			) drop
			cr
		) drop
	rdrop

	[ 1 'iniv +! ; ] <ri>
	[ -1 'iniv +! ; ] <le>

	cr
|	iniv iniu + 5 ( 1? )( 1- swap c@+ "%h " print swap ) 2drop
	;

#men
:scc
	timelog
|	dup timelog
|	'men !
	;
|	show clrscr blanco
|		men print
|		'exit >esc< ;


:gendelta
	inio inic c@+ rot over swap c!+ rot rot
	cntbytes ( 1? )( 1- >r
		swap c@+ rot over - >r
		rot r> swap c!+
		rot rot
		r> ) 4drop ;
:testg
	gendelta
	inic inio cntbytes cmove
	linkigual
	calccoin
	;

:main
	"scangen" scc
	scangen
	"finish" scc
	0 'iniv !
	calccoin
	show clrscr
		verde
		inic "c:%h " print
		inis "s:%h " print
		inio "o:%h " print
		iniu "u:%h " print
		cntbytes "bytes:%d " print
		endu iniu - "-> %d bytes" print
		vac " %d vacios " print
		cr


		printinfo2
		printraw

		'testd <f5>

		'testg <f1>
		'scangen <f2>
		'exit >esc<
		;


:m
	mark
|	"load time" timelog
	here dup 'inic !
|	"db/corpus/enwik8"
|	"db/corpus/calgary.tar"
	"db/corpus/calgary2.tar"

	load
	dup inic - 'cntbytes !
	0 swap !+
	dup 'inis ! 'here !
	linkigual
	cntbytes 2 << 'here +!
	here 'inio !
|	gendelta
	inio cntbytes + dup
	dup 'iniu ! 'endu !
	'here !
	here 'arena !
	;


#inic
#endc

:d
	mark
	here dup 'inic !
	"compresso" load
	dup 'endc ! 'here !
	mark
	endc inic decompress
	"decompresso" savemem
	empty
	;


: m main ;