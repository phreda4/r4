isqrt_eax:
        xor     ebx,ebx 
        xor     edx,edx 
        bsr     edi,eax 
        setnz   cl 
        sub     cl,1 
        shr     edi,cl
        and     edi,-2 
        lea     ecx,[edi+2] 
        ror     eax,cl 
.digit: shld    ebx,eax,2 
        lea     ecx,[edx*4+1] 
        cmp     ebx,ecx 
        cmc 
        sbb     esi,esi 
        adc     edx,edx 
        and     ecx,esi 
        sub     ebx,ecx 
        shl     eax,2 
        sub     edi,2 
        jns     .digit 
        mov     eax,edx 
        ret

/*
 *	Square root by abacus algorithm, Martin Guy @ UKC, June 1985.
 *	From a book on programming abaci by Mr C. Woo.
 *	Argument is a positive integer, as is result.
 *
 *	I have formally proved that on exit:
 *		   2		   2		   2
 *		res  <= x < (res+1)	and	res  + op == x
 *
 *	This is also nine times faster than the library routine (-lm).
 */
int sqrt(x) int x;
{
	/*
	 *	Logically, these are unsigned. We need the sign bit to test
	 *	whether (op - res - one) underflowed.
	 */
	register int op, res, one;
	op = x;
	res = 0;
	/* "one" starts at the highest power of four <= than the argument. */
	one = 1 << 30;	/* second-to-top bit set */
	while (one > op) one >>= 2;
	while (one != 0) {
		if (op >= res + one) {
			op = op - (res + one);
			res = res +  2 * one;
		}
		res /= 2;
		one /= 4;
	}
	return(res);
}

::exp. | v -- r
	0? ( drop 1.0 ; )
|	1.0 =? ( drop e ; )

	;
|fix16_t fix16_exp(fix16_t inValue) {
|        if(inValue == 0)                return fix16_one;
|        if(inValue == fix16_one)                return fix16_e;
|        if(inValue > 681391)                return fix16_max;
|        if(inValue < -726817)                return 0;
|int64_t tempOut = int64_add(int64_from_int32(fix16_one), int64_from_int32(inValue));
|int64_t tempValue = int64_from_int32(inValue);
|uint32_t i, n;
|for(i = 3, n = 2; i < 13; n *= i, i++) {
|    tempValue = int64_mul_i64_i32(tempValue, inValue);
|    #ifndef FIXMATH_NO_ROUNDING
|    tempValue = int64_add(tempValue, int64_from_int32(fix16_one >> 1));
|    #endif
|    tempValue = int64_shift(tempValue, -16);
|    tempOut = int64_add(tempOut, int64_div_i64_i32(tempValue, n));
|    }
|return int64_lo(tempOut);
