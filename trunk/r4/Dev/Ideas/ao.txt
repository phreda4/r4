
:intersectSphere | r0 rd sph --
	p.x=r0.x-sph.x
	p.y=r0.y-sph.y
	p.z=r0.z-sph.z
| b	dot|p,rd
	p.x rd.x *.
	p.y rd.y *. +
	p.z rd.z *. +
| c	dot|p,p-w*w
	p.x dup *.
	p.y dup *. +
	p.z dup *. +

	sph.w dup *. -
| b c
	over dup *. swap -
| b h
	0 >? ( sqrt. + )( nip )
	;

:interesctFloor | rO, const vec3 & rD )
	r0.y neg rD.y /. ;

:calcColor | x y -- color
	-1.0
{

	vec3 wrd = normalize(vec3(fragment.x*1.77f,fragment.y,-1.0f));

	vec3 wro = vec3(0.0f,1.0f,1.8f);
	vec4 sphere = vec4(0.0f,1.0f,0.0f,1.0f);

	bool didHit = false;
	float t = 1e20f;
	float amb = 0.0f;

	// floor
	float t1 = interesctFloor(wro,wrd);
	if( t1>0.0f && t1<t )
	{
		t = t1;
		didHit = true;
        vec3 pos = wro + t1*wrd;
		amb = 0.8f*smoothstep(sqrtf( pos.x*pos.x + pos.z*pos.z ), 0.0f, 2.0f);
	}

	// sphere
	float t2 = interesctSphere(wro,wrd,sphere);
    if( t2>0.0f && t2<t )
    {
		t = t2;
		didHit = true;
        vec3  pos = wro + t2*wrd;
        vec3  nor = (pos - sphere.xyz())/sphere.w;
		float fre = 1.0f+dot(nor,wrd); fre = fre*fre; fre = fre*fre;
		amb = clamp01( 0.5f + 0.5f*nor.y + fre*0.1f );
    }


#spheres
0.0 0.0 0.0 0.3 $ff0000 0 0 0
0.5 0.0 0.0 0.4 $00ff00 0 0 0
0.0 0.5 0.0 0.4 $0000ff 0 0 0
0.0 0.0 0.5 0.4 $ff00ff 0 0 0
#spheres$

:allspheres
	spheres ( spheres$ <? )(
		8 2 << +
		) drop
	;

:pixel? | x y -- x y
	sh 2/ - 1.0 * swap
	sw 2/ - 1.0 * swap
	0
	allspheres ;

:render
	0 dup setxy
   	0 ( sh <? )(
		0 ( sw <? )(
			pixel? px!+
			1+ ) drop
		1+ ) drop
	;

:main
	inigui
	'exit >esc<
	show clrscr
		render
		ccruz ;

: 33 main ;

}