: fib ( n -- n' )
   dup 1 > if 
      dup 1- recurse  swap 2-  recurse  +
   then ;  ok
  ok
dis fib
FIB
( 004C6DD0    83FB01 )                CMP       EBX, 01
( 004C6DD3    0F8E24000000 )          JLE/NG    004C6DFD
( 004C6DD9    8BD3 )                  MOV       EDX, EBX
( 004C6DDB    4B )                    DEC       EBX

( 004C6DDC    8D6DFC )                LEA       EBP, [EBP+-04]
( 004C6DDF    895500 )                MOV       [EBP], EDX
( 004C6DE2    E8E9FFFFFF )            CALL      004C6DD0        FIB

( 004C6DE7    8B5500 )                MOV       EDX, [EBP]
( 004C6DEA    83EA02 )                SUB       EDX, 02
( 004C6DED    895D00 )                MOV       [EBP], EBX
( 004C6DF0    8BDA )                  MOV       EBX, EDX
( 004C6DF2    E8D9FFFFFF )            CALL      004C6DD0        FIB

( 004C6DF7    035D00 )                ADD       EBX, [EBP]
( 004C6DFA    8D6D04 )                LEA       EBP, [EBP+04]
( 004C6DFD    C3 )                    NEXT,
( 46 bytes, 15 instructions )
 ok

:fib
	1 >? ( 	dup 1- fib swap 2 - fib + ) ;

.fib:
cmp eax,1
jle @f
mov ebx,eax
dec eax

push ebx	; resguardo NOS
call .fib
mov ebx,eax	; restauro NOS
pop eax		; +swap
sub eax,2   ; 2-

push ebx	; resguarfo NOS
call .fib
pop ebx		; restauro NOS
add eax,ebx
ret
