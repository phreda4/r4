| ray marching
| 2011 PHREDA
|------------------------------

#g_fStepMultiplier 0.9
#g_fMaxSteps 100
#g_fMinDist 0.001
#g_fGradientEpsilon 0.25
#s_fFov

#g_vecLightDir1 0 0 0
#g_vecLightDir2 0 0 0

#s_vecCamPos 0 0 0
#s_vecCamTo 0 0 0
#s_vecFwd 0 0 0
#s_vecRight 0 0 0
#s_vecUp 0 0 0

#vecCamRight 0 0 0
#vecCamUp 0 0 0

#vecCamDir 0 0 0

:rmcube | fx fy fz fs -- d
	>r r - swap r - max swap r> - max ;

|float rmCube(float fX, float fY, float fZ, float fSize)
|{ return max(abs(fX) - fSize, abs(fY) - fSize, abs(fZ) - fSize); }

float rmRoundedCube(float fX, float fY, float fZ, float fSize, float fRadius)
{
  float fDX = max(abs(fX) - fSize + fRadius, 0);
  float fDY = max(abs(fY) - fSize + fRadius, 0);
  float fDZ = max(abs(fZ) - fSize + fRadius, 0);
  return sqrt(fDX * fDX + fDY * fDY + fDZ * fDZ) - fRadius;
}

float rmRepeatedCubes(float fX, float fY, float fZ, float fSize, float fGap)
{
  float fTotalSize = fSize * 2 + fGap * 2;
  float fHalfTotalSize = fTotalSize / 2;
  return max(abs(((fX + fGap) % fTotalSize) - fHalfTotalSize) - fSize,
             abs(((fY + fGap) % fTotalSize) - fHalfTotalSize) - fSize,
             abs(((fZ + fGap) % fTotalSize) - fHalfTotalSize) - fSize);
}

:rmsphere | fx fy fz rad -- d
	>r dup *. swap dup *. + swap dup *. + sqrt. r> - ;
|float rmSphere(float fX, float fY, float fZ, float fRadius)
|{  return sqrt(fX * fX + fY * fY + fZ * fZ) - fRadius; }

float rmTorus(float fX, float fY, float fZ, float fInnerRadius, float fThickness)
{
  float fTemp = sqrt(fX * fX + fZ * fZ) - fInnerRadius;
  return sqrt(fTemp * fTemp + fY * fY) - fThickness;
}

class Field_CubePlusSpheres extends Field
{
  String getDescription() {return "Cube plus spheres";}
  float getDistance(PVector vecPos)
  {
    float fSphereDist1 = rmSphere(vecPos.x-5, vecPos.y, vecPos.z, 4);
    float fSphereDist2 = rmSphere(vecPos.x+5, vecPos.y, vecPos.z, 4);
    float fSphereDist3 = rmSphere(vecPos.x, vecPos.y-5, vecPos.z, 4);
    float fSphereDist4 = rmSphere(vecPos.x, vecPos.y+5, vecPos.z, 4);
    float fSphereDist5 = rmSphere(vecPos.x, vecPos.y, vecPos.z-5, 4);
    float fSphereDist6 = rmSphere(vecPos.x, vecPos.y, vecPos.z+5, 4);
    float fMinSphereDist = min(min(fSphereDist1, fSphereDist2, fSphereDist3), min(fSphereDist4, fSphereDist5, fSphereDist6));
    float fCubeDist = rmRoundedCube(vecPos.x, vecPos.y, vecPos.z, 6, 2);
    return min(fCubeDist, fMinSphereDist);
  }
};

class Field_CubeMinusSpheres extends Field
{
  String getDescription() {return "Cube minus spheres";}
  float getDistance(PVector vecPos)
  {
    float fSphereDist1 = rmSphere(vecPos.x-5, vecPos.y, vecPos.z, 4);
    float fSphereDist2 = rmSphere(vecPos.x+5, vecPos.y, vecPos.z, 4);
    float fSphereDist3 = rmSphere(vecPos.x, vecPos.y-5, vecPos.z, 4);
    float fSphereDist4 = rmSphere(vecPos.x, vecPos.y+5, vecPos.z, 4);
    float fSphereDist5 = rmSphere(vecPos.x, vecPos.y, vecPos.z-5, 4);
    float fSphereDist6 = rmSphere(vecPos.x, vecPos.y, vecPos.z+5, 4);
    float fMinSphereDist = min(min(fSphereDist1, fSphereDist2, fSphereDist3), min(fSphereDist4, fSphereDist5, fSphereDist6));
    float fCubeDist = rmRoundedCube(vecPos.x, vecPos.y, vecPos.z, 6, 2);
    return max(fCubeDist, -fMinSphereDist);
  }
};

class Field_SpheresMinusCube extends Field
{
  String getDescription() {return "Spheres minus cube";}
  float getDistance(PVector vecPos)
  {
    float fSphereDist1 = rmSphere(vecPos.x-5, vecPos.y, vecPos.z, 4);
    float fSphereDist2 = rmSphere(vecPos.x+5, vecPos.y, vecPos.z, 4);
    float fSphereDist3 = rmSphere(vecPos.x, vecPos.y-5, vecPos.z, 4);
    float fSphereDist4 = rmSphere(vecPos.x, vecPos.y+5, vecPos.z, 4);
    float fSphereDist5 = rmSphere(vecPos.x, vecPos.y, vecPos.z-5, 4);
    float fSphereDist6 = rmSphere(vecPos.x, vecPos.y, vecPos.z+5, 4);
    float fMinSphereDist = min(min(fSphereDist1, fSphereDist2, fSphereDist3), min(fSphereDist4, fSphereDist5, fSphereDist6));
    float fCubeDist = rmRoundedCube(vecPos.x, vecPos.y, vecPos.z, 6, 2);
    return max(-fCubeDist, fMinSphereDist);
  }
}

class Field_IntersectedSphereAndCube extends Field
{
  String getDescription() {return "Intersecting with cube grids";}
  float getDistance(PVector vecPos)
  {
    float fBaseGeometry = min(rmCube(vecPos.x-20, vecPos.y, vecPos.z, 6), rmSphere(vecPos.x-16, vecPos.y-4, vecPos.z-4, 7), rmSphere(vecPos.x+5, vecPos.y-5, vecPos.z, 10));

    float fGrid1 = rmRepeatedCubes(vecPos.x + 500, vecPos.y + 500 + g_fTime * 0.001, vecPos.z + 500, 3.3, 0.3);
    float f1 = min(fBaseGeometry + 1.0, max(fBaseGeometry, fGrid1));
    float fGrid2 = rmRepeatedCubes(vecPos.x + 200 + g_fTime * 0.001, vecPos.y + 300, vecPos.z + 400, 1.5, 1.5);
    float f2 = min(f1 + 1.0, max(f1, fGrid2));

    return f2;
  }
}

class Field_SphereWithVerticalNoiseBand extends Field
{
  String getDescription() {return "Sphere with vertical noise band";}
  float getDistance(PVector vecPos)
  {
    return rmSphere(vecPos.x, vecPos.y, vecPos.z, 10) + noise(500 + g_fTime * 0.0001 + vecPos.y * 0.25) * 2;
  }
}

class Field_NoisySphere extends Field
{
  String getDescription() {return "Noisy sphere";}
  float getDistance(PVector vecPos)
  {
    return rmSphere(vecPos.x, vecPos.y, vecPos.z, 10) + noise(500 + vecPos.x * 0.125, 500 + vecPos.y * 0.125, 500 + vecPos.z * 0.125) * 4;
  }
}
 
class Field_VeryNoisySphere extends Field
{
  String getDescription() {return "Very noisy sphere";}
  float getDistance(PVector vecPos)
  {
    return rmSphere(vecPos.x, vecPos.y, vecPos.z, 10) + noise(500 + vecPos.x * 0.5, 500 + vecPos.y * 0.5, 500 + vecPos.z * 0.5) * 4;
  }
}

class Field_TwistedCube extends Field
{
  String getDescription() {return "Twisted cube";}
  float getDistance(PVector vecPos)
  {
    float fAngle = vecPos.y * 0.125;
    float fCA = cos(fAngle);
    float fSA = sin(fAngle);
    float fRX = fCA * vecPos.x + fSA * vecPos.z;
    float fRZ = -fSA * vecPos.x + fCA * vecPos.z;
    return rmCube(fRX, vecPos.y, fRZ, 6);
  }
}
 
class Field_Cubes extends Field
{
  String getDescription() {return "Cube cloud";}
  Field_Cubes()
  {
    m_iNumCubes = 20;
    m_aCubes = new PVector[m_iNumCubes];
    for (int i = 0; i < m_iNumCubes; i++)
    {
      m_aCubes[i] = new PVector(random(-6, 6), random(-10, 10), random(-6, 6));
    }
  }
  int m_iNumCubes;
  PVector[] m_aCubes;
  float getDistance(PVector vecPos)
  {
    float fDist = 9999;
    for (int i = 0; i < m_iNumCubes; i++)
    {
      float fThisDist = rmCube(vecPos.x + m_aCubes[i].x, vecPos.y + m_aCubes[i].y, vecPos.z + m_aCubes[i].z, 3);
      fDist = min(fDist, fThisDist);
    }
    return fDist;
  }
}
|------------------
PVector gradient(float fX, float fY, float fZ)
{
  return new PVector(
    g_currentFieldType.getDistance(new PVector(fX + g_fGradientEpsilon, fY, fZ)) - g_currentFieldType.getDistance(new PVector(fX - g_fGradientEpsilon, fY, fZ)),
    g_currentFieldType.getDistance(new PVector(fX, fY + g_fGradientEpsilon, fZ)) - g_currentFieldType.getDistance(new PVector(fX, fY - g_fGradientEpsilon, fZ)),
    g_currentFieldType.getDistance(new PVector(fX, fY, fZ + g_fGradientEpsilon)) - g_currentFieldType.getDistance(new PVector(fX, fY, fZ - g_fGradientEpsilon))
  );
}
 
float ao(PVector vecPos, PVector vecNorm, float fDelta, int iSteps)
{
  float fOcclusion;
  float iStep = iSteps;
  for (fOcclusion = 1; iStep > 0; iStep--)
  {
    PVector vecAOPos = vecNorm.get(); vecAOPos.mult(fDelta * iStep);
    vecAOPos.add(vecPos);
    fOcclusion -= (iStep * fDelta - abs(g_currentFieldType.getDistance(vecAOPos))) / pow(2, iStep);
  }
  return fOcclusion;
}

class RayMarchResult
{
  RayMarchResult(float fDist, float fComplexity)
  {
    m_fDist = fDist;
    m_fComplexity = fComplexity;
  }
  float m_fDist;
  float m_fComplexity;
}
 

class RenderMode_OneLight extends RenderMode
{
  String getDescription() {return "One light";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    float fR = 0, fG = 0, fB = 0;
    float fDiffTerm = clamp(vecNorm.dot(g_vecLightDir1), 0.0, 1.0);
    fR += fDiffTerm * 1.5; fG += fDiffTerm * 1.5; fB += fDiffTerm * 1.5;
    fR += 0.0; fG += 0.0; fB += 0.03;  | Ambient
    return color(min(fR, 1) * 255, min(fG, 1) * 255, min(fB, 1) * 255);
  }
}
 
class RenderMode_TwoLights extends RenderMode
{
  String getDescription() {return "Two lights";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    float fR = 0, fG = 0, fB = 0;
    float fDiffTerm1 = clamp(vecNorm.dot(g_vecLightDir1), 0, 1);
    fR += fDiffTerm1 * 0.9; fG += fDiffTerm1 * 0.7; fB += fDiffTerm1 * 0.3;
    float fDiffTerm2 = clamp(vecNorm.dot(g_vecLightDir2), 0, 1);
    fR += fDiffTerm2 * 0.3; fG += fDiffTerm2 * 0.9; fB += fDiffTerm2 * 0.7;
    fR += 0.3; fG += 0.3; fB += 0.4;  | Ambient
    return color(min(fR, 1) * 255, min(fG, 1) * 255, min(fB, 1) * 255);
  }
}

class RenderMode_AmbientOcclusion extends RenderMode
{
  String getDescription() {return "Ambient occlusion";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    float fAO = ao(vecContactPos, vecNorm, 0.5, 5);
    return color(fAO * 255);
  }
}
 
class RenderMode_TwoLightsAndAmbientOcclusion extends RenderMode
{
  String getDescription() {return "Two lights and ambient occlusion";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    float fR = 0, fG = 0, fB = 0;
    float fDiffTerm1 = clamp(vecNorm.dot(g_vecLightDir1), 0, 1);
    fR += fDiffTerm1 * 0.9; fG += fDiffTerm1 * 0.7; fB += fDiffTerm1 * 0.3;
    float fDiffTerm2 = clamp(vecNorm.dot(g_vecLightDir2), 0, 1);
    fR += fDiffTerm2 * 0.3; fG += fDiffTerm2 * 0.9; fB += fDiffTerm2 * 0.7;
    fR += 0.3; fG += 0.3; fB += 0.4;  | Ambient
    float fAO = ao(vecContactPos, vecNorm, 0.5, 5);
    fR *= fAO; fG *= fAO; fB *= fAO;
    return color(min(fR, 1) * 255, min(fG, 1) * 255, min(fB, 1) * 255);
  }
}
 
class RenderMode_Normals extends RenderMode
{
  String getDescription() {return "Normals";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    return color((vecNorm.x * 0.5 + 0.5) * 255, (vecNorm.y * 0.5 + 0.5) * 255, (vecNorm.z * 0.5 + 0.5) * 255);
  }
}
 
class RenderMode_Complexity extends RenderMode
{
  String getDescription() {return "Complexity";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    return color(rayMarchResult.m_fComplexity * 255);
  }
}
 
class RenderMode_Shiny extends RenderMode
{
  String getDescription() {return "Specular with ambient occlusion";}
  color render(PVector vecContactPos, PVector vecCamRay, RayMarchResult rayMarchResult)
  {
    PVector vecNorm = gradient(vecContactPos.x, vecContactPos.y, vecContactPos.z);
    float fR = 0, fG = 0, fB = 0;
    float fDiffTerm = clamp(vecNorm.dot(g_vecLightDir1) + 0.5, 0, 1);
    fR += fDiffTerm * 2.0; fG += fDiffTerm * 0.2; fB += fDiffTerm * 0.0;
    PVector vecReflect = vecNorm.get(); vecReflect.mult(2 * fDiffTerm); vecReflect.sub(g_vecLightDir1); vecReflect.normalize();
    PVector vecNegativeCamRay = vecCamRay.get(); vecNegativeCamRay.mult(-1);
    float fSpecTerm = pow(clamp(vecReflect.dot(vecNegativeCamRay), 0, 1), 20);
    fR += fSpecTerm * 4.0; fG += fSpecTerm * 3.0; fB += fSpecTerm * 2.0;
    float fAO = ao(vecContactPos, vecNorm, 0.5, 5);
    fR *= fAO; fG *= fAO; fB *= fAO;
    return color(min(fR, 1) * 255, min(fG, 1) * 255, min(fB, 1) * 255);
  }
}

|----------------------
RayMarchResult rayMarch(PVector vecPos, PVector vecDir)
{
  PVector vecCurrentPos = vecPos.get();

  float fDist = g_fMinDist;
  float fStep;
  float fStepDelta = 1.0 / g_fMaxSteps;
  for (fStep = 0; fStep < 1 && fDist >= g_fMinDist; fStep += fStepDelta)
  {
    fDist = g_currentFieldType.getDistance(vecCurrentPos);
    PVector vecStep = vecDir.get();
    vecStep.mult(fDist * g_fStepMultiplier);
    vecCurrentPos.add(vecStep);

    | This is a bit of a hack that just so happens to work well with the current scenes by
    | stopping the rays from marching too far
    | Hacky.. but it gives a massive speed boost
    if (fDist > 100)
    {
      return new RayMarchResult(0, 0);
    }
  }

  if (fDist < g_fMinDist)
  {
    PVector vecDiff = vecPos.get();
    vecDiff.sub(vecCurrentPos);
    return new RayMarchResult(vecDiff.mag(), fStep);
  }
  else
  {
    return new RayMarchResult(0, 0);
  }
}



:render
  |----Position camera
	msec 5 >>
	25 over cos *
	-21 pick2 sin *
	rot sin 25 *
	's_vecCamPos !+ !+ !
|  s_vecCamPos = new PVector(0 + 25 * sin(g_fTime * 0.001), 0 - 21 * sin(g_fTime * 0.0002),0 + 25 * cos(g_fTime * 0.001));
	0 0 0 's_vecCamTo !+ ! !
|  s_vecCamTo = new PVector(0,0,0);
  |---- Figure out view vectors from camera position
	's_vecFwd 's_vecFwd v3= |  s_vecFwd = s_vecFwd.get();
	's_vecFwd 's_vecCamPos v3- |s_vecFwd.sub(s_vecCamPos);
	's_vecFwd v3nor |s_vecFwd.normalize();
	0 1.0 0 's_vecUp !+ !+ ! |  s_vecUp = new PVector(0, 1, 0);
	's_vecRight dup 's_vecFwd v3= 's_vecUp v3vec | s_vecRight = s_vecFwd.cross(s_vecUp);
	's_vecUp dup 's_vecRight v3= 's_vecFwd v3vec | s_vecUp = s_vecRight.cross(s_vecFwd);
	1.0 's_fFov !

  |---- Set up lights
	0 -1.0 -0.5 'g_vecLightDir1 !+ !+ ! 'g_vecLightDir1 v3nor
|  g_vecLightDir1 = new PVector(-0.5, -1, 0); g_vecLightDir1.normalize();
	0 -1.0 -0.5 'g_vecLightDir2 !+ !+ ! 'g_vecLightDir2 v3nor
|  g_vecLightDir2 = new PVector(0.5, -1, 0); g_vecLightDir2.normalize();

	0 0 setxy
	0 ( sh <? )(
		0 ( sw <? )(

|----- 1 pixel
|    for (int y = m_iStartY; y < m_iStartY + m_iRenderHeight; y += s_iResolutionSquared)
|      for (int x = 0; x < width; x += s_iResolutionSquared)

|        PVector vecCamRight = s_vecRight.get(); vecCamRight.mult(((float)x / (float)(width) - 0.5) * s_fFov);
		'vecCamRight dup 's_vecRight v3= over sh 2/ - 1.0 sh */ v3*
|        PVector vecCamUp = s_vecUp.get(); vecCamUp.mult(((float)y / (float)(height) - 0.5) * s_fFov);
		'vecCamUp dup 's_vecUp v3= pick2 sw 2/ - 1.0 sw */ v3*
|        PVector vecCamDir = vecCamRight.get(); vecCamDir.add(vecCamUp.get()); vecCamDir.add(s_vecFwd); vecCamDir.normalize();
    	'vecCamDir dup dup dup 'vecCamRight v3= 'vecCamup v3+ s_vecFwd v3+ v3nor
|---------
        RayMarchResult rayMarchResult = rayMarch(s_vecCamPos, vecCamDir);
        float fDistance = rayMarchResult.m_fDist;
        color c = 0;
        if (fDistance > 0)
        {
          | Ray hit our field - calculate the colour
          PVector vecContactPos = vecCamDir.get(); vecContactPos.mult(fDistance); vecContactPos.add(s_vecCamPos);
          c = g_currentRenderMode.render(vecContactPos, vecCamDir, rayMarchResult);
        }
        else
        {
          | Ray didn't hit anything - get background colour
          c = color(40 + (float)y / (float)height * 20, 50 + (float)y / (float)height * 40, 40 + sin(g_fTime * 0.0001) * 30);
        }
|----- 1 pixel
			px!+
			1+ ) drop
		redraw
		1+ ) drop
	;


:main
	show clrscr
		render
		'exit >esc<
		cminiflecha ;

: main ;