// x + 0 => x
// x + (y - x) --> y
// (x - y) + y => x
//// -A + -B  -->  -(A + B)
// -A + B  -->  B - A
// A + -B  -->  A - B
// (x * i0) + x => x * (i0 + 1)
//// (x * i0) + (x * i1) => x * (i0 + i1)
// x + x * i0 => x * (i0 + 1)
// w * x + y * z => w * (x + z) iff w == y
// (x - x) => 0
// x - (-A) => x + A
// (x - i0) => x + -i0
// x - (x + y) => -y
// x - (y + x) => -y
// i0 - (x + i1) => (i0 - i1) - x
//// 0 - (C << X)  -> (-C << X)
//// x - x * i0 = x * (1 - i0)
// (x + y) - x => y
// (x + y) - y => x
// (x - y) - x => -y
// x * i0 - x => x * (i0 - 1)
//// x * i0 - x * i1 => x * (i0 - i1)
// (x + i0) - (y + i1) => (x - y) + (i0 - i1)
// w * x - y * z => w * (x - z) iff w == y
// (x << i0) * i1 => x * (i1 << i0)
// x * 0 => 0
// x * -1 => 0 - x
// x * (1 << i0) => x << i0
// (x + i0) * i1 => x * i1 + i0 * i1
//// -X * -Y => X * Y
//// x * (1 << y) => x << y
//// (1 << y) * x => x << y
// x * y (where y is 0 or 1) => (0 - y) & x
// x * y (where y is 0 or 1) => (0 - x) & y
// (x * 0) >> 32 => 0
// (x * (1 << i0)) => x >> (32 - i0)
// (x op y) & z => (x & z) op y if (y & z) == 0
// (x op y) & z => (y & z) op x if (x & z) == 0
//// (x >> z) & (y >> z) => (x & y) >> z
//// ((A | N) + B) & AndRHS -> (A + B) & AndRHS iff N&AndRHS == 0
//// ((A ^ N) + B) & AndRHS -> (A + B) & AndRHS iff N&AndRHS == 0
//// ((A | N) - B) & AndRHS -> (A - B) & AndRHS iff N&AndRHS == 0
//// ((A ^ N) - B) & AndRHS -> (A - B) & AndRHS iff N&AndRHS == 0
//// (~A & ~B) == (~(A | B)) - De Morgan's Law
//// (X^C)|Y -> (X|Y)^C iff Y&C == 0
