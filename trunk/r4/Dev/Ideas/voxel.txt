// isometric conversion
var centerX:Number=stage.stageWidth/2;
var centerY:Number=stage.stageHeight/2;
var theta:Number=Math.PI/4;// 45 degrees;
var cosX:Number=Math.cos(theta);
var sinX:Number=Math.sin(theta);
var pnt:Point = new Point();
function iso3D(x:Number, y:Number, z:Number):Point {
    pnt.x = centerX + (x-z) *  cosX
    pnt.y = centerY -  (x+z) * 0.5 * sinX - y;
    return pnt;
}
// example:
var canvas:BitmapData=new BitmapData(stage.stageWidth,stage.stageHeight,true,0xFF000000);
addChild(new Bitmap(canvas,"auto",true));
var size:int=100;
var hs:int=size / 2;
var pen:Point = new Point();
var vect:Vector3D = new Vector3D();
// draw a few shapes with offset:
for (var dist:int = 10; dist <= 80; dist *= 2) {
    // voxel space:
    for (var i:int = 0; i<size; i++) {
        for (var j:int = 0; j<size; j++) {
            for (var k:int = 0; k<size; k++) {
                vect.x=j-hs;
                vect.y=i-hs;
                vect.z=k-hs;
                pen = iso3D(vect.x,vect.y,vect.z);
                if (Math.sqrt((vect.x * vect.x) + (vect.y * vect.y) + (vect.z * vect.z)) <dist) {
                    // using Vector3D.distance() is very slow compared to above
                    // a few types of coloring:
                    var xp:Number = pen.x + (dist <<2) - 200;
                    canvas.setPixel(xp, pen.y-100, (i <<16 | j <<8 | k) <<1);
                    canvas.setPixel(xp, pen.y+100, (k <<16 | k <<8 | k+j)  );
                }
            }
        }
    }

}

#centerX 400
#centerY 300
#theta | 45 degrees;
#cosX 0.7071
#sinX 0.7071

:iso3D | x y z -- y x
	centerY pick3 pick2 + sinX *. 2/ - rot -
	rot rot - centerX cosX *. +
	;

#size 100
#hs 50
#dist


:drawp | dist i j k -- dist i j k
	over hs -
	pick3 hs -
	pick2 hs -
	pick2 dup *
	pick2 dup * +
	pick2 dup * +
	sqrt
	dist >=? ( 4drop ; )
	drop | x y z
	iso3D | i j k y x
	dist 2 << + 200 -
	swap
	100 - setxy
	pick2 16 <<
	pick2 8 <<
	pick2 or or 2* px!+
	;

:voxelspace
	0 ( size <? )(
		0 ( size <? )(
			0 ( size <? )(
				drawp
				1+ ) drop
			1+ ) drop
		1+ ) drop
	;

:drawiso
	10 ( 80 <=? )( dup 'dist !
		voxelspace
		2* ) drop
	;

:main
	show clrscr
		drawiso
		'exit >esc<
	;
: main ;