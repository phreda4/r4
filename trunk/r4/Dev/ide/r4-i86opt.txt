| r4-i84opt.txt
| PHREDA 2015
|------------------------------------------------
^r4/lib/gui.txt
^r4/system/mem-ed.txt

^r4/dev/ide/r4-token.txt
^r4/dev/ide/r4-post.txt
^r4/dev/ide/r4-asmdat.txt

^r4/dev/ide/r4i86o3.txt


|--- resolver anonimos
#nroanon 0
#totoken
#niva	| nivel de anonimas

#niv )( 1024
#niv> 'niv
:+niv	niv> c!+ 'niv> ! ;
:-niv   'niv 'niv> ! ;

#anonind )( 256
#anonind> 'anonind
:+ind 	anonind> !+ 'anonind> ! ;
:-ind	'anonind 'anonind> ! ;

#anons )( 128
#anons> 'anons
:>aa anons> !+ 'anons> ! ;
:aa> -4 'anons> +! anons> @ ;
:-aa 'anons 'anons> ! ;
:aa# anons> 'anons - 2 >> ;

:t[
	1 'niva +!
	niv> +ind
	nroanon dup >aa
	8 << $14 or pick2 4 - ! | graba en token
	1 'nroanon +!
	;
:t]
	-1 'niva +!
	aa> 8 << $15 or pick2 4 - ! | graba en token
	;

:marcaniveles | nro -- nro
	-aa -niv -ind
	0 'niva !
	dup dic>tok @ 4+ over dic>len@ 1-
	over 'totoken ! | token definicion sin contar
	( 1? )( 1-
		swap @+ $ff and
		$14 =? ( t[ )
		$15 =? ( t] )
		drop
		niva +niv
		swap ) 2drop
	-1 niv> c!
	;

|--- resolver r
|  1 es pila real (no cargada)
| 10 es una dreccion

#nivr 0
#rinfod )( 1024
#rstk )( 128
#rstk>  'rstk

:rnow rstk> 1- c@ ;
:rinfo rnow 2 << 'rinfod + ;

:rREAL	rstk> 'rstk =? ( drop ; ) drop rinfo dup @ 1 or swap ! ;
:rADR   rinfo dup @ 2 or swap ! ;

:+nivr	nivr rstk> c!+ 'rstk> ! 1 'nivr +! ;
:-nivr  -1 'rstk> +! ;
:checklast	rstk> 'rstk =? ( +nivr rREAL ) drop ;

:t>R	+nivr ;
:tR>    checklast -nivr ;
:tR		checklast ;
:tR+	rADR ; |	checklast | error
:tR@+	rADR ; |	checklast | error
:tR!+	rADR ; |	checklast | error
:tRDROP checklast -nivr ;

|--- buffer de codigo
#buffaux )( 4096
#buffaux> 'buffaux

:-buff
	'buffaux 'buffaux> !
	'rinfod >r 255 ( 1? )( 1- 0 r!+ ) drop rdrop
	'rstk 'rstk> ! 0 'nivr ! ;

:+buff
	dup $ff and $c =? ( rREAL ) drop
	$10 =? ( rREAL )
	$32 =? ( t>R )
	$33 =? ( tR> )
	$34 =? ( tR )
	$35 =? ( tR+ )
	$36 =? ( tR@+ )
	$37 =? ( tR!+ )
	$38 =? ( tRDROP )
	buffaux> !+ 'buffaux> ! ;


:marca | adr v -- adr v
	rinfo
	1 and? ( drop ; ) | es real
	2 and? ( drop over 4 - dup @ $100 or swap ! ; )

	| uso < limite o w
	drop
	over 4 - dup @ $100 or swap !
	;

:marcaRstack
	'buffaux ( buffaux> <? )(
		@+
		$32 =? ( t>R marca )
		$33 =? ( tR> marca )
		$34 =? ( tR marca )
		$35 =? ( marca )
		$36 =? ( marca )
		$37 =? ( marca )
		$38 =? ( tRDROP marca )
		drop ) drop ;

|------------------------
:buscacte | adr+ val -- adr+
	dup 8 >> dic>inf @
	%100 and? ( drop +buff ; ) drop
	8 >> dic>tok @ | token de variable
	4+ @ dup $ff and

|	2 =? ( 2drop 0 genCTE +buff ; ) | caso #cte #var

	$c =? ( $e nip ) $e =? ( drop $fffffff0 and $e or +buff ; ) | caso #cte 'word
	$d =? ( $f nip ) $f =? ( drop $fffffff0 and $f or +buff ; ) | caso #cte 'var
	drop
	|$fffffff0 and 7 or   |*** copia el mismo token
	+buff ;

:buscainline | adr+ val -- adr+
	dup 8 >> dic>inf @
	$100 nand? ( drop +buff ; ) drop | no es inline
	8 >> dup dic>tok @ 4+ swap dic>len@ 2 - | no graba ; final
	( 1? )( 1- swap
		@+ dup $ff and
		$c =? ( drop buscainline )( | es word? inline?
			$d =? ( drop buscacte )(
				drop +buff ) ) | es var? cte?
		swap ) 2drop
	;

:+buffer | adr -- adr++
	@+ dup $ff and
	$c =? ( drop buscainline ; )
	$d =? ( drop buscacte ; )
	drop +buff ;

|--- imprime de buffer ***********
:buffp
	@+ dup $ff and

|	5 <? ( 2drop ; )
	$14 =? ( drop 8 >> "_aa%h:" ,print ,nl ; )
	$15 =? ( drop 8 >> " '_aa%h" ,print ,nl ; )
	drop

	" ; " ,s tokenstrA ,print ,nl
	;

|--- copia y genera
:copynivl | lugarniv --
	dup 'niv - 2 << totoken + | niv tok
	over c@
:copynivr | lugarniv tok v --
	-buff

	swap rot | niv@ tok niv
	( c@+ pick3 >=? )( | mismo nivel o mayor
		pick3 >? ( drop swap 4+ )( drop swap +buffer )
		swap ) 4drop

	marcaRstack
	buffaux> 'buffaux compilatok

|---- compilar el buffer ---- ************
|	|--- descarga buffer
|	'buffaux ( buffaux> <? )(
|		buffp ) drop
|---- compilar el buffer ----
	;

|------------------------------------
:gencodigo | nro -- nro
	dup dic>inf @
	1 and? ( drop ; )					| solo codigo
	$100 and? ( drop ; ) drop			| no inline
	dup dic>call@ 0? ( drop ; ) drop	| con llamadas

	marcaniveles

|*** DEBUG
|	"r4asm/cod.asm" savemem

	|-- generar anonimos
	anonind> ( 'anonind >? )( 4 -
		";--- " ,print ,nl

|		dup c@ ":_aa%h" ,print ,nl

|		dup 'niv - 2 << totoken + 4 - @ | niv tok
|		8 >> "_aa%h:" ,print ,nl

		dup @ copynivl
		) drop

	|-- genera principal
	cntwords 1- =? ( "inicio: " )( dup "w%h: " ) ,print
	dup dic>str @ " ; --- %s --- ;" ,print ,nl
	'niv totoken 0 copynivr
	,nl ;

:make_cod.asm
	ini.compila
	mark
	";---:r4 compiler cod.asm" ,ln
	0 ( cntwords <? )(
		gencodigo
		1+ ) 2drop
	0 ,c
	"r4asm/cod.asm" savemem
	empty ;

|------------------------------------
:showprogress
	fonti
	show clrscr
		dumpdic
		'exit >esc< ;

:main
	ed.load
	mark
	'ed.nombre tokenasm
	1? ( drop ; ) drop
	tokenpost
	tokenpostusa

	make_dat.asm
	make_cod.asm
	empty

	showprogress
|	"r4fasm.bat" system
	;

: mark main ;