| r4post.txt
| analisis profundo de cada palabra usada
| PHREDA 2014
|---------------------------------------------------------------
^r4/dev/ide/r4-dicc.txt

#MAXINLINE 12

#nivel	0

#usoD	0
#deltaD	0	| pila de datos
#deltaD1fin | pila de datos en el 1er fin
#deltaR	0	| pila de retorno
#flags	0
#cntfin
#pano		| anonima
#cano

| uso dD dR tipo
#deltainternos (
0 0 0 0		|0
0 0 0 0		|1 :  | --  define codigo
0 0 0 0		|2 :: | --  define codigo
0 0 0 0		|3 #  | --  define variable
0 0 0 0		|4 #: | --  define variable
0 0 0 0		|5 |  | -- comentario
0 0 0 0		|6 ^  | -- include
0 1 0 0		|7 1  | -- n 	numero decimal
0 1 0 0		|8 $  | -- n	numero hexa
0 1 0 0		|9 %  | -- n	numero binario
0 1 0 0		|A .  | -- n	numero punto fijo
0 1 0 9		|B "  | -- n	string
0 0 0 1		|C w  | x -- x  word <---- debe ser calculado
0 1 0 11	|D v  | -- n  var
0 1 0 11	|E 'w | -- n  dir word
0 1 0 11	|F 'v | -- n  dir var
			|------------------------- ) #deltamacros (
0 0 0 7		|10 ; | fin de palabra (12)
0 0 0 2		|11 (
0 0 0 3		|12 )(
0 0 0 4		|13 )
0 1 0 5		|14 [
0 0 0 6		|15 ]
1 -1 0 10	|16 EXEC  x/0 --
1 0 0 0		|	0? a -- a
1 0 0 0		|	+? a -- a
1 0 0 0		|	-? a -- a
1 0 0 0		|	1? a -- a
2 -1 0 0	|	=?  ab -- a
2 -1 0 0	|	<?  ab -- a
2 -1 0 0	|	>?  ab -- a
2 -1 0 0	|	<=? ab -- a
2 -1 0 0	|	>=? ab -- a
2 -1 0 0	|20 <>? ab -- a
2 -1 0 0	|AND?  ab -- a
2 -1 0 0	|NAND? ab -- a
1  1 0 0	|DUP    a -- aa
1 -1 0 0	|DROP  a --
2 1 0 0		|OVER   ab -- aba
3 1 0 0		|PICK2  abc -- abca
4 1 0 0		|PICK3  abcd -- abcda
5 1 0 0		|PICK4  abcde -- abcdea
2 0 0 0		|SWAP   ab -- ba
2 -1 0 0	|NIP   ab -- b
3 0 0 0		|ROT	abc -- bca
2 2 0 0		|2DUP   ab -- abab
2 -2 0 0	|2DROP ab --
3 -3 0 0	|3DROP abc --
4 -4 0 0	|4DROP abcd --
4 2 0 0		|30 2OVER  abcd -- abcdab
4 0 0 0		|2SWAP  abcd -- cdab
1 -1 1 8	|>R    a -- R: -- a
0 1 -1 8	|R>    -- a R: a --
0 1 0 8		|R      -- a R: a -- a
1 -1 0 8	|R+    a -- R: b -- c
0 1 0 8		|R@+    -- a R: b -- c
1 -1 0 8	|R!+   a -- R: b -- c
0 0 -1 8	|RDROP	R: a --
2 -1 0 0	|AND	ab -- c
2 -1 0 0	|OR    ab -- c
2 -1 0 0	|XOR   ab -- c
1 0 0 0		|NOT    a -- b
2 -1 0 0	|+		ab -- c
2 -1 0 0	|-     ab -- c
2 -1 0 0	|*     ab -- c
2 -1 0 0	|40 /     ab -- c
3 -2 0 0	|*/    abc -- d
3 -2 0 0	|*>>   abc -- d
2 0 0 0		|/MOD   ab -- cd
2 -1 0 0	|MOD    ab -- c
1 0 0 0		|ABS    a -- b
1 0 0 0		|SQRT	a -- b
1 0 0 0		|CLZ	a -- b
3 -2 0 0	|<</	abc -- d
1 0 0 0		|NEG    a -- b
1 0 0 0		|1+     a -- b
1 0 0 0		|4+     a -- b
1 0 0 0		|1-     a -- b
1 0 0 0		|2/     a -- b
1 0 0 0		|2*     a -- b
2 -1 0 0	|<<    ab -- c
2 -1 0 0	|50 >>    ab -- c
1 0 0 0		|@      a -- b
1 0 0 0		|C@     a -- b
1 0 0 0		|W@     a -- b
2 -2 0 0	|!     ab --
2 -2 0 0	|C!    ab --
2 -2 0 0	|W!    ab --
2 -2 0 0	|+!    ab --
2 -2 0 0	|C+!   ab --
2 -2 0 0	|W+!   ab --
1 1 0 0		|@+     a -- bc
2 -1 0 0	|5b !+    ab -- c
1 1 0 0		|C@+    a -- bc
2 -1 0 0	|5d C!+   ab -- c
1 1 0 0		|W@+    a -- bc
2 -1 0 0	|5f W!+   ab -- c
3 -3 0 0	|60 MOVE  abc --
3 -3 0 0	|MOVE> abc --
3 -3 0 0	|CMOVE abc --
3 -3 0 0	|CMOVE> abc --

0 1 0 0		|MEM	-- a
1 0 1 0		|FFIRST   a -- b
0 1 0 0		|FNEXT     -- a
2 -1 0 0	|LOAD   ab -- c
3 -3 0 0	|SAVE   abc --
3 -3 0 0	|APPEND   abc --

1 0 0 0		|UPDATE  a -- a
0 2 0 0		|XYMOUSE -- ab
0 1 0 0		|BMOUSE  -- a
1 -1 0 0	|IKEY!  a --
0 1 0 0		|KEY     -- a
0 1 0 0		|CNTJOY  -- a
0 1 0 0		|GETJOY  -- a

0 1 0 0		|MSEC    -- a
0 3 0 0		|TIME    -- abc
0 3 0 0		|DATE    -- abc
0 0 0 0		|END     --
1 -1 0 0	|RUN    a --
0 1 0 0		|SW      -- a
0 1 0 0		|SH      -- a
0 0 0 0		|CLS     --
0 0 0 0		|REDRAW  --
0 1 0 0		|FRAMEV  -- a
2 -2 0 0	|SETXY  ab --
1 -1 0 0	|PX+!   a --
1 -1 0 0	|PX!+   a --
0 1 0 0		|PX@     -- a

0 1 0 0		|XFB     -- a
0 0 0 0		|>XFB    --
0 0 0 0		|XFB>    --

1 -1 0 0	|PAPER  a --
1 -1 0 0	|INK    a --
0 1 0 0		|INK@    -- a
1 -1 0 0	|ALPHA  a --
2 -2 0 0	|OP     ab --
2 -2 0 0	|LINE   ab --
4 -4 0 0	|CURVE  abcd --
6 -6 0 0	|CURVE3  abcdef --
2 -2 0 0	|PLINE  ab --
4 -4 0 0	|PCURVE abcd --
6 -6 0 0	|PCURVE3 abcdef --
0 0 0 0		|POLI    --
2 -2 0 0	|FCOL   ab --
2 -2 0 0	|FCEN   ab --
2 -2 0 0	|FMAT   ab --
0 0 0 0		|SFILL   --
0 0 0 0		|LFILL   --
0 0 0 0		|RFILL   --
1 -1 0 0	|TFILL  a --

1 0 0 0		|SLOAD   a -- a
1 -1 0 0	|SPLAY  a --
1 0 0 0		|SINFO   a -- a
4 -4 0 0	|SSET  a --

3 -2 0 0	|OPENURL

0 0 0 0		|DOCINI
0 0 0 0		|DOCEND
2 -2 0 0	|DOCAT
2 -2 0 0	|DOCLINE
1 -1 0 0	|DOCTEXT
3 -3 0 0	|DOCFONT
3 -3 0 0 	|DOCBIT
0 2 0 0		|DOCRES
1 1 0 0		|DOCSIZE

1 -1 0 0	|SYSTEM
)


|------------- recorre cada palabra
#pilaint )( 1024
#pilaint> 'pilaint

:pushvar
	deltaD deltaR
	pilaint> !+ !+ 'pilaint> ! ;

:popvar
	pilaint> 8 - dup 'pilaint> !
	@+ 'deltaR ! @ 'deltaD ! ;

:dropvar
	-8 'pilaint> +! ;

|----- pila para condicionales
#sst )( 1024 | pila de pilas
#sst> 'sst

:sst!
	sst> !+ 'sst> ! ;

:sst@
	-4 'sst> +! sst> @ ;

:usaR
	$8 flags or 'flags ! ;

|---- Anonimas
:es[
	pushvar
	1 'pano +! 1 'cano +! ;

:es]
	popvar
    -1 'pano +! ;

|---- BLOQUES
#blockn 0
#block )( 1024	| tipo+info
#blocks )( 1024 | celda comienzo
#blocke )( 1024 | celda fin
#blocki )( 1024 | celda medio

|----- pila para bloques
#pilab )( 256	#pilab> 'pilab

::block.new blockn pilab> !+ 'pilab> ! 1 'blockn +! ;
::block.end -4 'pilab> +! ;
:block.now pilab> 4 - @ ; | -- nblo

:blocka		block.now 2 << 'block + ;

:blCLEAR	0 blocka ! ;
:blIF       blocka dup @ 0 or swap ! ;
:blELSE  	blocka dup @ 1 or swap ! ;
:blWHILE	blocka dup @ 2 or swap ! ;
:blUNTIL  	blocka dup @ 3 or swap ! ;
:blREPEAT  	blocka dup @ 4 or swap ! ;

:blNOSPLIT	block.now 2 << 'block + dup @ $10 or swap ! ;

:blINI	dup block.now 2 << 'blocks + ! ;
:blEND	dup block.now 2 << 'blocke + ! ;
:blMED	dup block.now 2 << 'blocki + ! ;

::blINFO	blocka @ ;

|----- CONDICIONALES
:salto? | adr -- 1/0
	dup 8 - @ $ff and $16 >? ( $23 <? ( drop 1 ; ) ) drop 0 ;

:;?		| adr -- 1/0
	over 8 - @ $ff and $10 =? ( drop 1 ; ) drop 0 ;

:es(
	block.new blCLEAR blINI
	pushvar
	salto? sst!
	;

:es)(
	blMED
	sst@ drop
	salto? 1? ( drop dropvar pushvar 3 sst! ; ) | while
	drop popvar pushvar 2 sst!
|		over 8 - @ $ff and | ;)
|		$10 =? ( blNOSPLIT )
|		drop
	;

:es)	|)
	blEND
	sst@
	0? ( dropvar swap salto? 1? ( blUNTIL )( blREPEAT ) drop swap )
	1 =? ( ;? 1? ( popvar )( dropvar ) drop blIF  )
	2 =? ( dropvar blELSE )
	3 =? ( popvar blWHILE )
	drop
	block.end ;

|----------------------
:esFin
	pano 1? ( drop ; ) drop
	cntfin 0? ( deltaD 'deltaD1fin ! ) drop
	1 'cntfin +! ;

|--------------------
:usoDcalc | u --
	deltaD swap - usoD min 'usoD ! ;

| adr adrt t tabla
:esPal | palabra
	dup 4 - @ 8 >> | obtener palabra

	pick2 =? ( drop $20 flags or 'flags ! ; ) | es recursiva?

    dup dic>inf @ 24 >> 1+ 'nivel !

	dic>mov @
|	dup 12 << 28 >> 'deltaR +! | no se propaga, es flujo de ejecucion
	dup 16 << 24 >> usoDcalc
	24 << 24 >> 'deltaD +!
	;

:esStr | calcula deltaD de string
	dup 4 - @ tok>mem strusestack nip neg 'deltaD +! ;

#lastdircode

:esExe | calcular deltaD de palabra llamada
	lastdircode	| averiguar palabra en pila !!!

	dup dic>inf @ 24 >> 1+ 'nivel !

	dic>mov @
|	dup 12 << 28 >> 'deltaR +! | no se propaga, es flujo de ejecucion
	dup 16 << 24 >> usoDcalc
	24 << 24 >> 'deltaD +!
	;

:esWordV | guarda ultima referencia para exec,
	dup 4 - @ 8 >> 'lastdircode ! ;
| falta no agregar si no tiene mov de pila

:V0 ;

#acct v0 esPal es( es)( es) es[ es] esFin usaR esStr esExe esWordV

:prosstoken | t --
	2 << 'deltainternos +
	c@+ usoDcalc
	c@+ 'deltaD +!
	c@+ 'deltaR +!
	c@ 2 << 'acct + @ exec ;

|-----------------------------
:resetvars | --
	0 dup 'usoD ! dup 'deltaD ! dup 'deltaR !
	dup 'nivel ! dup 'flags ! dup 'cntfin !
	dup 'pano ! 'cano !
	'pilaint 'pilaint> !
	'sst 'sst> !
	0 'blockn !
	'pilab 'pilab> !
	;

:inlinemark
	$f4 nand? (  | no dir, no R, no ;;, no []
		pick2
		cntwords 1- <? (
			dic>len@ MAXINLINE <? ( drop $100 or )( drop ) | inline
			)( drop )
		)
	;


:setvars | nro -- nro
	cntfin 1 >? ( $10 flags or 'flags ! ) drop	| +1;
	cano 1? ( $40 flags or 'flags ! ) drop 		| anon

	nivel 24 <<
	flags or
	over dic>inf dup @
	rot or
	inlinemark
	swap !

	deltaR $f and 8 <<
	usoD $ff and or 8 <<
	cntfin 0? ( deltaD )( deltaD1fin ) nip
	$ff and or
	over dic>mov dup @ rot or swap !
	;

|----------------------------
|----- analiza codigo
|----------------------------
:analisiscode | nro -- nro
	resetvars
	dup dic>tok @
	over dic>len@
	( 1? )( 1- >r
		@+ $ff and prosstoken
		r> ) 2drop
	setvars ;

|----------------------------
|----- analiza variable
|----------------------------
#cntdv     | dir vars
#cntdc     | dir codigo
#cnts      | string
#cntn0     | no ceros (0 puede ser direccion)
#deltaS

:copydeltaS | ar v -- ar v
	over 4 - @ 8 >> dic>mov @ 'deltaS ! ;

:sumavars | adr c -- adr
	$6 >? ( $b <? ( over 4 - @ tok>cte 1? ( 1 'cntn0 +! ) drop  ) )		| NRO
	$b =? ( 1 'cnts +! )												| string
	$c =? ( 1 'cntdc +! copydeltaS ) $e =? ( 1 'cntdc +! copydeltaS )	| word y dir word
	$d =? ( 1 'cntdv +! ) $f =? ( 1 'cntdv +! )							| var y dir var
	drop ;

|--- info de variables
| valor               0
| direccion           1
| direccion codigo    2
| string              3
| lista valores       4
| lista direcciones   5
| lista dir codigos   6
| lista strings       7
| estructura multiple 8
|--------------------
:decodeinfov | -- iv
	cntdv cntdc or cnts or
	0? ( drop 3 <? ( 0 ; ) 4 ; ) drop | todos numeros
	cntdv cntdc or
	0? ( drop 3 <? ( 3 ; ) 7 ; ) drop | hay string, no dv ni dc
	cntdv
	0? ( drop 3 <? ( 2 ; ) 6 ; ) drop | direccion de codigo
	2 <? ( 1 )( 5 ) ;                 | direccion de dato

:analisisvar |  nro -- nro
	0 dup 'deltaS !
	dup 'cntdv ! dup 'cntdc ! dup 'cnts !
	'cntn0 !
	dup dic>tok @ over dic>len@
	( 1? )( 1- >r
		@+ $ff and sumavars
		r> ) 2drop

	dup dic>len@
	decodeinfov 6 <<
	nivel 24 << or
	flags or
	pick2 dic>inf dup @ rot or swap !
	drop

	deltaS $fffff and
	over dic>mov dup @ rot or swap !
	;

|----------------------------
|---- Arbol de llamadas
|----------------------------
:overcode | stack adr tok ctok -- stack adr .tok .ctok
	drop 8 >> dup
	dic>inf dup
	@ dup $1000 + rot !		| +call
	$3ff000 and 1? ( ; )	| n v
	drop rot !+ swap
	dup dup ;

|--------- caso !+ w!+ c!+
:nextis!+ | stack adr v -- stack adr v v
	over @ $ff and
	$5b <? ( ; )
	$5c =? ( ; ) $5e =? ( ; )
	$5f >? ( ; )
	over 1+ dic>inf dup @ $4 or swap !	| set adr!
	;

:overdire | stack adr tok ctok -- stack adr .tok .ctok
	drop 8 >> dup
	dic>inf dup
	@ dup $1000 + $4 or rot !		| +call y adr!
	$3ff000 and 1? ( drop nextis!+ ; )	| n v
	drop rot !+ swap
	dup nextis!+ ;

:rcode | stack nro -- stack
	dup dic>tok @ swap dic>len@
	( 1? )( 1- >r
		@+ dup $ff and
		$c =? ( overcode ) | call word
		$d =? ( overcode ) | var
		$e =? ( overdire ) | dir word
		$f =? ( overdire ) | dir var
		2drop r> ) 2drop ;

:rdata | stack nro -- stack
	dup dic>tok @ swap dic>len@
	( 1? )( 1- >r
		@+ dup $ff and
		$c >=? ( $f <=? ( overdire ) )
		2drop r> ) 2drop ;

|----------- analisa todas o solo las usadas
::tokenpostall
	0 ( cntwords <? )(
		dup dic>inf @ 1 and? ( drop analisisvar )( drop analisiscode )
		1+ ) drop ;

::tokenpostusa
	0 ( cntwords <? )(
		dup dic>call@ 1? ( drop
			dup dic>inf @ 1 and? ( drop analisisvar )( drop analisiscode )
			)( drop )
		1+ ) drop ;

|--------- COMPILA TOKENS 2da PASADA
::tokenpost
	| ...arbol de llamadas...
	cntwords 0? ( drop ; )
	1- dup
	dic>inf dup @ $1000 + swap !
	here !+
	( here >? )(
		4 - dup @
		dup dic>inf @ 1 and? ( drop rdata )( drop rcode )
		) drop
	;

|----- uso externo
:tokpal | tok -- userd Dstack Rstack
	8 >>
::nro>udr | nro -- userd Dstack Rstack
	dic>mov @
	dup 24 << 24 >> swap
	dup 8 << 24 >> swap
	24 >> ;

::tok>udr | tok -- userd Dstack Rstack
	dup $ff and
	8 =? ( drop tokpal ; ) nip
	|18 =? ( ) | exec modifica segun a quien llama
	2 << 'deltainternos +
	c@+ swap
	c@+ swap
	c@ ;

|---------- Calculo uso de pila d
::getusedstack | last ini -- usoD
	resetvars
	( over <? )(
		@+ $ff and prosstoken
		) 2drop
	0 'blockn ! | em
	usoD
	;


|------------ DEBUG bloques
:dumpblock, | n --
	2 <<
	dup 'block + @ "; BL %d (" ,print
	dup 'blocks + @ "%h-" ,print
	dup 'blocki + @ "%h-" ,print
	'blocke + @ "%h)" ,print
	,cr
	;

::infoblock
	";----------------" ,ln
	0 ( blockn <? )(
		dup dumpblock,
		1+ ) drop
	";----------------" ,ln
	;
