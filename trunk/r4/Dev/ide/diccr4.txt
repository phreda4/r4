| memoria + diccionario r4
| PHREDA 2013
|----------------------------------

#:<<boot

|---- includes
| 'string|'mem|first|last
|  0      4    8     12
#:indiceinc )( $fff		| 255 includes
#:indiceinc> 'indiceinc

|---- diccionario
| str|token|info|mov  	16 bytes por palabra
| 0      4     8   12
| >str		->tokenmem
| >>token	->tokencod
| >>>info
| bit  significado
| 1		0 accion 1 dato
| 2		0 local 1 exportado
| 3		0 un ; 1 varios ;
| 4		0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| 5		1 es usado con direccion
| 6
|
| 13-23		llamadas (10 bits)
| 24-32		nivel	(8 bits)
|
| 16-32 largo palabra (en tokens)
| >>>>mov
| byte	significado
| 1		dD (-128..127)
| 2     dU (-128..127)
| 3/    dR ( -8..7 )
| /4	largo en tokens (12 bits)
|-----------------
#:indicepal )( $7ffff	| 32k palabras
#:indicepal> 'indicepal
#:indicepal< 'indicepal

|---- memoria token
#:tokencod )( $ffff
#:tokencod> 'tokencod
#:tokencte )( $ffff
#:tokencte> 'tokencte
#:tokenmem )( $ffff
#:tokenmem> 'tokenmem

::dic>str	4 << 'indicepal + ;
::dic>tok	4 << 'indicepal + 4+ ;
::dic>inf	4 << 'indicepal + 8 + ;
::dic>mov	4 << 'indicepal + 12 + ;

::dic>len@	dic>mov @ 20 >> $fff and ;
::dic>call@	dic>inf @ 13 >> $3ff and ;

::tok>cte	8 >> 'tokencte + @ ;	| tok -- nro
::tok>mem	8 >> 'tokenmem + ;		| tok -- adr
::tok>name	8 >> dic>str @ ;

::diccreset
	'indicepal dup
	'indicepal> ! 'indicepal< !
	'indiceinc 'indiceinc> !
	'tokencod 'tokencod> !
	'tokencte 'tokencte> !
	'tokenmem 'tokenmem> !
	;

::adr>dic
	'indicepal - 4 >> ;

::?palabra | str -- str dir / str 0
	indicepal> 16 -	|---largo
	( 'indicepal >=? )(
		dup @						| str ind pal
		pick2
		=s 0? ( drop )( drop
			dup 8 + @
			%10 and? ( drop ; )( drop indicepal< >=? ( ; ) )
			)
		16 - ) drop
	0 ;

::include? | str -- adr/0
	'indiceinc ( indiceinc> <? )(
		@+ pick2 =s 1? ( drop nip 4 - ; ) drop
		12 + ) 2drop 0 ;

::word+! | tipo --
	indicepal> >r
	tokenmem> r!+	| str del nombre
	tokencod> r!+	| token de comienzo
	r!+				| info de palabra
	0 r!+			| mem?
	r> 0 over ! 'indicepal> ! ;

|---- Compila programa
::,, | n --
	tokencod> !+ 'tokencod> ! ;

::,ctesimilar | n -- d  ; buscar iguales. muy lento si son muchos!!
	'tokencte ( tokencte> <? )( @+
		pick2 =? ( drop nip 'tokencte 4+ - ; )
		drop ) drop
::,cte | n -- d
	tokencte> swap over !+ 'tokencte> ! 'tokencte - ;

:rstr | c --
	tokenmem> c!+ 'tokenmem> ! ;

:realstr | cad -- cad'
	( 1+ dup c@ 1? )(
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 rstr ; ) )
		rstr ) rstr ;

::,str | a -- a' d
	tokenmem> swap realstr swap 'tokenmem - ;

:realcom
	( 1+ dup c@ 1? )(
		32 <? ( drop 0 rstr ; )
		rstr ) rstr ;
::,com | a -- a' d
	tokenmem> swap realcom swap 'tokenmem - ;

:realtok
	( 1+ dup c@ 1? )(
		33 <? ( drop 0 rstr ; )
		rstr ) rstr ;

::,word | a -- a' d
	tokenmem> swap realtok swap 'tokenmem - ;



|----------- DEBUG ---------------
::dumpinc
	verde
	"includes" print cr
	amarillo
	'indiceinc ( indiceinc> <? )(
		@+ "%w " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		cr ) drop ;

::dumpdic
	violeta
	"words" print cr
	verde chome!
	'indicepal ( indicepal> <? )(
		@+ "%s " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		cr allowchome ) drop ;


