| memoria + diccionario r4
| PHREDA 2013
|----------------------------------

| MEM
| las tablas en mem cte
|-----------------
| codigo...
|-----------------  here
| includes...
|-----------------   data
| constantes...		 data>
|----------------- 	 code
|					<<boot
| programa...		 code>

#:data
#:data>
#:code
#:code>
#:<<boot

|---- includes
| 'string|'mem
|  0      4
#:indiceinc )( $7ff		| 256 includes
#:indiceinc> 'indiceinc

|---- diccionario
| str|token|info|mov  	16 bytes por palabra
| 0      4     8   12
| >str		->tokenmem
| >>token	->tokencod
| >>>info
| bit  significado
| 1		0 accion 1 dato
| 2		0 local 1 exportado
| 3		1 es usado con direccion
| 4		0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| 5		0 un ; 1 varios ;
| 6     1 si es recursiva
| 7		1 si tiene anonimas
| 8		1 termina sin ;
|
| 12-24		llamadas (14 bits)
| 25-32		nivel	(8 bits)
|
| 16-32 largo palabra (en tokens)
| >>>>mov
| byte	significado
| 1		dD (-128..127)
| 2     dU (-128..127)
| 3/    dR ( -8..7 )
| /4	largo en tokens (12 bits)
|-----------------
|--- info de variables
| valor               0
| direccion           1
| direccion codigo    2
| string              3
| lista valores       4
| lista direcciones   5
| lista dir codigos   6
| lista strings       7
| estructura multiple 8
|--------------------
#:indicepal )( $3ffff	| 16k palabras
#:indicepal> 'indicepal
#:indicepal< 'indicepal

#:cntwords

::dic>str	4 << 'indicepal + ;
::dic>tok	4 << 'indicepal + 4+ ;
::dic>inf	4 << 'indicepal + 8 + ;
::dic>mov	4 << 'indicepal + 12 + ;

::dic>len@	dic>mov @ 20 >> $fff and ;
::dic>call@	dic>inf @ 12 >> $fff and ;

::tok>mem	8 >> data + ;		| tok -- adr
::tok>cte	8 >> data + @ ;		| tok -- nro
::tok>name	8 >> dic>str @ ;

::adr>dic
	'indicepal - 4 >> ;

::?palabra | str -- str dir / str 0
	indicepal> 16 -	|---largo
	( 'indicepal >=? )(
		dup @						| str ind pal
		pick2
		=s 0? ( drop )( drop
			dup 8 + @
			%10 and? ( drop ; )( drop indicepal< >=? ( ; ) )
			)
		16 - ) drop
	0 ;

::include? | str -- adr/0
	'indiceinc ( indiceinc> <? )(
		@+ pick2 =s 1? ( drop nip 4 - ; ) drop
		4+ ) 2drop 0 ;

::word+! | tipo --
	indicepal> >r
	data> r!+	| str del nombre
	code> r!+	| token de comienzo
	r!+				| info de palabra
	0 r!+			| mem?
	r> 0 over ! 'indicepal> ! ;

|---- Compila programa
::,, | n --
	code> !+ 'code> ! ;

::,cte | n -- d
	data> swap over !+ 'data> ! data - ;

:rstr | c --
	data> c!+ 'data> ! ;

:realstr | cad -- cad'
	( 1+ dup c@ 1? )(
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 rstr ; ) )
		rstr ) rstr ;

::,str | a -- a' d
	data> swap realstr swap data - ;

:realcom
	( 1+ dup c@ 1? )(
		32 <? ( drop 0 rstr ; )
		rstr ) rstr ;
::,com | a -- a' d
	data> swap realcom swap data - ;

:realtok
	( 1+ dup c@ 1? )(
		33 <? ( drop 0 rstr ; )
		rstr ) rstr ;

::,word | a -- a' d
	data> swap realtok swap data - ;


|--- dibuja movimiento pilas
:ncar | n car -- car
	( swap 1? )( 1- swap dup emit 1+ ) drop ;

::printmovword | mov --
	97 >r
	dup 16 << 24 >> | usedD
	neg dup r> ncar >r
	"--" print
	over 24 << 24 >> + | deltaD
	r> ncar >r
	12 << 28 >>
	0 <? ( dup " R:--" print neg r> ncar >r )
	0 >? ( dup " R:" print r> ncar >r "--" print )
	drop rdrop ;

::printinfword | inf --
	dup 12 >> $fff and
	0? ( "NOUSO " print )		| no usada
	drop
	1 and? (
		$4 nand? ( "CTE " print )	| dato constante
	)(
		$20 and? ( "REC " print )	| recursivo
		$80 and? ( "CON " print )	| continuo (sin ;)
	)
	drop
	;


|----------- DEBUG ---------------
::dumpinc
	verde
	indiceinc> 'indiceinc  - 3 >> "%d " print
	"includes" print cr
	amarillo
	chome!
	'indiceinc ( indiceinc> <? )(
		@+ "%w " print
		@+ "%h " print
		cr allowchome ) drop ;

::dumpdic
	violeta
	"words" print cr
	verde chome!
	'indicepal ( indicepal> <? )(
		@+ "%s " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		cr allowchome ) drop ;


::infodic
	code> code - "$%h code " print cr
	data> data - "$%h data " print cr
	;