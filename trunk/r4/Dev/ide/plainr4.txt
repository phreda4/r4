| plainr4.txt
| PHREDA 2014
|---------------------------------------
| genera codigo en :r4 y lo graba en "plain.txt"
| Sin includes
| Sin exportadas ::->:  ##->#
| + Sin Anonimas
| + Reemplaza Ctes
| + Copia Inlines
| + Calcula Ctes
| * Transforma Calculos
|------------------------------------------------

^r4/lib/print.txt
|^r4/system/mem-ed.txt
^r4/dev/ide/tokenr4.txt

|-- nombre a nro
|:nro>dicn   8 >> "w%h" mprint ;		| w<nro palabra>
:nro>dicn   8 >> 4 << 'indicepal + @ "%w" mprint ; | nombre

:genCte | valor -- tok
	,cte 8 << 7 or ;

|--- Accion
#nroanon 0
#actanon 0

#anons )( 128
#anons> 'anons
:>aa anons> !+ 'anons> ! ;
:aa> -4 'anons> +! anons> @ ;
:-aa 'anons 'anons> ! ;
:aa# anons> 'anons - 2 >> ;

#buffaux )( 4096
#buffaux> 'buffaux
:+buff	buffaux> !+ 'buffaux> ! ;
:-buff	'buffaux 'buffaux> ! ;

|--- optimiza
:aa1@ | adr+ -- adr- a
	4 - dup dup 4+ buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> ;

:aa2@ | adr+ -- adr- a b
	8 - dup dup 8 + buffaux> over - 2 >> move | d s c
	-8 'buffaux> +!
	aa> aa> swap ;

:aa3@ | adr+ -- adr- a b c
	12 - dup dup 12 + buffaux> over - 2 >> move | d s c
	-12 'buffaux> +!
	aa> aa> aa> rot rot ;

:aa1! | adr- v -- adr-
	dup >aa genCte over 4 - ! ;

:aa2@! | adr+ -- adr- a b
	4 - dup dup 4 + buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> aa> swap ;

:aa2! | adr- a b -- adr-
	swap dup >aa genCTE pick2 8 - !
	dup >aa genCTE over 4 - ! ;

| adr+ val -- adr+
:oAND	| 53 ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ AND aa1! ;
:oOR    |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ OR aa1! ;
:oXOR   |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ XOR aa1! ;
:oNOT   | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ NOT aa1! ;
:o+		|ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ + aa1! ;
:o-     |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ - aa1! ;
:o*     |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ * aa1! ;
:o/     |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ / aa1! ;
:o*/    |abc -- d
	aa# 3 <? ( 2drop -aa ; ) drop
	drop aa3@ */ aa1! ;
:o*>>   |abc -- d
	aa# 3 <? ( 2drop -aa ; ) drop
	drop aa3@ *>> aa1! ;
:o/MOD  | ab -- cd
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@! /MOD aa2! ;
:oMOD   | ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ MOD aa1! ;
:oABS   | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ ABS aa1! ;
:oSQRT	|a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ SQRT aa1! ;
:oCLZ	|a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ CLZ aa1! ;
:o<</	|abc -- d
	aa# 3 <? ( 2drop -aa ; ) drop
	drop aa3@ <</ aa1! ;
:oNEG   | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ NEG aa1! ;
:o1+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ 1+ aa1! ;
:o4+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ 4+ aa1! ;
:o1-    | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ 1- aa1! ;
:o2/    | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ 2/ aa1! ;
:o2*    | a -- b
	aa# 1 <? ( 2drop -aa ; ) drop
	drop aa1@ 2* aa1! ;
:o<<    |ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ << aa1! ;
:o>>    | 76ab -- c
	aa# 2 <? ( 2drop -aa ; ) drop
	drop aa2@ >> aa1! ;

#optim oAND	oOR oXOR oNOT o+ o- o* o/ o*/ o*>> o/MOD oMOD oABS oSQRT oCLZ o<</ oNEG o1+ o4+ o1- o2/ o2* o<< o>>

:optN | adr+ val tok -- adr+
	$39 - 2 << 'optim + @ exec ;

:addN | adr+ val tok -- adr+
	drop tok>cte >aa ;

:untoken | adr+ val tok -- adr+
	$7 >=? ( $a <=? ( addN ; ) )	| constante
	$39 >=? ( $50 <=? ( optN ; ) )	| operacion
	2drop -aa
	;

|-------- descarga buffer -------
:buffp | adr -- adr'
	@+ dup $ff and
	$15 =? ( 2drop nroanon "'_aa%h " ,print 1 'nroanon +! ; )
	drop tokenstr ,print ;

:generabuff
	'buffaux ( buffaux> <? )( buffp ,sp ) drop
	,cr ;

|------- rellena buffer ---------
:saltea | adr $14 -- adr' $15
	drop
	1 ( 1? )( swap
		@+ $ff and
		$14 =? ( rot 1+ rot rot )	| anonima anidada
		$15 =? ( rot 1- rot rot )	| fin anonima
		drop
		rot 1- swap rot
		) drop
	$15 ;

:cte?? | tok $d -- tok $d
	over 8 >> dic>inf @ $4 and? ( drop ; ) 2drop
	8 >> dic>tok @ 4+ @ dup ;

:copybuff | adr cnt --
	-buff
	( 1? )( 1- swap
		@+
		$14 =? ( saltea )
		dup $ff and
		$d =? ( cte?? )	| reemplaza ctes
		drop
		+buff swap )
	2drop
	|--- optimiza buffer
	'buffaux ( buffaux> <? )(
		@+ dup $ff and untoken
		) drop ;

:esanonima | cnt tok -- cnt' tok'
	dup 4 - @ 8 >> code +	| desde
	over over - 2 >> 1-		| cantida de tokens
	copybuff
	actanon ":_aa%h " ,print 1 'actanon +!
	generabuff ;

:anonimas | nro inf -- nro inf
	over dic>tok @ pick2 dic>len@
	( 1? )( 1- swap
		@+ $ff and
		$15 =? ( drop esanonima )( drop )
		swap ) 2drop ;

:escodigo | nro -- nro
	dup dic>inf @ $40 and? ( anonimas ) drop
	dup dic>tok @ over dic>len@
	copybuff
	generabuff
	;

:esvariable
	dup dic>inf @ $4 nand? ( drop ; ) drop | constante
	dup dic>tok @ over dic>len@
	( 1? )( 1- swap @+ tokenstr ,print ,sp swap )
	2drop
	;

|----------------------
::makeplainsave
	0 'nroanon !
	0 'actanon !
	mark
	"| plain r4 " ,s ,cr
	"|-----------------------" ,s ,cr
	0 ( cntwords <=? )(
		dup dic>call@ 1? ( drop
			dup dic>inf @ 1 and? ( drop esvariable )( drop escodigo )
			)( drop )
		1+ ) drop

	"r4asm/plain.txt" savemem
	empty
	;

::makeplain
	0 'nroanon !
	mark
	"| plain r4 " ,s ,cr
	"|-----------------------" ,s ,cr
	0 ( cntwords <=? )(
|		dup "%d " ,print ,cr
		dup dic>call@ 1? ( drop	| solo palabras llamadas
			dup dic>inf @ 1 and? ( drop esvariable )( drop escodigo )
			)( drop )
		1+ ) drop

	empty
	;

