| Vstack r4
| PHREDA 2014
|-----------------------

|-------- tipos de celdas
| info/tipo
| tipo:NUMERO CTE 'STRING 'CODIGO 'DATO REGISTRO COPIA
| $10 . indireccion
| valor
| suma
| info2
#celln 0
#cells )( 8192

:newcell | valor tipo -- nro
	celln 4 << 'cells + >r
	r!+		| tipo
	r!+		| valor
	0 r!+	| suma
	0 r> !	| info2
	celln dup 1+ 'celln !
	;

:value | nro -- valor
	4 << 'cells + 4+ @ ;
:suma | nro -- valor
	4 << 'cells + 8 + @ ;
:shift | nro -- valor
	4 << 'cells + 12 + @ ;

| valor -- nrocell
:newNRO	0 newcell ;			| 123
:newCTE	1 newcell ;			| FREEMEM
:newSTR	2 newcell ;			| "123"
:newCOD 3 newcell ;			| 'exit
:newDAT 4 newcell ;			| 'x
:newVAR 4 $10 or newcell ;	| x
:newREG 5 newcell ;			| eax
:newSTK 5 $10 or newcell ;	| [asi]
:newCPY 6 newcell ;			| eax.

:cell+ | add nro --
	| si hay mem resolver!!!
	4 << 'cells +
	8 + +! ;

|--- PILA DATO
#dpila )( 1024
#dpila> 'dpila

|--- PILA RETORNO
#rpila )( 1024
#rpila> 'rpila

|----- dpila
::d.nro 	2 << 'dpila + @ ;
::d.rel		1+ 2 << dpila> swap - @ ;
::d.cnt		dpila> 'dpila - 2 >> ;
::d.pop		-4 'dpila> +! dpila> @ ;
::d.push 	dpila> !+ 'dpila> ! ;
::d.TOS		dpila> 4 - @ ;
::d.NOS 	dpila> 8 - @ ;
::d.PK2 	dpila> 12 - @ ;
::d.PK3 	dpila> 16 - @ ;
::d.PK4 	dpila> 20 - @ ;
::d.PK5 	dpila> 24 - @ ;

::d.swap	dpila> 8 - >r r@+ r@+ r> 8 - !+ ! ;
::d.rot		dpila> 12 - >r r@+ r@+ r@+ swap r> 12 - !+ !+ ! ;
::d.2swap	dpila> 16 - >r r@+ r@+ swap r@+ r@+ swap r> 16 - !+ !+ !+ ! ;

::d.dup		d.TOS newCPY d.push ;
::d.over	d.NOS newCPY d.push ;
::d.pick2	d.PK2 newCPY d.push ; |PICK2  abc -- abca
::d.pick3	d.PK3 newCPY d.push ; |PICK3  abcd -- abcda
::d.pick4	d.PK4 newCPY d.push ; |PICK4  abcde -- abcdea
::d.2dup	d.over d.over ;	|2DUP   ab -- abab
::d.2over	d.pick3 d.pick3 ; |2OVER  abcd -- abcdab

::d.drop
	d.pop drop
|	cellREG? -? ( drop ; )
|	'dpila ( dpila> <? )( @+ esreg ) drop
|	'rpila ( rpila> <? )( @+ esreg ) drop
|	-? ( drop ; )
|	reg!!
	;

::d.nip		d.swap d.drop ;
::d.4DROP	d.drop
::d.3DROP	d.drop
::d.2DROP	d.drop d.drop ;

::r.cnt		rpila> 'rpila - 2 >> ;
::r.pop		-4 'rpila> +! rpila> @ ;
::r.push	rpila> !+ 'rpila> ! ;
::r.tos		rpila> 4 - @ ;
::r.drop	r.pop d.push d.drop ;

:r.rel		1+ 2 << rpila> swap - @ ;
:r.ini 		'rpila 'rpila> ! ;

|---- imprime celda
#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB" "SYSPAPER" "SYSXYM" "SYSBM" "SYSKEY"

#sysregs "eax" "ebx" "ecx" "edx" "edi" "esi" "ebp"
#sysregw "ax" "bx" "cx" "dx" "di" "si" "bp"
#sysregb "al" "bl" "cl" "dl" "*" "*" "*"
#CNTREG  7

:list2str swap ( 1? )( 1- swap >>0 swap ) drop ;

:mt0 value "$%h" ,print ;			|--	0 nro 	33
:mt1 value 'syscons list2str ,s ;	|--	1 cte	XRES
:mt2 value "str%h" ,print ;			|--	2 str   "hola"
:mt3 value "w%h" ,print ;			|--	3 cod  'func
:mt4 value "w%h" ,print ;			|--	4 dat  'var
:mt5 value 'sysregs list2str ,s ;	|-- 8 reg 	eax
#tiposrm mt0 mt1 mt2 mt3 mt4 mt5 0 0 0

:mt5b value 'sysregb list2str ,s ;
#tiposrmb mt0 mt1 mt2 mt3 mt4 mt5b 0 0 0

:mt5w value 'sysregw list2str ,s ;
#tiposrmw mt0 mt1 mt2 mt3 mt4 mt5w 0 0 0

::,REG | nro --
	'sysregs list2str ,s ;

::,cell | nro --
|	cellCOPYN
	swap $10 and? ( "dword [" ,s )
	swap 2 << 'tiposrm + @  exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

::,cellb | nro --
|	cellCOPYN
	swap $10 and? ( "byte [" ,s )
	swap 2 << 'tiposrmb + @ exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

::,cellw | nro --
|	cellCOPYN
	swap $10 and? ( "word [" ,s )
	swap 2 << 'tiposrmw + @ exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

|:,cell2REG | cell reg --
|	over cell0?
|	1? ( drop nip "xor " ,s dup ,REG "," ,s ,REG ,cr ; ) drop
|	"mov " ,s ,REG "," ,s ,CELL ,cr ;

|-------------------------------
:resetStack
	0 'celln !
	'dpila 'dpila> !
	'rpila 'rpila> !
	;


::iniNormStack | uses --
	resetStack
	0? ( drop ; )
	1- ( 1? )( 1-
		5 newSTK	| asi
		over 2 << over cell+
		d.push
		) drop
	0 newREG d.push | eax
	;

::printStack
	;
