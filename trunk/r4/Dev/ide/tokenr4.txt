| token r4
| PHREDA 2013
|----------------------------------
| 0
| 1 :
| 2 ::
| 3 #
| 4 #:
| 5 |
| 6 ^
| 7 dec
| 8 hex
| 9 bin
| A fix
| B str
| C wor
| D var
| E dwor
| F dvar
| 10.. macro ; ..
|----------------------------------
^r4/lib/macrosr4.txt
^r4/dev/ide/diccr4.txt
^r4/dev/ide/tokenrun.txt

#error 0
#error> 0

#strerror
"Ok"

"Palabra no definida"
"Palabra sin direccion"

"Desborde de Pila"
"Escases de Pila"
"Pila Incompatible"

"Falta ;"
"Bloque mal cerrado"

"No existe Libreria"
0

#strerrorEN
"Ok"

"Undefined Word"
"No Word Adress"

"Stack Overflow"
"Stack Underflow"
"Stack not match"

"Need ;"
"Bad Structure"

"Library not exist"
0

:tokenerror
	;

|---- Compila programa
:,, | n --
	tokencod> !+ 'tokencod> ! ;

:,ctesimilar | n -- d  ; buscar iguales. muy lento si son muchos!!
	'tokencte ( tokencte> <? )( @+
		pick2 =? ( drop nip 'tokencte 4+ - ; )
		drop ) drop
:,cte | n -- d
	tokencte> swap over !+ 'tokencte> ! 'tokencte - ;

:rstr | c --
	tokenmem> c!+ 'tokenmem> ! ;

:realstr | cad -- cad'
	( 1+ dup c@ 1? )(
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 rstr ; ) )
		rstr ) rstr ;

:,str | a -- a' d
	tokenmem> swap realstr swap 'tokenmem - ;

:realcom
	( 1+ dup c@ 1? )(
		32 <? ( drop 0 rstr ; )
		rstr ) rstr ;
:,com | a -- a' d
	tokenmem> swap realcom swap 'tokenmem - ;

:realtok
	( 1+ dup c@ 1? )(
		33 <? ( drop 0 rstr ; )
		rstr ) rstr ;

:,word | a -- a' d
	tokenmem> swap realtok swap 'tokenmem - ;

:pasapal
	( c@+ 1? )( 33 <? ( drop 1- ; ) drop ) drop 1- ;

|----------- genera token
:essistema	| str n -- str
	8 << ,, ;
:esdefe | str -- str
	,word 8 << 2 or ,, ;
:esdef | str -- str
	dup c@ $3A =? ( drop 1+ esdefe ; ) drop
	,word 8 << 1 or ,, ;
:esvare | str -- str
	,word 8 << 4 or ,, ;
:esvar | str -- str
	dup c@ $3A =? ( drop 1+ esvare ; ) drop
	dup c@
	,word 8 << 3 or ,, ;

:escom | str -- str
	,com 8 << 5 or ,, ;
:esinclude | str -- str
	,word 8 << 6 or ,, ;

:tiponro | -- tipon
	basen
	2 =? ( drop 9 ; )
	10 =? ( drop 7 ; )
	16 =? ( drop 8 ; )
	-1 =? ( drop 10 ; )
	drop ;
:esnro | val --
	,ctesimilar 8 << tiponro or ,, ;
:escadena | str -- str
	,str 8 << 11 or ,, ;

:espalabra
	8 << 12 or ,, ;

:esdir
	8 << 14 or ,, ;

:esmacro
	16 + ,, pasapal ;

|--- busca palabra
:palabra | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )	| quitar espacios
	$5e =? ( drop esinclude ; )	| $5e ^  Include
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$3A =? ( drop esdef ; )		| $3a :  Definicion
	$23 =? ( drop esvar ; )		| $23 #  Variable
	$22 =? ( drop escadena ; )	| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup	| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnro ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnro ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
	dup ?sistema 1? ( nip essistema ; ) drop        | sistema solo directo

 	'error> ! 1 'error ! 0 ;

:palabradef | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )	| quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$3A =? ( drop esdef ; )		| $3a :  Definicion
	$23 =? ( drop esvar ; )		| $23 #  Variable
	$22 =? ( drop escadena ; )	| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup	| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnro ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnro ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
 	'error> ! 1 'error ! 0 ;


:esnrov
	;
:esmacrov
	;

:finnrosv
	;

:palabravar | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )	| quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$3A =? ( drop esdef ; )		| $3a :  Definicion
	$23 =? ( drop esvar ; )		| $23 #  Variable
	$22 =? ( drop escadena ; )	| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup	| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnrov ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnrov ; ) drop | numero
	dup ?macro 1? ( esmacrov ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
 	'error> ! 1 'error ! 0 ;

#modo
#modos 'palabra 'palabradef 'palabravar 0

|------------------------------------------------------------
| a token
|------------------------------------------------------------
:tokenreset
	0 'error !
	0 'error> !
	'tokencod 'tokencod> !
	'tokencte 'tokencte> !
	'tokenmem 'tokenmem> !
	;

::str2token | adr -- error/0
	tokenreset
	0 'modo !
	( modo 2 << 'modos + @ exec 0? ) drop
	error> ;

|------------------------------------------------------------
| a pad
|------------------------------------------------------------
::token2str | buff --
	mark 'here !
	'tokencod ( tokencod> <? )(
		@+

		) 2drop
	empty ;

|----------- DEBUG ---------------
::dumptok
	'tokencod ( tokencod> <? )(
		@+ "%h " print
		) drop
	;