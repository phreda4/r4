| token r4
| PHREDA 2013
|----------------------------------
| 0
| 1 :
| 2 ::
| 3 #
| 4 #:
| 5 |
| 6 ^
| 7 dec
| 8 hex
| 9 bin
| A fix
| B str
| C wor
| D var
| E dwor
| F dvar
| 10.. macro ; ..
|----------------------------------
^r4/lib/macrosr4.txt
^r4/dev/ide/diccr4.txt
^r4/dev/ide/tokenrun.txt
^r4/dev/ide/tokenprint.txt

^r4/lib/trace.txt

#modocomp 	| modo compilador 0-nada 1-def 2-var
#nroerror 0
#:poserror 0

:escom
	( c@+ 1? )( 14 <? ( drop 1- ; ) drop ) drop 1- ;
:escad
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( drop 1- ; ) ) drop ) drop 1- ;
:pasapal
	( c@+ 1? )( 33 <? ( drop 1- ; ) drop ) drop 1- ;

|------------------------------------------------------------
|---  includes
|------------------------------------------------------------
#auxstr )( 256

:esinc 	| a -- a' ; incluye codigo
	1+ dup ?include 1? ( drop ; ) drop
	'auxstr over copynom
	here 'auxstr load	| carga include
	here =? ( 2 'nroerror ! drop 0 ; )
	here pick2 indiceinc> !+ !+ 0 dup rot !+ !+ 'indiceinc> !
	0 swap c!+ 'here !
	pasapal ;

:includepal | str -- str'
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ ) | quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$22 =? ( drop escad ; )		| $22 "	 Cadena
	$5e =? ( drop esinc ; )		| $5e ^  Include
	drop pasapal ;

::loadincludes | str -- err/0
	( includepal 0? ) drop 'poserror !
	nroerror 1? ( ; )
	( drop indiceinc>
		'indiceinc ( indiceinc> <? )(
			4+ @+
			( includepal 0? ) drop 'poserror !
			nroerror 1? ( nip nip ; ) drop
			8 + ) drop
		indiceinc> =? )
	drop 0 ;

|----------- genera token
:essistema	| str n -- str
	8 << ,, ;
:esdefe | str -- str
	2 word+!
	1+ ,word 8 << 2 or ,, ;
:esdef | str -- str
	1 'modocomp !
	dup 1+ c@ $3A =? ( drop esdefe ; ) drop
	0 word+!
	,word 8 << 1 or ,, ;

:esvare | str -- str
	3 word+!
	1+ ,word 8 << 4 or ,, ;
:esvar | str -- str
	2 'modocomp !
	dup 1+ c@ $3A =? ( drop esvare ; ) drop
	1 word+!
	,word 8 << 3 or ,, ;

:=pre | adr "str" -- adr 1/0
	over swap
	( c@+ 1? )( | adr adr' "str" c
		toupp rot c@+ toupp rot
		<>? ( 3drop 0 ; )
		drop swap ) 3drop
	1 ;

:escom | str -- str
	"|WIN|" =pre 1? ( drop 5 + ; ) drop 	| Compila para WINDOWS
	( c@+ 1? )( 13 =? ( drop 1- ; ) drop ) drop 1- ;	| no graba comentarios
|	,com 8 << 5 or ,, ; 								| *****graba comentarios

:esinclude | str -- str
	,word dup 8 << 6 or ,,

	'tokenmem + |realinc ****** parseo aqui
	drop
	;

:tiponro | -- tipon
	basen
	2 =? ( drop 9 ; )
	10 =? ( drop 7 ; )
	16 =? ( drop 8 ; )
	-1 =? ( drop 10 ; )
	drop ;
:esnro | val --
	,cte 8 << tiponro or ,, ;
|	,ctesimilar 8 << tiponro or ,, ;	|*** reutiliza memoria

:escadena | str -- str
	,str 8 << 11 or ,, ;

:espalabra | dir --
	dup 8 + @ %1 and? ( 13 )( 12 ) nip
	swap adr>dic 8 << or ,,
	pasapal ;

:esdir | dir --
	dup 8 + @ %1 and? ( 15 )( 14 ) nip
	swap adr>dic 8 << or ,,
	pasapal ;

|--- Compila saltos
#salto
#pilac )( 128	#pilac> 'pilac	|----- pila de compilador

:c.ini 'pilac 'pilac> ! ;
:c.push pilac> !+ 'pilac> ! ;
:c.pop -4 'pilac> +! pilac> @ ;
:c.cnt pilac> 'pilac - ;

:hole	     tokencod> 4 - c.push ;
:label	     tokencod> c.push ;
:holefix     tokencod> c.pop dup >r 4+ - 8 << r @ or r> ! ;
:labelfix    c.pop tokencod> 4 - dup @ rot tokencod> - 8 << or swap ! ;

|--- calculo de longitud
:finpalabra
	0 'modocomp !
	;

|---  Macros
:c;     c.cnt 0? ( finpalabra ) drop ; | falta si bloque no esta nivelado
:c(     salto 1? ( hole 1 )( label 2 ) c.push drop ;
:c)(    c.pop salto 0? ( drop
				1 =? ( drop hole c.pop holefix c.push 1 c.push ; )
			)( drop
				2 =? ( drop c.pop hole c.push 3 c.push ; ) ) drop
			3 'nroerror ! 	0 ;
:c)     c.pop salto 0? ( drop
				1 =? ( drop holefix ; )
				2 =? ( drop labelfix ; )
				3 =? ( drop labelfix holefix ; ) drop
				4 'nroerror ! 0 ;
			)( drop
				2 =? ( drop labelfix ; ) ) drop
			5 'nroerror ! 0 ;
:c[     hole label 4 c.push ;
:c]     | ** es ; el anterior token? NO-> error
		c.pop 4 <>? ( 6 'nroerror ! 0 nip ; ) drop
		c.pop holefix drop ; | agrega lit direccion

#amacro 'c; 'c( 'c)( 'c) 'c[ 'c]

|---- palabras de la memoria
:m8 | nro8 --
	tokenmem> c!+ 'tokenmem> ! ;
:m16 | nro16 --
	tokenmem> w!+ 'tokenmem> ! ;
:m32 | nro32 --
	tokenmem> !+ 'tokenmem> ! ;
:mcnt | nro --
	'tokenmem> +! ;

#unidad 'm32

:d;		;
:d(		unidad c.push 'm8 'unidad ! ;
:d)(	'mcnt 'unidad ! ;
:d)		c.pop 'unidad ! ;
:d[ 	unidad c.push 'm16 'unidad ! ;
:d] 	c.pop 'unidad ! ;

#dmacros 'd; 'd( 'd)( 'd) 'd[ 'd]

:esmacrod
	7 <? ( 1- 2 << 'dmacros + @ exec pasapal ; )
	8 'nroerror !
	pasapal ;

:esmacro
	modocomp 2 =? ( drop esmacrod ; ) drop
	dup 15 + ,,
	7 <? ( dup 1- 2 << 'amacro + @ exec 0? ( nip pasapal ; ) )
	7 >? ( 20 <? ( 1 )( 0 ) )( 0 ) 'salto ! | despues del exec !!!
	drop
	pasapal ;

|--- busca palabra
::compilatoken | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )	| quitar espacios
	$5e =? ( drop esinclude ; )	| $5e ^  Include
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$3A =? ( drop esdef ; )		| $3a :  Definicion
	$23 =? ( drop esvar ; )		| $23 #  Variable
	$22 =? ( drop escadena ; )	| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup	| $27 ' Direccion
		?macro 1? ( 3drop 'poserror ! 7 'nroerror ! 0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'poserror ! 1 'nroerror ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnro ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnro ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop						| macro
	?palabra 1? ( espalabra ; ) drop		| palabra
|	dup ?sistema 1? ( nip essistema ; ) 2drop        | sistema solo directo
 	'poserror ! 1 'nroerror ! 0 ;


#errormsgl
"Palabra No Encontrada"
"No Existe Libreria"
"Bloque mal formado )("
"Bloque mal formado " | salto desconocido
"Bloque mal formado )"
"Definicion anonima mal cerrada"
"Las palabras BASE no tienen direccion"
"Macro en Dato"
0

::errormsg | nro -- ""
	1- 'errormsgl swap
	( 1? )( 1- swap >>0 swap ) drop ;

|----------- DEBUG ---------------

:codeprint
	'tokencod ( tokencod> <? )(
		@+ |dup "(%h)" print
		tokencolor tokenstr allowcr	printx sp
		) drop ;

:showdump
	fonti
	show clrscr
		tokencod> 'tokencod - 2 >> "%d tokens" print cr
|		dumpdic
		codeprint
		'exit >esc<
		cminiflecha ;

|------------------------------------------------------------
| a token
|------------------------------------------------------------

::str2token | adr -- error/0
	0 dup 'poserror ! 'nroerror !
	0 'modocomp !
	(
|		showdump
		compilatoken 0? ) drop
	nroerror ;


|-----------------------
#lista 10 16 2 -1

:setbasen | base --
	7 - 2 << 'lista + @ 'basen ! ;

::stacktotoken
	'dpila ( dpila> <? )(
		@+ setbasen @+ esnro
		) drop
	;