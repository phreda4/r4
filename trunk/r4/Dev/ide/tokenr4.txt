| token r4
| PHREDA 2013
|----------------------------------
^r4/lib/macrosr4.txt


^r4/lib/macrosr4.txt

#error 0
#error> 0
#tokenpad )( 4096
#tokenpad>
#tokencte )( 1024
#tokencte>
#tokenmem )( 1024
#tokenmem>

:tokenreset
	0 'error !
	0 'error> !
	'tokenpad 'tokenpad> !
	'tokencte 'tokencte> !
	'tokenmem 'tokenmem> !
	;

#strerror
"Ok"

"Palabra no definida"
"Palabra sin direccion"

"Desborde de Pila"
"Escases de Pila"
"Pila Incompatible"

"Falta ;"
"Bloque mal cerrado"

"No existe Libreria"
0

#strerrorEN
"Ok"

"Undefined Word"
"No Word Adress"

"Stack Overflow"
"Stack Underflow"
"Stack not match"

"Need ;"
"Bad Structure"

"Library not exist"
0

:tokenerror
	;

|---- Compila programa
:,, | n --
	tokenpad> !+ 'tokenpad> ! ;

:,ctesimilar | n -- d  ; buscar iguales. muy lento si son muchos!!
	tokencte ( tokencte> <? )( @+
		pick2 =? ( drop nip tokencte 4+ - ; ) drop )
:,cte | n -- d
	tokencte> swap over !+ 'tokencte> ! tokencte - ;

:rstr | c --
	tokenmem> c!+ 'tokenmem> ! ;

:realstr | cad -- cad'
	( 1+ dup c@ 1? )(
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 rstr ; ) )
		rstr ) rstr ;

:,str | a -- a' d
	tokenmem> swap realstr swap tokenmem - ;

:realcom
	( 1+ dup c@ 1? )(
		32 <? ( drop 0 rstr ; )
		rstr ) rstr ;
:,com | a -- a' d
	tokenmem> swap realcom swap tokenmem - ;

:realtok
	( 1+ dup c@ 1? )(
		33 <? ( drop 0 rstr ; )
		rstr ) rstr ;

:,word | a -- a' d
	tokenmem> swap realtok swap tokenmem - ;

:escom
	,com 8 << 2 or ,, ;
:esinclude
	,word 8 << 0 or ,, ;
:esdefinicion
	,word 8 << 1 or ,, ;
:esvariable
	,word 8 << 2 or ,, ;
:escadena
	,str 8 << 3 or ,, ;
:esdir
	8 << 10 or ,,;
:esnro
	,ctesimilar 8 << 4 or ,, ;
:esmacro
	13 ,, ;
:espalabra
	8 << 8 or ,, ;
:essistema
	8 << 9 or ,, ;

|--- busca palabra
:palabra | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )		| quitar espacios
	$5e =? ( drop esinclude ; )		| $5e ^  Include
	$7c =? ( drop escom ; )			| $7c |	 Comentario
	$3A =? ( drop esdefinicion ; )	| $3a :  Definicion
	$23 =? ( drop esvariable ; )	| $23 #  Variable
	$22 =? ( drop escadena ; )		| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup		| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnro ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnro ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
	dup ?sistema 1? ( nip essistema ; ) drop        | sistema solo directo

 	'error> ! 1 'error ! 0 ;

:palabradef | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )		| quitar espacios
	$7c =? ( drop escom ; )			| $7c |	 Comentario
	$3A =? ( drop esdefinicion ; )	| $3a :  Definicion
	$23 =? ( drop esvariable ; )	| $23 #  Variable
	$22 =? ( drop escadena ; )		| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup		| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnro ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnro ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
 	'error> ! 1 'error ! 0 ;


:esnrov
	;
:esmacrov
	;

:finnrosv
	;

:palabravar | str -- str'/0
	( dup c@ 33 <? )(
		0? ( nip ; ) drop 1+ )		| quitar espacios
	$7c =? ( drop escom ; )			| $7c |	 Comentario
	$3A =? ( drop esdefinicion ; )	| $3a :  Definicion
	$23 =? ( drop esvariable ; )	| $23 #  Variable
	$22 =? ( drop escadena ; )		| $22 "	 Cadena
	$27 =? ( drop 1+ dup dup		| $27 ' Direccion
		?macro 1? ( 3drop
			'error> ! 2 'error !
			0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		'error> ! 1 'error ! 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnrov ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnrov ; ) drop | numero
	dup ?macro 1? ( esmacrov ; ) drop				| macro
	dup ?palabra 1? ( nip espalabra ; ) drop		| palabra
 	'error> ! 1 'error ! 0 ;

#modo
#modos 'palabra 'palabradef 'palabravar 0

|------------------------------------------------------------
| a token
|------------------------------------------------------------
::str2token | adr -- error/0
	tokenreset
	0 'modo !
	( modo 2 << 'modos + exec 0? ) drop
	error> ;

|------------------------------------------------------------
| a pad
|------------------------------------------------------------
::token2str | buff --
	mark 'here !
	'tokenpad ( tokenpad> <? )(
		@+

		) 2drop
	empty ;