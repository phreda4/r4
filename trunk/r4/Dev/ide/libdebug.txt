| lib debug
| 2014 PHREDA
|---------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt
|^r4/lib/codecolor.txt

^r4/lib/dlgfile.txt

^r4/dev/ide/tokenr4.txt
^r4/dev/ide/plainr4.txt
^r4/dev/ide/vstackr4.txt

#filename )( 1024
#srcode
#error
#rsize 30

#iniword
#actual

|----------------------------
:tokenizacode
	srcode tokeniza 1? ( errormsg 'error ! ; ) drop
	"Ok." 'error !
|	cntwords rsize - 1+ -? ( 0 nip ) 'iniword !
	;

|--- carga archivo y tokeniza
:loadfile
	"r4" dlgfileload 0? ( drop ; )
	dup 'filename strcpy
	here dup 'srcode ! swap load 0 swap c!+ 'here !
	tokenizacode
	tokenpostall
	;

|--- carga..genera plain y analiza otra vez
:loadplain
	"r4" dlgfileload 0? ( drop ; )
	dup 'filename strcpy
	modoasm
	mark
	here 'srcode !
	"^r4/system/asmbase/asmbase.txt" ,ln
	here swap load 0 swap c!+ 'here !
    tokenizacode
	tokenpostusa
	mark
	makeplain
	"r4asm/plain.txt" savemem
	empty
	empty
	here dup 'srcode !
	"r4asm/plain.txt" load 0 swap c!+ 'here !
	tokenizacode
	tokenpostall
	;


:genplain
|	makeplainsave
	mark makeplain empty here memmap
	;

|------------------------------------------
#lineactual
#lineapag
#tokenword
#tokenlen

:drawwordll | nro --
	tokenlen >=? ( drop ; )
	lineactual =? ( blanco "=>" print )
	2 << tokenword + @
	tokencolor tokenstr print sp
	;

:drawwordl
	0 ( rsize <? )(
		dup lineapag + drawwordll cr
		1+ ) drop ;

:refrescal
	;

:mainana
	0 'lineactual !
	0 'lineapag !
	actual
	dup dic>tok @ 'tokenword !
	dup dic>len@ 'tokenlen !
	dic>mov @ 16 << 24 >> neg iniNormStack
	show clrscr
		dup "%d " print
		actual 4 << 'indicepal + @ "%s" print
		cr
		drawwordl
		printStack

		[ d.rot ; ] <f1>
		[ ; ] <f2>

		[ 1 'lineactual +! refrescal ; ] <dn>
		[ -1 'lineactual +! refrescal ; ] <up>

		'exit >esc<
		cminiflecha ;

|---------------------------------

:drawline | nro -- nro
	cntwords >? ( ; )
	actual =? ( "=>" print )
	blanco
	dup 4 << 'indicepal +
	4+ |@+ "%s" print
	@+ swap |"%h" print
	@+
	dup 24 >> $ff and "%d " print
	dup 12 >> $fff and
|	0? ( 4drop ; )	| si no es llamada no mostrar
	"%d-" print
	printinfword
|	$fff and 12 fixbin |"%b" print
	@
	dup sp printmovword sp
	20 >> $fff and "(%d)" print
	over dic>len@ ( 1? )( 1- swap @+ tokencolor tokenstr print sp swap ) 2drop
	;

:drawwords
	iniword |0? ( drop ; )
	rsize ( 1? )( 1- swap
		drawline cr
		1+ swap ) 2drop ;

:refrescaa
	actual
	-? ( 0 nip )
	cntwords >? ( cntwords nip )
	iniword <? ( dup 'iniword ! )
	iniword rsize + >=? ( dup rsize - 1+ 'iniword ! )
	'actual !
	;

:showerror
	poserror 0? ( drop ; )
	">>%w<<" print
	;

:main
	0 dup 'actual ! 'iniword !
	"wait" 'error !
	4
	show clrscr fonti
		dup "%d " print
		error 'filename "%s %s " print
		showerror cr
		drawwords
		infodic
		cnttokens 2 << "$%h codeinc " print
		cnttokens "%d" print
		cr
		stackinc
		dumpinc
		[ 1 'actual +! refrescaa ; ] <dn>
		[ -1 'actual +! refrescaa ; ] <up>
		[ rsize 'actual +! refrescaa ; ] <pgdn>
		[ rsize 'actual +! refrescaa ; ] <pgup>
		'loadfile <f1>
		'loadplain <f2>
		'genplain <f3>
		'mainana <enter>
		'exit >esc<
		cminiflecha ;

: mark main ;
