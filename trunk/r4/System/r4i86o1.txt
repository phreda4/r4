| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt
^r4/system/r4print.txt

^r4/system/vstack2.txt
^r4/lib/trace.txt

|----- nro de str y label
#nstr | nro de string
#nlabel | nro de etiqueta

::ini.compila
	0 'nstr ! 0 'nlabel ! ;

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

:>pilac pilac> ! 4 'pilac> +! ;
:<pilac -4 'pilac> +! pilac> @ ;
:-pilac 'pilac 'pilac> ! ;

|-------------------------------------
#regact

|--EDX

:freeEDX
	3 reg!!
	3 REGCell -? ( drop ; ) drop
	trace | hay un edx en la pila
	;

:usoEDX
	3 reg!
	3 REGCell -? ( drop ; )
	registros %1 and? (
		newReg 6 >? ( drop freelastreg newReg )
		)( 0 ) nip
	dup reg!
	"mov " ,s dup ,REG ",edx" ,ln
	| cell newreg
	5 rot cell!
	;

:setEDX | cell --
	3 dup reg! 5 rot cell! ;

|---------
:usoECX | cell --
	"mov ecx," ,s dup ,CELL ,cr
	2 5 rot cell!
	2 reg! ;

:soloECX | cell reg --
	"mov ecx," ,s dup ,REG ,cr
	reg!!
	2 5 rot cell!
	2 reg!
	;

:regECX | cell reg --
	2 =? ( 2drop ; )
	registros %100 nand? ( drop soloECX ; ) drop
	newReg 6 >? ( drop freelastreg newReg )
	dup reg!
	"mov " ,s dup ,REG ",ecx" ,ln
	5 rot cell!
	"mov ecx," ,s ,REG ,cr
	2 5 rot cell!
	2 reg!
	;

:cteorECX | cell --
	resCPY
	dup cellADR? 1? ( drop usoECX ; ) drop
	dup cellREG? 0 >=? ( regECX ; ) drop
	drop ;

|--EAX

:freeEAX | libero EAX
	0 reg!!
|	0 REGCell -? ( drop ; ) drop
	;

:setEAX | cell --
	0 dup reg! 5 rot cell! ;

:libreEAX
	"mov eax," ,s dup ,CELL ,cr
	0 dup reg! 5 rot cell! ;

|----------------------------
:copiaEAX | cell reg --  ; ya esta en a pero hay otra copia
	reemplazaenreg
	5 rot cell! ;

:needEAX | cell --
	dup cellREG? 0? ( 2drop ; ) drop
	registros %1 nand? ( drop libreEAX ; ) drop

	dup resCPY cellREG? 0? ( copiaEAX ; ) drop

	newReg 6 >? ( drop freelastreg newReg )
	0? ( drop libreEAX ; )

	"mov " ,s dup ,REG ",eax" ,ln | c r
	"mov eax," ,s over ,CELL ,cr
	dup reg! 5 0 REGCell cell!	| cell(eax) en newreg
	dup cellREG? +? ( dup reg!! ) drop
	0 5 rot cell! ;				| cell en eax

:needREG | cell --
	dup cellREG? 0 >=? ( 2drop ; ) drop	| ya es registro salir
	newReg 6 >? ( drop freelastreg newReg )

	dup reg! 	| buscar registro libre
	5 rot cell! ;

:resolveCLON | cell -- cell
	dup cellCLON? 0? ( drop ; ) drop
	dup cellCLONTO | clon origen
	over cellREG? over cellREG? - 0? ( 2drop ; ) drop
	"mov " ,s dup ,CELL "," ,s swap dup ,CELL ,cr
	over swap cell2cell! ;

:cell2newReg
	newREG 6 >? ( drop freelastreg newReg )
	over cell0? 0? ( drop
		"mov " ,s dup ,REG "," ,s over ,CELL
		)( drop
		"xor " ,s dup ,REG "," ,s dup ,REG
		)
	,cr
	dup reg! 5 rot cell! ;

:needWrite | cell -- ; pone en registro si no esta
|	block.in? 1? ( drop resolveCLON )( drop ) | solo deltro de bloques
	dup cellREG? 0 >=? ( 2drop ; ) drop | ya esta en registro
    cell2newReg ;

:needWriteM | cell -- ; registro o direccion cte
	dup cellADR? 1? ( drop needWrite ; )
	2drop ;

|--- va a leer, no puede []
:needReadM | cell --
	resCPY
	dup cellADR? 1? ( drop needWrite ; ) 2drop ;

:needRead | cell --
	drop ;
:needReadW | cell --
	drop ;
:needReadB | cell --
	drop ;

:needREGorMEM | cell --
	resCPY
	dup cellREG? 0 >=? ( 2drop ; ) drop
	dup cellADR? 1? ( 2drop ; ) drop
	cell2newReg ;

|------ acceso a celdas
:,TOS	d.tos ,cell ;
:,TOSb	d.tos ,cellb ;

:,NOS	d.nos ,cell ;
:,NOSb	d.nos ,cellb ;
:,NOSw	d.nos ,cellw ;

:,NOS2	d.pk2 ,cell ;
:,RTOS	r.tos ,cell ;

|------------ compila CODIGO
|:nro>dicn2   8 >> 5 << 'indicepal + @ ; | nombre
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra
:toknow		dup 4 - @ ;

:,defw :,defv ; | no hay definiciones en optimizado (investigar como)
:,[ :,] ; | no hay anonimas en optimizado

#strpending

:,wor
	vpila2normal
	dup @ $ff and 			| word ;
	12 =? ( "jmp " )( "call " ) nip ,s
	toknow nro>dicn ,s ,cr

	toknow 8 >> vpila2callV
	strpending neg vpila2v
	0 'strpending !

|	toknow 8 >> nro>mov @ 8 << 24 >>
|	" ; %d---" ,print ,cr
	;

:,callsys | usapila? --
	1? ( vpila2normal ) drop
	dup @ $ff and | word ;
	12 =? ( "jmp " )( "call " ) nip
	,s ;

:,END		"jmp SYSEND" ,ln ;
:,DIR		1 ,callsys "SYSDIR" ,ln -1 vpila2v ;
:,FILE  	1 ,callsys "SYSFILE" ,ln ;
:,FSIZE		1 ,callsys "SYSFSIZE" ,ln ;
:,VOL		1 ,callsys "SYSVOL" ,ln ;
:,LOAD		1 ,callsys "SYSLOAD" ,ln -1 vpila2v ;
:,SAVE		1 ,callsys "SYSSAVE" ,ln -3 vpila2v ;
:,APPEND	1 ,callsys "SYSAPPEND" ,ln -3 vpila2v ;
:,UPDATE	1 ,callsys "SYSUPDATE" ,ln ;
:,MSEC		1 ,callsys "SYSMSEC" ,ln 1 vpila2v ;
:,TIME		1 ,callsys "SYSTIME" ,ln 3 vpila2v ;
:,DATE		1 ,callsys "SYSDATE" ,ln 3 vpila2v ;
:,RUN		1 ,callsys "SYSRUN" ,ln ;
:,CLS		0 ,callsys "SYSCLS" ,ln ;
:,REDRAW	0 ,callsys "SYSREDRAW" ,ln ;
:,>XFB  	0 ,callsys "SYSTOXFB" ,ln ;
:,XFB>  	0 ,callsys "SYSXFBTO" ,ln ;

:,;
	dup 8 - @ $ff and | word ;
	8 =? ( drop ; ) drop
	vpila2normal
	"ret" ,ln ;

:,lit	toknow tok>cte pushNRO ;
:,lits
		toknow 8 >> cte + strusestack
|		( 1? )( 1- d.drop ) 2drop 		| correccion por "%d"..
		'strpending ! drop
		nstr pushSTR 1 'nstr +! ;
:,dwo	toknow 8 >> pushCOD ;
:,dva   toknow 8 >> pushDAT ;

:,var
	toknow 8 >> pushVar ;

:,varresuelto | evita perder valor de variables
	toknow 8 >>
	newReg 6 >? ( drop freelastreg newreg )
	dup reg! dup pushREG
	,cr
	"mov " ,s ,REG ",dword [w" ,s ,h "]" ,s ,cr
	;

|-------- CONDICIONALES
#jmpstr 0

:,simple?
	'jmpstr !
	d.cnt 0? ( vpila2normal ) drop
	d.tos needWrite
	d.tos cellADR? 1? ( drop
		"cmp " ,s ,TOS ",0" ,ln ; ) drop
	"or " ,s ,TOS "," ,s ,TOS ,cr
	;

:,0? "jnz " ,simple? ;
:,+? "js "  ,simple? ;
:,-? "jns " ,simple? ;
:,1? "jz "  ,simple? ;

:,doble?
	'jmpstr !
	d.tos needRead
	d.nos needWrite
	d.tos cellADR? 1? ( drop
		d.nos cellADR? 1? ( drop
			newReg 6 >? ( drop freelastreg newReg )
			"mov " ,s dup ,REG "," ,s ,TOS ,cr
			"cmp " ,s ,NOS "," ,s ,REG ,cr
			d.drop ;
			)( drop ) )( drop )
    "cmp " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;

:,=? "jnz " ,doble?	;
:,<? "jge " ,doble?	;
:,>? "jle " ,doble?	;
:,<=? "jg " ,doble?	;
:,>=? "jl " ,doble?	;
:,<>? "jz " ,doble?	;

:,bit?
	'jmpstr !
	d.tos needRead
	d.nos needWrite
	d.tos cellADR? 1? ( drop
		d.nos cellADR? 1? ( drop
			newReg 6 >? ( drop freelastreg newReg )
			"mov " ,s dup ,REG "," ,s ,TOS ,cr
			"test " ,s ,NOS "," ,s ,REG ,cr
			d.drop ;
			) )( drop )
    "test " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;

:,and?  "jz " ,bit?	;
:,nand? "jnz " ,bit? ;

|----- auxiliares bloques
:label		"_" ,s ,h ;
:jmp,		"jmp " ,s label ,cr ;
:,etiqueta	label ": " ,s ;
:,jmpcond   jmpstr ,s label ,cr ;

:+etiqueta	| -- nueva   // y agrega a pila
	nlabel 1+ dup 'nlabel ! dup >pilac ;

|----- BLOQUES
:,(
	vpila2normal
	block.new vpPush
	blockt
	0 =? ( +etiqueta ,jmpcond )		| IF
	1 =? ( +etiqueta ,jmpcond )		| ELSE
	2 =? ( +etiqueta ,etiqueta )	| WHILE
	3 =? ( +etiqueta ,etiqueta )	| UNTIL
	4 =? ( +etiqueta ,etiqueta )	| REPEAT
	drop

|	block.now "; block %d " ,print printddvtack
|	"r4asm/cod.asm" savemem
|	,cr |   block.now dumpblock,
	;

:,)(
	vpila2normal
	blockt
	1 =? ( <pilac +etiqueta jmp, ,etiqueta vppop vppush )	| ELSE
	2 =? ( <pilac +etiqueta ,jmpcond >pilac vpdrop vppush )	| WHILE
	drop
	;

:,)
	vpila2normal
	blockt
	0 =? ( <pilac ,etiqueta 
			over 8 - @ $ff and 				| ;)
			12 <>? ( vpdrop vppush )
			drop )          		| IF
	1 =? ( <pilac ,etiqueta
			over 8 - @ $ff and 				| ;)
			12 <>? ( vpdrop vppush )
			drop )							| ELSE
	2 =? ( <pilac jmp, <pilac ,etiqueta )	| WHILE
	3 =? ( <pilac ,jmpcond )				| UNTIL
	4 =? ( <pilac jmp, )					| REPEAT
	drop
|	block.now ";BLK%d " ,print |   block.now dumpblock,
	vpPop
	block.end ;

|------- EXEC
:,execpp | v --
	"push " ,s d.tos ,CELL ,cr
	d.drop vpila2normal
	"pop ecx" ,ln
	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln
|	lastdircode vpila2callV
	;

:,EXEC | v --
	d.tos cellVAR -? ( 2drop ,execpp ; ) 2drop
	d.tos d.drop vpila2normal
	"mov ecx," ,s ,CELL ,cr
	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln
|	lastdircode vpila2callV
	;

|------- PILAR
:,>R	d.pop r.push ;
:,R>    r.pop d.push ;
:,R		r.tos d.push ;
:,RDROP r.drop ;

:,R+
	d.tos needRead
	r.tos needWrite
	"add " ,s ,RTOS "," ,s ,TOS ,cr
|	d.tos Cellval+ r.tos Cell+ |
	d.drop ;

:,R!+
	d.tos needRead
	r.tos needWriteM
	"mov dword [" ,s ,RTOS "]," ,s ,TOS ,cr
	"add " ,s ,RTOS ",4" ,ln
|	4 r.tos Cell+ | add 4
	d.drop ;

:,R@+
	d.dup d.tos needReg
	r.tos needReadM
	"mov " ,s ,TOS ",[" ,s ,RTOS "]" ,ln
	"add " ,s ,RTOS ",4" ,ln
|	4 r.tos Cell+ | add 4
	;

|------ sin rpila virtual

:,>R	"push " ,s ,TOS ,cr d.drop ;
:,R>    d.dup d.tos needReg "pop " ,s ,TOS ,cr ;
:,R     d.dup d.tos needReg "mov " ,s ,TOS ",dword [esp]" ,ln ;
:,RDROP "lea esp,[esp+4]" ,ln ;
:,R+	d.tos needReadM "add dword [esp]," ,s ,TOS ,cr d.drop ;

:,R!+
	d.tos needReadM
	newReg 6 >? ( drop freelastreg newReg )
	"mov " ,s dup ,REG ",dword [esp]" ,ln
	"mov dword [" ,s ,REG "]," ,s ,TOS ,cr
	"add dword [esp],4" ,ln
	d.drop ;

:,R@+
	d.dup d.tos needReg
	"mov " ,s ,TOS ",[esp]" ,ln
	"mov " ,s ,TOS ",[" ,s ,TOS "]" ,ln
	"add dword [esp],4" ,ln ;

|------- ARITMETICAS LOGICAS
:,AND
	d.tos needRead
	d.nos needWrite
	"and " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,OR
	d.tos needRead
	d.nos needWrite
	"or " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,XOR
	d.tos needRead
	d.nos needWrite
	"xor " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,+
	d.tos needRead
	d.nos needWrite
	"add " ,s ,NOS "," ,s ,TOS ,cr
|	d.tos Cell.value d.nos Cell+ | add 4
	d.drop ;
:,-
	d.tos needRead
	d.nos needWrite
	"sub " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,*
	d.tos needRead
	d.nos needWrite
	"imul " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,/
	d.nos needEAX
	usoEDX
	d.tos needREGorMEM
	"cdq" ,ln
	"idiv " ,s ,TOS ,cr
	d.drop
	freeEDX ;
:,/MOD
	d.nos needEAX
	usoEDX
	d.tos needREGorMEM
	"cdq" ,ln
	"idiv " ,s ,TOS ,cr
	d.nos setEAX
	d.tos setEDX ;

:,MOD
	d.nos needEAX
	usoEDX
	d.tos needREGorMEM
	"cdq" ,ln
	"idiv " ,s ,TOS ,cr
	d.drop
	d.tos setEDX
	freeEAX ;

:,*/
	d.pk2 needEAX
	usoEDX
	d.nos needREGorMEM
	d.tos needREGorMEM
	"cdq" ,ln
	"imul " ,s ,NOS ,cr
	"idiv " ,s ,TOS ,cr
	d.2drop
	d.tos setEAX
	freeEDX ;

:,*>>
	d.pk2 needEAX
	usoEDX
	d.nos needREGorMEM
	d.tos cteorECX
	"cdq" ,ln
	"imul " ,s ,NOS ,cr
	"shrd eax,edx," ,s ,TOSb ,cr
|	"shr edx," ,s ,TOSb ,cr | no hace falta!!
	d.2DROP
|	d.tos setEAX
	freeEDX ;

:,<</
	d.pk2 needEAX
	usoEDX
	d.nos needREGorMEM
	d.tos cteorECX
	"cdq" ,ln
    "shld edx,eax," ,s ,TOSb ,cr
	"shl eax," ,s ,TOSb ,cr
	"idiv " ,s ,NOS ,cr
	d.2DROP
	d.tos setEAX
	freeEDX ;

:,<<
	d.tos cteorECX
	d.nos needWrite
	"sal " ,s ,NOS "," ,s ,TOSb ,cr
	d.drop ;

:,>>
	d.tos cteorECX
	d.nos needWrite
	"sar " ,s ,NOS "," ,s ,TOSb ,cr
	d.drop ;

:,ABS
	usoEDX
	d.tos needWrite
	d.tos cellREG? 0? ( | EAX
		"cdq" ,ln
		)(
		"mov edx," ,s ,TOS ,cr
		"sar edx,31" ,ln
		) drop
	"add " ,s ,TOS ",edx" ,ln
	"xor " ,s ,TOS ",edx" ,ln
	freeEDX ;

:,CLZ
	d.tos needREG
	"bsr " ,s ,TOS  "," ,s ,TOS ,cr
	"xor " ,s ,TOS ",31" ,ln ;

:,NOT
	d.tos needWrite
	"not " ,s ,TOS ,cr ;

:,NEG
	d.tos needWrite
	"neg " ,s ,TOS ,cr ;

:,1+
	d.tos needWrite
	"add " ,s ,TOS ",1" ,ln
|	1 d.tos Cell+
	;
:,4+
	d.tos needWrite
	"add " ,s ,TOS ",4" ,ln
|	4 d.tos Cell+
	;
:,1-
	d.tos needWrite
	"sub " ,s ,TOS ",1" ,ln
|	-1 d.tos Cell+
	;
:,2/
	d.tos needWrite
	"sar " ,s ,TOS ",1" ,ln ;
:,2*
	d.tos needWrite
	"sal " ,s ,TOS ",1" ,ln ;

|------ MEMORIA
:,@
	d.tos needWrite
	"mov " ,s ,TOS ",dword [" ,s ,TOS "]" ,ln ;
:,C@
	d.tos needWrite
	"movsx " ,s ,TOS ",byte [" ,s ,TOS "]" ,ln ;
:,W@
	d.tos needWrite
	"movsx " ,s ,TOS ",word [" ,s ,TOS "]" ,ln ;

:,!
	d.tos resguardavar
	d.tos needReadM
	d.nos needReadM
	"mov dword [" ,s ,TOS "]," ,s ,NOS ,cr
	d.2DROP ;
:,C!
	d.tos resguardavar
	d.tos needReadM
	d.nos needReadB
	"mov byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	d.2DROP ;
:,W!
	d.tos resguardavar
	d.tos needReadM
	d.nos needReadW
	"mov word [" ,s ,TOS "]," ,s ,NOSw ,cr
	d.2DROP ;

:,+!
	d.tos resguardavar
	d.nos needReadM
	d.tos needReadM
	"add dword [" ,s ,TOS "]," ,s ,NOS ,cr
	d.2DROP ;
:,W+!
	d.tos resguardavar
	d.nos needReadM
	d.tos needReadM
	"add word [" ,s ,TOS "]," ,s ,NOSw ,cr
	d.2DROP ;
:,C+!
	d.tos resguardavar
	d.nos needReadM
	d.tos needReadM
	"add byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	d.2DROP ;

:,!+
	d.tos resguardavar
    d.nos needReadM
	d.tos needWrite
	"mov dword [" ,s ,TOS "]," ,s ,NOS ,cr
	"add " ,s ,TOS ",4" ,ln
|	4 d.tos Cell+
	d.NIP ;
:,W!+
	d.tos resguardavar
    d.nos needReadM
	d.tos needWrite
	"mov word [" ,s ,TOS "]," ,s ,NOSw ,cr
	"add " ,s ,TOS ",2" ,ln
|	2 d.tos Cell+
	d.NIP ;
:,C!+
	d.tos resguardavar
    d.nos needReadM
	d.tos needWrite
	"mov byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	"add " ,s ,TOS ",1" ,ln
|	1 d.tos Cell+
	d.NIP ;

:,@+
	d.tos needWrite
	d.dup d.tos needReg
	"mov " ,s ,TOS ",dword [" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",4" ,ln ;
:,W@+
	d.tos needWrite
	d.dup d.tos needReg
	"movsx " ,s ,TOS ",word [" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",2" ,ln ;
:,C@+
	d.tos needWrite
	d.dup d.tos needReg
	"movsx " ,s ,TOS ",byte [" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",1" ,ln ;

|--------- Sistema
|#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB" | [] | "SYSPAPER" "SYSXYM" "SYSBM" "SYSKEY"

:,SW 		0 pushCTE ;
:,SH		1 pushCTE ;
:,MEM		2 pushCTE ;
:,FRAMEV	3 pushCTE ;
:,XFB		4 pushCTE ;

:,BMOUSE | -- c
	7 pushCTE d.tos cellMEM! ;

:,KEY	| -- c
	8 pushCTE d.tos cellMEM! ;

:,PAPER | n --
	d.tos needReadM | no memoria []
	"mov [SYSPAPER]," ,s ,TOS ,cr
	d.drop ;

:,KEY! | v --
	d.tos needReadM | no memoria []
	"mov [SYSKEY]," ,s ,TOS ,cr
	d.drop ;

:setxyNOS
	d.nos needWrite | x
|	"imul " ,s ,NOS ",XRES" ,ln	| cualquier ancho
	"shl " ,s ,NOS  ",10" ,ln	| 1024 de ancho
	"lea ebp,[SYSFRAME+" ,s ,TOS "+" ,s ,NOS "*4]" ,ln ;


:,SETXY | x y --
	d.tos needWrite
	d.tos cellNRO? 1? ( drop
		d.nos needRead
		d.nos cellNRO? 1? ( drop
			"lea ebp,[SYSFRAME+(" ,s ,TOS "*XRES+" ,s ,NOS ")*4]" ,ln
			)( drop
			setxyNOS )
		)( drop
|		"imul " ,s ,TOS ",XRES" ,ln	| cualquier ancho
		"shl " ,s ,TOS ",10" ,ln	| 1024 de ancho
|		d.nos needRead | x
		d.nos cell0? 0? ( "add " ,s ,TOS "," ,s ,NOS ,cr ) drop
		"lea ebp,[SYSFRAME+" ,s ,TOS "*4]" ,ln
		)
	d.2DROP ;

:,PX+!	| s --
	d.tos needReadM
	"lea ebp,[ebp+" ,s ,TOS "*4]" ,ln
	d.drop ;

:,PX!+	| rgb --
	d.tos needReadM
	"mov dword [ebp]," ,s ,TOS ,cr
	"add ebp,4" ,ln
	d.drop ;

:,PX@	| -- rgb
	d.dup d.tos needREG
	"mov " ,s ,TOS ",dword [ebp]" ,ln ;

:,XYMOUSE | -- x y
	d.dup d.tos needREG
	d.dup d.tos needREG
	"mov " ,s ,TOS ",[SYSXYM]" ,ln
	"mov " ,s ,NOS "," ,s ,TOS ,cr
	"and " ,s ,NOS ",$ffff" ,ln
	"shr " ,s ,TOS ",16" ,ln
	;

:,CNTJOY
	d.DUP "xor eax,eax" ,ln ;
:,GETJOY ;
:,SLOAD ;
:,SPLAY  d.DROP ;
:,MLOAD ;
:,MPLAY  d.DROP ;

:,DOCINI :,DOCEND
	;
:,OPENURL	| url header buff -- buff/0
	d.2drop ;
:,DOCAT     | x y --
	d.2drop ;
:,DOCLINE	| x y --
	d.2drop ;
:,DOCTEXT	| "tt" --
	d.drop ;
:,DOCFONT	| size angle "font" --
	d.3drop ;
:,DOCBIT	| bitmap x y --
	d.3drop ;
:,DOCRES	| -- xmax ymax
	d.2dup ;
:,DOCSIZE	| "tt" -- w h
	d.dup ;
:,SYSTEM	| "sys" --
	d.drop ;

|----------- en asmbase.txt
:,SQRT
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,INK :,INK@ :,ALPHA
:,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE :,POLI
:,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL ;


#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva | 11
,; ,( ,)( ,) ,[ ,] ,EXEC	| 18
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30

d.DUP d.DROP d.OVER d.PICK2 d.PICK3 d.PICK4 d.SWAP d.NIP	|--- pila 38
d.ROT d.2DUP d.2DROP d.3DROP d.4DROP d.2OVER d.2SWAP	| 45

,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones 52
,AND ,OR ,XOR ,NOT  								|--- logicas        56
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>> | 76
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria 85
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+	| 91
,MOVE ,MOVE> ,CMOVE ,CMOVE> | 95
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE ,APPEND		|--- memoria bloques 102
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY 							| 109
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema 114
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
#bufprim 0 | para salto?
#bufftok )( 8192
#buff> 'bufftok

:+buff | tok --
	buff> !+ 'buff> ! ;
:-buff | --
	0 'bufprim !
	'bufftok 'buff> ! ;

#registeruse

:imprimedebug | token -- token
	dup tokenstr " ; " ,s ,s | palabra que compila
|	"r4asm/cod.asm" savemem

	dup $ff and
	8 <? ( drop ; )
	9 >=? ( 11 <=? ( drop  ; ) )
	31 >=? ( 45 <=? ( drop  ; ) )
	96 =? ( drop ; )
	116 =? ( drop ; )
	117 =? ( drop ; )
	125 =? ( drop ; )
	drop
	,cr "; " ,s printddvtack
|	"r4asm/cod.asm" savemem
	;

::,compwordopt | nro --
|---- carga en buffer
	-buff
	dup nro>toklen
	( 1? )( 1- swap @+ +buff swap ) 2drop

	buff> 'bufftok pick2 nro>mov @ 24 << 24 >> neg | finbuff buff use
	calccell

|**** debug
|	dumpcells,
|	"r4asm/cod.asm" savemem
|**** debug

	dup nro>mov @ 24 << 24 >> neg inivpila
	0 'registeruse !
	0 'strpending !
	'bufftok ( buff> <? )(
		@+
		imprimedebug
		$ff and 2 << 'nivel1 + @ exec
		registros registeruse or 'registeruse !
		) drop
	registeruse swap nro>mem!
	;
