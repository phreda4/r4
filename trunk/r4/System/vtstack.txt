| pilas virtuales (datos y retorno)
| para emulador y compilador
| PHREDA 2011
|------------------------------------

^r4/system/r4token.txt

|--- registros  $iiccffff
| ii inicio
| cc cntdeop
| tipo  cte,str,var,dvar,dcod,mem,orig
| flags final,usoadx,usoecx,copia
|-----------

#cntregs 0
#regs )( 1024	| info de registros
#regv )( 1024	| valor de registro
#regw )( 1024	| 2do parametro

#tostr )( 4096	| indice de dib pilas
#tostr> 'tostr

#memp )( 4096	| dibujo de pilas
#memp> 'memp

:+memp | c --
	memp> c!+ 'memp> ! ;

#sst )( 1024 | pila de pilas
#sst> 'sst

:sst!
	sst> !+ 'sst> ! ;

:sst@
	-4 'sst> +! sst> @ ;

|--- Pila DATOS
#:dpila )( 1024 | 8bits
#:dpila> 'dpila
|----- PILA R
#:rpila )( 1048
#:rpila> 'rpila

::d.cnt dpila dpila> - 2 >> ;
::d.pop -4 'dpila> +! dpila> @ ;
::d.pop2 -8 'dpila> +! dpila> @+ swap @ ;
::d.pop3 -12 'dpila> +! dpila> @+ swap @+ swap @ ;
::d.push dpila> !+ 'dpila> ! ;
::d.TOS dpila> 4 - @ ;
::d.NOS dpila> 8 - @ ;
::d.PK2 dpila> 12 - @ ;
::d.PK3 dpila> 16 - @ ;
::d.PK4 dpila> 20 - @ ;

:reg+1 | --
	d.TOS 2 << 'regs + dup
	@ dup $ff00ffff and swap
	$ff0000 and $10000 + or
	swap ! ;

:memreg | --
	d.TOS 2 << 'regs + dup
	@ $80 or swap ! ;

:endreg
	d.TOS 2 << 'regs + dup
	@ $40 or swap ! ;

:codreg
	d.TOS 2 << 'regs + dup
	@ $20 or swap ! ;

|--- registro
:usoadx
	d.TOS 2 << 'regs + dup
	@ $100 or swap ! ;

:usoecx | si no es cte
	d.TOS 2 << 'regs + dup
	@ $200 or swap ! ;


:d.pushNew | valor tipo --
	cntregs dup d.push
	2 << dup >r
	'regs + !
	r> 'regv + !
	1 'cntregs +! ;

::d.pushDec	0 d.pushNew ;
::d.pushHex	0 d.pushNew ;
::d.pushBin	0 d.pushNew ;
::d.pushFix	0 d.pushNew ;
::d.pushStr	1 d.pushNew ;
::d.pushVar	2 d.pushNew ;
::d.pushDVar 3 d.pushNew ;
::d.pushDCod 4 d.pushNew ;

:d.pushCopy 5 d.pushNew ;
:d.pushMem 6 d.pushNew ;

|-------- operaciones de pila
:vDrop	endreg -4 'dpila> +! ;

:v4Drop vdrop
:v3Drop vdrop
:v2Drop vdrop vdrop ;

:vSWAP
	dpila> 8 - >r
	r@+ r@+ r> 8 -
	!+ ! ;
:vNIP
	vswap vdrop ;
:vROT
	dpila> 12 - >r
	r@+ r@+ r@+
	swap r> 12 - !+ !+ ! ;
:v2SWAP
	dpila> 16 - >r
	r@+ r@+ swap r@+ r@+ swap
	r> 32 - !+ !+ !+ ! ;

:vDup | dup
	d.TOS d.pushCopy ;
:vOver | over
	d.NOS d.pushCopy ;
:vpk2 	|PICK2  abc -- abca
	d.PK2 d.pushCopy ;
:vpk3 	|PICK3  abcd -- abcda
	d.PK3 d.pushCopy ;
:vpk4 	|PICK4  abcde -- abcdea
	d.PK4 d.pushCopy ;
:v2Dup	|2DUP   ab -- abab
	vOver vOver ;
:v2Over |2OVER  abcd -- abcdab
	vpk3 vpk3 ;

|--- aritmeticas y logica
:op2a1	| + - * and or xor << ..
	vdrop reg+1 ;

:op1a1	| neg not 1+ 4+ 1- 2/ ..
	reg+1 ;

:vop1a1	| neg not 1+ 4+ 1- 2/ ..
	reg+1 usoadx ;

:vop2a1 | << >>
	usoecx 	reg+1 ;

:xop2a1 | << >>
	usoecx 	reg+1 ;

:op3a1	| *>> /<< */
	vdrop vdrop reg+1 usoadx ;

:vop3a1	| *>> /<< */
	vdrop vdrop reg+1 usoadx ;

:xop3a1	| *>> /<< */
	vdrop vdrop reg+1 usoadx ;

:op2a2	| mod/
	reg+1 vswap reg+1 vswap usoadx ;

:vop2a2	| mod/
	reg+1 vswap reg+1 vswap usoadx ;

|--- pila de direccion
::r.pop	-4 'rpila> +! rpila> @ ;
::r.push rpila> !+ 'rpila> ! ;
::r.cnt	rpila> 'rpila - 2 >> ;
::r.tos rpila> 4 - @ ;

:r.pushNew | valor tipo --
	cntregs dup r.push
	2 << dup >r
	'regs + !
	r> 'regv + !
	1 'cntregs +! ;


:r.pushCopy r.push ;
:r.pushCalc r.push ;

:v>R	d.pop r.push ;
:vR>	r.pop d.push ;

:vr		|R      -- a R: a -- a
	r.tos d.pushCopy ;
:vr+		|R+    a -- R: b -- c
	vr> reg+1 v>r
	vdrop ;
:vr@+	|R@+    -- a R: b -- c
	vr> memreg reg+1 dup v>r
	d.pushVar ;
:vr!+	|R!+   a -- R: b -- c
	vr> memreg reg+1 v>r
	vdrop ;
:vrdrop
	vr> vdrop ;

|-------------------------------
::mappila | exe --
	'dpila ( dpila> <? )( @+ pick2 exec ) 2drop ;

::mappilar | exe --
	'rpila ( rpila> <? )( @+ pick2 exec ) 2drop ;

:stacks>str | --
	memp> tostr> !+ 'tostr> !
	[ 65 + +memp ; ] mappila
	$3A +memp
	[ 65 + +memp ; ] mappilar
	0 +memp
	;

:str>stacks | "" --
	| copia tos?
	'dpila 'dpila> !
	( c@+ $3a <>? )(
		65 - d.push
		) drop
	'rpila 'rpila> !
	( c@+ 1? )(
		65 - r.push
		) 2drop
	;

:stacknow | -- now
	tostr> 4 - @ ; | stack actual

:value
	dup 4 - @ 8 >> ;

|----------------------------
:litN	| 12
	value cte + @ d.pushDec ;
:litS	| "kk"
	value d.pushStr ;
:litV	| vv
	value d.pushVar ;
:litAV	| 'v
	value d.pushDVar ;
:litAW	| 'w
	value d.pushDCod ;

:callW	| ww
	dup 4 - @ 8 >> nro>mov @

|
|	dup 24 >> | no se propaga es flujo de ejecucion
|	-? ( ( 1? )( 1+ vrdrop ) drop )( ( 1? )( 1- newRegR ) drop ) 	|	'deltaR +!
|

	8 << 24 >>
	0? ( drop ; )
	| control de tipos
	-? ( ( 1? )( 1+ vdrop ) drop )( ( 1? )( 1- 0 d.pushDec ) drop ) 	|'deltaD +!

	;

:1dw 	| exec
	codreg vdrop ;
:c0 | 0? 1? ..
	;
:c1 | =? <? ..
	vdrop reg+1 ;


:1@	| @ c@ w@
	memreg reg+1
	d.tos d.pushMem ;
:1!	| ! c! w!
	memreg vdrop
	vdrop ;
:2@	| @+ c@+ w@+
	memreg reg+1
	d.tos d.pushMem ;
:2!	| !+ c!+ w!+
	memreg reg+1
	vnip ;
:2+! | +! c+! w+!
	memreg
	v2drop ;


:+mem 	0 d.pushMem ;

:v3v 0 0 d.pushNew
:v2v 0 0 d.pushNew
:v1v 0 0 d.pushNew  ;

|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(	|(
	stacknow sst!
	salto? sst!
	;

:es)(	|)(
	salto? 1? ( sst@ 2drop stacknow sst! 3 sst! ; ) | while
	sst@ 2drop
	sst@ dup sst!
	stacknow sst! 2 sst!
	str>stacks
	;

:tipo0 | (  ? ) o (    )
	sst@ drop ;

:tipo1 | ?( )
	;? 1? ( sst@ str>stacks drop ; )
	sst@ 2drop ;

:tipo2 | ?( )( )
	;? 1? ( sst@ sst@ str>stacks 2drop ; )
	sst@ str>stacks sst@ 2drop ;

:es)	|)
	sst@ 0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	sst@ str>stacks	| ( ? )(  )
	sst@ 2drop
	;

|--- anonimas
:es[	|[
	stacknow sst! ;

:es]	|]
	sst@ str>stacks
	0 7 d.pushNew ;

| uso dD dR tipo
#acctoken
0	| 0
0	|1 :,,defc
0	|2 :,,defv
litN |3 :,,litd | --	n numero decimal
litN |4 :,,lith | --	n numero hexa
litN |5 :,,litb | -- n numero binario
litN |6 :,,litf | --	n numero punto fijo
litS |7 :,,lits | --	s string
callW |8 :,,word 	| ..--..  word <---- debe ser calculado
litV |9 :,,var 	| -- v var
litAW |10:,,dword | -- dw dir word
litAV |11:,,dvar 	| -- dv dir var
0	|; | fin de palabra (12)
es(	|(
es)(	|)(
es)	|)
es[	|[
es]	|]
1dw	|EXEC  x/0 --    TOS es dcod
c0	|0? a -- a
c0	|+? a -- a
c0	|-? a -- a
c0	|1? a -- a
c1	|=?  ab -- a
c1	|<?  ab -- a
c1	|>?  ab -- a
c1	|<=? ab -- a
c1	|>=? ab -- a
c1	|<>? ab -- a
c1	|AND?  ab -- a
c1	|NAND? ab -- a
vdup	|DUP    a -- aa
vdrop 	|DROP  a --
vover 	|OVER   ab -- aba
vpk2 	|PICK2  abc -- abca
vpk3 	|PICK3  abcd -- abcda
vpk4 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
v2dup	|2DUP   ab -- abab
v2drop	|2DROP ab --
v3drop	|3DROP abc --
v4drop	|4DROP abcd --
v2over	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab

v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
vrdrop	|RDROP	R: a --

op2a1	|53 AND	ab -- c
op2a1	|OR    ab -- c
op2a1	|XOR   ab -- c
op1a1	|NOT    a -- b
op2a1	|+		ab -- c
op2a1	|-     ab -- c
op2a1	|*     ab -- c
vop2a1	|/     ab -- c		usa eax,edx
vop3a1	|*/    abc -- d     usa eax,edx
xop3a1	|*>>   abc -- d     usa eax,edx, ecx
vop2a2	|/MOD   ab -- cd    usa eax,edx
vop2a1	|MOD    ab -- c     usa eax,edx
vop1a1	|ABS    a -- b      usa eax,edx
op1a1	|SQRT	a -- b
vop1a1	|CLZ	a -- b     usa eax,edx
xop3a1	|<</	abc -- d   usa eax,edx, ecx
op1a1	|NEG    a -- b
op1a1	|1+     a -- b
op1a1	|4+     a -- b
op1a1	|1-     a -- b
op1a1	|2/     a -- b
op1a1	|2*     a -- b
xop2a1	|<<    ab -- c     usa ecx
xop2a1	|76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v3drop	|MOVE  abc --       a,b es ddat
v3drop	|MOVE> abc --		a,b es ddat
v3drop	|CMOVE abc --		a,b es ddat
v3drop	|CMOVE> abc --		a,b es ddat

+mem |MEM	-- a		a es ddat
vdrop	|DIR    a --
0	|FILE   a -- b
0	|FSIZE  a -- b
0	|VOL    a -- b
vdrop	|LOAD   ab -- c
v3drop	|SAVE   abc --

0	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vdrop	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vdrop	|RUN    a --
v1v	|SW      -- a
v1v	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
v2drop	|SETXY  ab --
vdrop	|PX+!   a --
vdrop	|PX!+   a --
v1v	|PX@     -- a

v1v	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vdrop	|PAPER  a --
vdrop	|INK    a --
v1v		|INK@    -- a
vdrop	|ALPHA  a --
v2drop	|OP     ab --
v2drop	|CP     ab --
v2drop	|LINE   ab --
v2drop	|CURVE  ab --
v2drop	|PLINE  ab --
v2drop	|PCURVE ab --
0		|POLI    --
v2drop	|FCOL   ab --
v2drop	|FCEN   ab --
v2drop	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vdrop	|TFILL  a --

0	|SLOAD   a -- a
vdrop	|SPLAY  a --
0	|MLOAD   a -- a
vdrop	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM

:vtini
	'tostr 'tostr> !
	'memp 'memp> !
	'sst 'sst> !
|	0 'nroi !
	0 'cntregs !
	'dpila 'dpila> !
	'rpila 'rpila> !
	;

::sregtok | adr -- adr+
	@+ $ff and |trace
	2 << 'acctoken + @ exec
	stacks>str
|	1 'nroi +! 
	;

:vtend
	;

|-------- analizadores
::vtstacknro | nro --
	vtini
	dup nro>udr 2drop
	neg ( 1? )( 0 0 d.pushNew 1- ) drop
	stacks>str

	nro>toklen ( 1? )( 1- swap sregtok swap )
	2drop
	vtend
	;

::vtstack | fin ini used --
	vtini
	( 1? )( 0 0 d.pushNew 1- ) drop
	stacks>str
	( over <? )( sregtok ) 2drop
	vtend
	;


:cntinstr
	tostr> 'tostr - 2 >> ;

|--- genera info

:getuso | token -- uso
	;

:completo? | str uso -- completo
	2drop
	0 ;

:analizatoken | 'info 'code 'tostr
	swap >r r@+	| 'info 'tostr token  r:'code1
	getuso	| 'info 'tostr uso   r:'code1
    rot @+ | 'info uso 'tostr1 str	r:'code1
	rot completo?	| 'info 'tostr1 completo r:'code1
	rot !+			| 'tostr1 'info  r:'code1
	r> rot ;

::generainfo | 'info 'code --
	'tostr
	cntinstr
	( 1? )( 1- >r
		analizatoken
		r> )
	4drop ;


|-------- asignadores
::mapregs | exe --
	'regs 0 ( cntregs <? )(
		swap
		@+ pick3 exec
		swap 1+ ) 3drop ;

|--------- dump
::sregdump
	'tostr ( tostr> <? )(
		@+ sp print cr
		) drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr + ( tostr> <? )(
		@+ sp print sp cr
		) drop
	;

|--------- imprimir
:value
	over 1020 + @ ;

:t0 amarillo "Cte " print value pick3 65 + "%k = %d" print ;
:t1 azul "Str " print value cte + pick3 65 + "%k = %s" print ;
:t2 violeta "Var " print value nro>nom pick3 65 + "%k = %w" print ;
:t3 violeta oscuro "'Va " print value nro>nom pick3 65 + "%k = '%w" print ;
:t4 rojo oscuro "'Co " print value nro>nom pick3 65 + "%k = '%w" print ;
:t5 cyan "Cpy " print value pick3 65 + "%k = %d" print ;
:t6 amarillo "Ext " print value pick3 65 + "%k = %s" print ;
:t7 blanco "Reg " print value pick3 65 + "%k = %d" print ;

#tiposr t0 t1 t2 t3 t4 t5 t6 t7

:cadaregistro
	dup $7 and 2 << 'tiposr + @ exec
|	pick2 65 + "(%k- " print
	16 >> $ff and
	1? ( " << %d" print )( drop )
	allowchome cr ;

::dumpregs | --
|	azul [ $ff0000 nand? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs CR
|	cyan [ $ff0000 and? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs
	'cadaregistro mapregs
	;

|--- dword
:mcte "$%h" mprint ;
:mstr "s%h" mprint ;
:mvar "dword [w%h]" mprint ;
:mdvar "w%h" mprint ;
:mdcod "w%h" mprint ;
:mmem ;
:morig ;

#accnreg 0 mcte mstr mvar mdvar mdcod mmem morig

:,nreg | nro -- ""
	2 << dup 'regv + @
	swap 'regs + @
	$7 and 2 << 'accnreg + @ exec ;

#RegCount 5
#ra "eax" #rb "ebx" #rc "ecx" #rd "edx" #re "edi"
#reg 'ra 'rb 'rc 'rd 're

:,Reg	RegCount <? ( 2 << 'reg + @ ; ) RegCount - 	| eax ebx ecx edx
		1+ neg
:,Esi	0? ( "dword [esi]" ,s drop ; )
		-? ( neg "dword [esi-4*%d]" )( "dword [esi+4*%d]" )
		mprint ;
:,Esp	0? ( "dword [esp]" ,s drop ; )
		-? ( neg "dword [esp-4*%d]" )( "dword [esp+4*%d]" )
		mprint ;
:,Var	"[w%h]" mprint ;
:,Icod  "i%h" mprint ;
:,Dcod
:,Dvar	"w%h" mprint ;
:,Str	"s%h" mprint ;
:,Cte	"%d" mprint ;

#tipopila ,Reg ,Esi ,Esp ,Var ,Icod ,Dcod ,Dvar ,Str ,Cte

:,vstack | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopila + @ exec ,s ;

|----------------------- byte
:mcteb "$%h" mprint ;
:mstrb "s%h" mprint ;
:mvarb "byte [w%h]" mprint ;
:mdvarb "w%h" mprint ;
:mdcodb "w%h" mprint ;
:mmemb ;
:morigb ;

#accnregb 0 mcteb mstrb mvarb mdvarb mdcodb mmemb morigb

:,nregb | nro -- ""
	2 << dup 'regv + @
	swap 'regs + @
	$7 and 2 << 'accnregb + @ exec ;


:,nreg ,reg ,s ;

#rab "al" #rbb "bl" #rcb "cl" #rdb "dl"
#regb 'rab 'rbb 'rcb 'rdb

:,regB	2 << 'regb + @ ; | no esta edi!!
:,esiB  0? ( "byte [esi]" ,s drop ; )
		-? ( neg "byte [esi-4*%d]" )( "byte [esi+4*%d]" )
		mprint ;
:,EspB	0? ( "byte [esp]" ,s drop ; )
		-? ( neg "byte [esp-4*%d]" )( "byte [esp+4*%d]" )
		mprint ;
:,VarB	"byte [w%h]" mprint ;

#tipopilaB ,RegB ,EsiB ,EspB ,VarB

:,vstackbyte | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaB + @ exec ,s ;

|----------------------- word
:mctew "$%h" mprint ;
:mstrw "s%h" mprint ;
:mvarw "word [w%h]" mprint ;
:mdvarw "w%h" mprint ;
:mdcodw "w%h" mprint ;
:mmemw ;
:morigw ;

#accnregw 0 mctew mstrw mvarw mdvarw mdcodw mmemw morigw

:,nregw | nro -- ""
	2 << dup 'regv + @
	swap 'regs + @
	$7 and 2 << 'accnregw + @ exec ;

#raw "ax" #rbw "bx" #rcw "cx" #rdw "dx" #rew "di"
#regw 'raw 'rbw 'rcw 'rdw 'rdw

:,regW	2 << 'regw + @ ;
:,esiW  0? ( "word [esi]" ,s drop ; )
		-? ( neg "word [esi-4*%d]" )( "word [esi+4*%d]" )
		mprint ;
:,EspW	0? ( "word [esp]" ,s drop ; )
		-? ( neg "word [esp-4*%d]" )( "word [esp+4*%d]" )
		mprint ;
:,VarW	"word [w%h]" mprint ;

#tipopilaW ,RegW ,EsiW ,EspW ,VarW

:,vstackword | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaW + @ exec ,s ;

|--------------------------------------------
