| pilas virtuales (datos y retorno)
| para emulador y compilador
| PHREDA 2011
|------------------------------------

^r4/system/r4token.txt

|--- registros  $iiffccss
| ii inicio
| cc cntdeop
| tipo  cte,str,var,dvar,dcod,mem,orig
| flags final,registro
|-----------

#nroi 0
#cntregs 0
#regs )( 1024	| info de registros
#regv )( 1024	| valor de registro

#tostr )( 4096	| indice de dib pilas
#tostr> 'tostr

#memp )( 4096	| dibujo de pilas
#memp> 'memp

:+memp | c --
	memp> c!+ 'memp> ! ;

#sst )( 1024 | pila de pilas
#sst> 'sst

:sst!
	sst> !+ 'sst> ! ;

:sst@
	-4 'sst> +! sst> @ ;


|--- Pila DATOS
#:dpila )( 1024 | 8bits
#:dpila> 'dpila

#minpd #maxpd
|----- PILA R
#:rpila )( 1048
#:rpila> 'rpila
#minpr #maxpr

::mappila | exe --
	'dpila ( dpila> <? )( @+ pick2 exec ) 2drop ;

::d.ini
	'dpila 'dpila> !
	0 dup 'minpd ! 'maxpd !
	0 'dpila ( 'dpila> <? )( over 25 << 25 >> swap !+ ) 2drop
	;

::d.cnt dpila dpila> - 2 >> ;
::d.pop -4 'dpila> +! dpila> @ ;
::d.pop2 -8 'dpila> +! dpila> @+ swap @ ;
::d.pop3 -12 'dpila> +! dpila> @+ swap @+ swap @ ;
::d.push dpila> !+ 'dpila> ! ;
::d.TOS dpila> 4 - @ ;
::d.NOS dpila> 8 - @ ;

::d.pushDec		d.push ;
::d.pushHex		d.push ;
::d.pushBin		d.push ;
::d.pushFix		d.push ;
::d.pushStr		d.push ;
::d.pushVar		d.push ;
::d.pushDVar	d.push ;
::d.pushDCod	d.push ;
::d.pushCNum	d.push ;
::d.pushCStr	d.push ;
::d.pushCDVar	d.push ;
::d.pushCDCod	d.push ;

::d.pushCalc	d.push ;
::d.pushMem		d.push ;
:d.pushcopy	d.push ;

|-------- operaciones de pila
::vDROP		-4 'dpila> +! ;
::v2DROP 	-8 'dpila> +! ;
::v3DROP 	-12 'dpila> +! ;
::v4DROP 	-16 'dpila> +! ;
::vDUP
	dpila> 4 - @+ swap !+ 'dpila> ! ;
::v2DUP
	dpila> 8 - >r
	r@+ r@+ swap
	r!+ r!+
	r> 'dpila> ! ;
::vOVER
	dpila> 8 - >r
	r@+ r> 4+ !+ 'dpila> ! ;
::vPICK2
	dpila> 12 - >r
	r@+ r> 8 + !+ 'dpila> ! ;
::vPICK3
	dpila> 16 - >r
	r@+ r> 12 + !+ 'dpila> ! ;
::vPICK4
	dpila> 20 - >r
	r@+ r> 16 + !+ 'dpila> ! ;
::vSWAP
	dpila> 8 - >r
	r@+ r@+ r> 8 -
	!+ ! ;
::vNIP
	dpila> 4 -
	dup @ over 4 - ! 'dpila> ! ;
::vROT
	dpila> 12 - >r
	r@+ r@+ r@+
	swap r> 12 - !+ !+ ! ;
::v2OVER
	dpila> 16 - >r
	r@+ r@+ swap
	r> 8 + !+ !+ 'dpila> ! ;
::v2SWAP
	dpila> 16 - >r
	r@+ r@+ r@+ r@+
	r> 32 - !+ !+ !+ ! ;

|--- aritmeticas y logica
::vAND	d.pop2 AND d.pushVar ;
::vOR	d.pop2 OR d.pushVar ;
::vXOR	d.pop2 XOR d.pushVar ;
::vNOT	d.pop NOT d.pushVar ;
::v+	d.pop2 + d.pushVar ;
::v-    d.pop2 - d.pushVar ;
::v*    d.pop2 * d.pushVar ;
::v/    d.pop2 / d.pushVar ;
::v*/   d.pop3 */ d.pushVar ;
::v*>>  d.pop3 *>> d.pushVar ;
::v/MOD d.pop2 /MOD swap d.pushVar d.pushVar ;
::vMOD  d.pop2 MOD d.pushVar ;
::vABS  d.pop ABS d.pushVar ;
::vSQRT	d.pop SQRT d.pushVar ;
::vCLZ	d.pop CLZ d.pushVar ;
::v<</	d.pop3 <</ d.pushVar ;
::vNEG  d.pop NEG d.pushVar ;
::v2/   d.pop 2/ d.pushVar ;
::v2*   d.pop 2* d.pushVar ;
::v<<   d.pop2 << d.pushVar ;
::v>>   d.pop2 >> d.pushVar ;
::v1-   d.pop 1- d.pushVar ;
::v1+   d.pop 1+ d.pushVar ;
::v4+   d.pop 4+ d.pushVar ;


::mappilar | exe --
	'rpila ( rpila> <? )( @+ pick2 exec ) 2drop ;

::r.ini	
	'rpila 'rpila> ! 
	0 dup 'minpr ! 'maxpr !
	0 'rpila ( 'rpila> <? )( over 25 << 25 >> swap !+ ) 2drop
	;

::r.pop	-4 'rpila> +! rpila> @ ;
::r.push rpila> !+ 'rpila> ! ;
::r.cnt	rpila> 'rpila - 2 >> ;
::r.tos rpila> 4 - @ ;

:r.pushCopy r.push ;
:r.pushCalc r.push ;

|--- pila de direccion
::v>R		d.pop r.pushCopy ;
::vR>		r.pop d.pushCopy ;
::vR		r.tos d.pushCopy ;
::vR+		r.pop d.pop + r.pushCalc ;
::vR@+		r.pop @+ d.pushMem r.pushCopy ;
::vR!+		d.pop r.pop !+ r.pushCopy ;
::vRDROP	r.pop drop ;

|----- imprime pilas

:dec	@+ "%d" print ;	|::d.pushDec 0
:hex    @+ "$%h" print ;	|::d.pushHex 1
:bin    @+ "%%%b" print ;	|::d.pushBin 2
:fix    @+ "%f" print ;	|::d.pushFix 3
:str    @+ "%d" print ;	|::d.pushStr 4
:var	@+ "%d" print ;	|::d.pushVar  5
:dvar	@+ "%d" print ;	|::d.pushDVar 6
:dcod	@+ "%d" print ;	|::d.pushDCod 7
:cnum	@+ "%d" print ;	|::d.pushCNum 8
:cstr	@+ "%d" print ;	|::d.pushCStr 9
:cdvar	@+ "%d" print ;	|::d.pushCDVar 10
:cdcod	@+ "%d" print ;	|::d.pushCDCod 11

#accpp 'dec 'hex 'bin 'fix 'str 'var 'dvar 'dcod 'cnum 'cstr 'cdvar  'cdcod

:printpilai | adr -- adr++
	@+ $f and 2 << 'accpp + @ exec ;

::dumpvstack
	"D)" print
	'dpila ( dpila> <? )( sp printpilai ) drop
	cr
	"R)" print
	'rpila ( rpila> <? )( sp printpilai ) drop
	cr
	;


:mcte "$%h" mprint ;
:mstr "s%h" mprint ;
:mvar "[w%h]" mprint ;
:mdvar "w%h" mprint ;
:mdcod "w%h" mprint ;
:mmem ;
:morig ;

#accnreg 0 mcte mstr mvar mdvar mdcod mmem morig

::,nreg | nro -- ""
	2 << dup 'regv + @
	swap 'regs + @
	$7 and 2 << 'accnreg + @ exec ;


:setreg | valor --
	nroi 24 << or	| inicio
	cntregs 1- 2 << 'regs + !
	;

:usoreg | --
	d.TOS 2 << 'regs + dup
	@ dup $ffff00ff and swap
	$ff00 and $100 + or
	swap ! ;

:usomreg | --
	d.TOS 2 << 'regs + dup
	@ $80 or swap ! ;

:setrange | --
	d.TOS 2 << 'regs + dup
	@ $ff00ffff and
	nroi 16 << or
	swap ! ;

|-------------------------------
:stacks>str | --
	memp> tostr> !+ 'tostr> !
	[ 65 + +memp ; ] mappila
	$3A +memp
	[ 65 + +memp ; ] mappilar
	0 +memp
	;

:str>stacks | "" --
	d.ini
	( c@+ $3a <>? )(
		65 - d.push
		) drop
	r.ini
	( c@+ 1? )(
		65 - r.push
		) 2drop
	;

:stacknow | -- now
	tostr> 4 - @ ; | stack actual

:newREG
	cntregs d.push 1 'cntregs +! ;

:newREGR
	cntregs r.push 1 'cntregs +! ;

|----------------------------
:litN	| 12
	newREG $1 setreg ;

:litS	| "kk"
	newREG $2 setreg ;

:callW	| ww
	dup 4 - @ 8 >> nro>mov @
|	dup 24 >> | no se propaga es flujo de ejecucion
|	-? ( ( 1? )( 1+ vrdrop ) drop )( ( 1? )( 1- newRegR ) drop ) 	|	'deltaR +!
	8 << 24 >>
	0? ( drop ; )
	-? ( ( 1? )( 1+ vdrop ) drop )( ( 1? )( 1- newReg ) drop ) 	|'deltaD +!
	;

:litV	| vv
	newREG $3 setreg ;
:litAV	| 'v
	newREG $4 setreg ;
:litAW	| 'w
	newREG $5 setreg ;


:1dw 	| exec
	setrange vdrop ;
:c0 | 0? 1? ..
	usoreg setrange ;
:c1 | =? <? ..
	setrange vdrop usoreg setrange ;

:s1 | dup
	newREG ;
:s2 | over
	newREG ;
:s3 	|PICK2  abc -- abca
	newREG ;
:s4 	|PICK3  abcd -- abcda
	newREG ;
:s5 	|PICK4  abcde -- abcdea
	newREG ;
:s6	|2DUP   ab -- abab
	newREG newREG ;
:s7	|2OVER  abcd -- abcdab
	newREG newREG ;

:d4 | 4drop
	setrange vdrop
:d3 | 3drop
	setrange vdrop
:d2 | 2drop
	setrange vdrop
:d1 | drop
	setrange vdrop ;

:2a1	| + - * and or xor << ..
	setrange vdrop usoreg setrange ;
:1a1	| neg not 1+ 4+ 1- 2/ ..
 usoreg setrange ;
:3a1	| *>> /<< */
	setrange vdrop setrange vdrop
 usoreg setrange ;
:2a2	| mod/
	setrange vswap setrange vswap
	;
:1@
	usomreg setrange ;
:1!
	usomreg
	d2 ;
:2@	| @+
	usomreg setrange
	newReg $20 setreg ;
:2! | !+
	usomreg setrange
	vswap setrange vdrop ;
:2+! | +!
	usomreg
	d2 ;


:vr		|R      -- a R: a -- a
	vr> setrange v>r ;
:vr+		|R+    a -- R: b -- c
	vr d1 ;
:vr@+	|R@+    -- a R: b -- c
	vr> setrange usoreg usomreg v>r
	newReg $20 setreg ;
:vr!+	|R!+   a -- R: b -- c
	vr> setrange usoreg usomreg v>r
	d1 ;
:vrdr
	vr> d1 ;

:+mem
	newREG $6 setreg ;

:v3v newREG
:v2v newREG
:v1v newREG ;

|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(	|(
	stacknow sst!
	salto? sst!
	;

:es)(	|)(
	salto? 1? ( sst@ 2drop stacknow sst! 3 sst! ; ) | while
	sst@ 2drop
	sst@ dup sst!
	stacknow sst! 2 sst!
	str>stacks
	;

:tipo0 | (  ? ) o (    )
	sst@ drop ;

:tipo1 | ?( )
	;? 1? ( sst@ str>stacks drop ; )
	sst@ 2drop ;

:tipo2 | ?( )( )
	;? 1? ( sst@ sst@ str>stacks 2drop ; )
	sst@ str>stacks sst@ 2drop ;

:es)	|)
	sst@ 0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	sst@ str>stacks	| ( ? )(  )
	sst@ 2drop
	;

|--- anonimas
:es[	|[
	stacknow sst!
	d.ini r.ini ;

:es]	|]
	sst@ str>stacks
	newREG $5 setreg ;

| uso dD dR tipo
#acctoken
0	| 0
0	|1 :,,defc
0	|2 :,,defv
litN |3 :,,litd | --	n numero decimal
litN |4 :,,lith | --	n numero hexa
litN |5 :,,litb | -- n numero binario
litN |6 :,,litf | --	n numero punto fijo
litS |7 :,,lits | --	s string
callW |8 :,,word 	| ..--..  word <---- debe ser calculado
litV |9 :,,var 	| -- v var
litAW |10:,,dword | -- dw dir word
litAV |11:,,dvar 	| -- dv dir var
0	|; | fin de palabra (12)
es(	|(
es)(	|)(
es)	|)
es[	|[
es]	|]
1dw	|EXEC  x/0 --    TOS es dcod
c0	|0? a -- a
c0	|+? a -- a
c0	|-? a -- a
c0	|1? a -- a
c1	|=?  ab -- a
c1	|<?  ab -- a
c1	|>?  ab -- a
c1	|<=? ab -- a
c1	|>=? ab -- a
c1	|<>? ab -- a
c1	|AND?  ab -- a
c1	|NAND? ab -- a
s1	|DUP    a -- aa
d1 	|DROP  a --
s2 	|OVER   ab -- aba
s3 	|PICK2  abc -- abca
s4 	|PICK3  abcd -- abcda
s5 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
s6	|2DUP   ab -- abab
d2	|2DROP ab --
d3	|3DROP abc --
d4	|4DROP abcd --
s7	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab

v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
vrdr	|RDROP	R: a --

2a1 |53 AND	ab -- c
2a1 |OR    ab -- c
2a1 |XOR   ab -- c
1a1 |NOT    a -- b
2a1 |+		ab -- c
2a1 |-     ab -- c
2a1 |*     ab -- c
2a1 |/     ab -- c		usa eax,edx
3a1	|*/    abc -- d     usa eax,edx
3a1	|*>>   abc -- d     usa eax,edx, ecx
2a2	|/MOD   ab -- cd    usa eax,edx
2a1 |MOD    ab -- c     usa eax,edx
1a1 |ABS    a -- b      usa eax,edx
1a1 |SQRT	a -- b
1a1 |CLZ	a -- b     usa eax,edx
3a1	|<</	abc -- d   usa eax,edx, ecx
1a1 |NEG    a -- b
1a1 |1+     a -- b
1a1 |4+     a -- b
1a1 |1-     a -- b
1a1 |2/     a -- b
1a1 |2*     a -- b
2a1 |<<    ab -- c     usa ecx
2a1 |76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v3drop	|MOVE  abc --       a,b es ddat
v3drop	|MOVE> abc --		a,b es ddat
v3drop	|CMOVE abc --		a,b es ddat
v3drop	|CMOVE> abc --		a,b es ddat

+mem |MEM	-- a		a es ddat
vdrop	|DIR    a --
0	|FILE   a -- b
0	|FSIZE  a -- b
0	|VOL    a -- b
vdrop	|LOAD   ab -- c
v3drop	|SAVE   abc --

0	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vdrop	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vdrop	|RUN    a --
v1v	|SW      -- a
v1v	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
v2drop	|SETXY  ab --
vdrop	|PX+!   a --
vdrop	|PX!+   a --
v1v	|PX@     -- a

v1v	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vdrop	|PAPER  a --
vdrop	|INK    a --
v1v		|INK@    -- a
vdrop	|ALPHA  a --
v2drop	|OP     ab --
v2drop	|CP     ab --
v2drop	|LINE   ab --
v2drop	|CURVE  ab --
v2drop	|PLINE  ab --
v2drop	|PCURVE ab --
0		|POLI    --
v2drop	|FCOL   ab --
v2drop	|FCEN   ab --
v2drop	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vdrop	|TFILL  a --

0	|SLOAD   a -- a
vdrop	|SPLAY  a --
0	|MLOAD   a -- a
vdrop	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM



:vtini
	'tostr 'tostr> !
	'memp 'memp> !
	'sst 'sst> !
	0 'nroi !
	0 'cntregs !
	'regs 256 ( 1? )( 1- 0 rot !+ swap ) 2drop
	d.ini r.ini
	stacks>str
	;

::sregtok | adr -- adr+
	@+ $ff and 2 << 'acctoken + @ exec
	stacks>str
	1 'nroi +! ;

:vtend
	;

|-------- analizadores
::vtstacknro | nro --
	vtini
	nro>toklen ( 1? )( 1- swap sregtok swap )
	2drop
	vtend
	;

::vtstack | fin ini --
	vtini
	( over <? )( sregtok ) 2drop
	vtend
	;

|-------- asignadores
::mapregs | exe --
	'regs 0 ( cntregs <? )(
		swap
		@+ pick3 exec
		swap 1+ ) 3drop ;

|--------- dump
::sregdump
	'tostr ( tostr> <? )(
		@+ sp print cr
		) drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr + ( tostr> <? )(
		@+ sp print cr
		) drop
	;

::dumpregs | --
	| ctes
	azul
	[ $ff00 nand? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs
	cyan cr
	[ $ff00 and? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs
	;