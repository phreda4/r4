| Interprete de R4
| PHREDA 2007
|---------------------------------
^r4/lib/print.txt
^r4/lib/trace.txt

^r4/system/r4token.txt
^r4/system/r4post.txt

#memvar
#freemem

#:<<ip
#:actwrd

|--- Pila DATOS
| 		valor 		tipo
| TOS = dpila>-4  dpila>-8
|       -12       -16
|       -20       -24
|       -28       -32
#:dpila )( 2048
#:dpila> 'dpila

:d.ini 'dpila 'dpila> ! ;
:d.cnt | -- cnt
	dpila dpila> - 3 >> ;

::d.pop | -- nro
	dpila> 8 -
	dup 'dpila> ! 4+ @ ;
::d.pop2
	-16 'dpila> +!
	dpila> 4+ @+ swap 4+ @ ;
:d.pop3
	-24 'dpila> +!
	dpila> 4+ @+ swap 4+ @+ swap 4+ @ ;

::d.get dpila> 4 - @ ;
:d.get2 dpila> 12 - @ ;

:d.push | nro tipo --
	dpila> !+ !+ 'dpila> ! ;

::d.pushDec		$0 d.push ;
::d.pushHex		$1 d.push ;
::d.pushBin		$2 d.push ;
::d.pushFix		$3 d.push ;

::d.pushStr		$4 d.push ;
::d.pushVar		$5 d.push ;
::d.pushDVar	$6 d.push ;
::d.pushDCod	$7 d.push ;
::d.pushCNum	$8 d.push ;
::d.pushCStr	$9 d.push ;
::d.pushCDVar	$10 d.push ;
::d.pushCDCod	$11 d.push ;
::d.pushEXE		$11 d.push ;

|-----
:iDROP  drop -8 'dpila> +! ;
:i2DROP drop -16 'dpila> +! ;
:i3DROP drop -24 'dpila> +! ;
:i4DROP drop -32 'dpila> +! ;
:iDUP   drop
	dpila> 8 - >r
	r@+ r@+ swap
	r!+ r!+ r> 'dpila> ! ;
:i2DUP  drop
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r!+ r!+ r!+ r!+
	r> 'dpila> ! ;
:iOVER  drop
	dpila> 16 - >r
	r@+ r@+ swap r> 8 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK2 drop
	dpila> 24 - >r
	r@+ r@+ swap r> 16 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK3 drop
	dpila> 32 - >r
	r@+ r@+ swap r> 24 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK4 drop
	dpila> 40 - >r
	r@+ r@+ swap r> 32 + >r
	r!+ r!+ r> 'dpila> ! ;
:iSWAP drop
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r> @ swap
	dpila> 16 -
	!+ !+ !+ ! ;
:iNIP drop
	dpila> 8 - >r
	r@+ r@+ swap r> 16 -
	!+ !+ 'dpila> ! ;
:iROT drop
	dpila> 24 - >r
	r@+ r@+ swap
	r@+ r@+ swap
	r@+ r> @ swap 2swap
	dpila> 24 -
	!+ !+ !+ !+ !+ ! ;
:i2OVER drop
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r> 16 +
	!+ !+ !+ !+ 'dpila> ! ;
:i2SWAP drop
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r@+ r@+ swap
	r@+ r@+ swap 2swap r> 32 -
	!+ !+ !+ !+ !+ !+ !+ ! ;

|----- PILA R
#:rpila )( 2048
#:rpila> 'rpila

:r.ini	'rpila 'rpila> ! ;
:r.pop	-8 'rpila> +! rpila> 4+ @ ;
:r.cnt	rpila> 'rpila - 3 >> ;
:r.tos rpila> 4 - @ ;
:r.push | nro tipo --
	rpila> !+ !+ 'rpila> ! ;

::r.pushDec		$0 r.push ;
::r.pushHex		$1 r.push ;
::r.pushBin		$2 r.push ;
::r.pushFix		$3 r.push ;

::r.pushStr		$4 r.push ;
::r.pushVar		$5 r.push ;
::r.pushDVar	$6 r.push ;
::r.pushDCod	$7 r.push ;
::r.pushCNum	$8 r.push ;
::r.pushCStr	$9 r.push ;
::r.pushCDVar	$10 r.push ;
::r.pushCDCod	$11 r.push ;
::r.pushEXE		$11 r.push ;

:i>R	drop d.pop r.pushDec ;		|--- pila de direccion
:iR>    drop r.pop d.pushDec ;
:iR     drop r.tos d.pushDec ;
:iR+	drop r.pop d.pop + r.pushDec ;
:iR@+	drop r.pop @+ d.pushDec r.pushDec ;
:iR!+	drop d.pop r.pop !+ r.pushDec ;
:iRDROP	r.pop 2drop ;

|---------------------------------
#viewcode )( 1024
#viewcode> 'viewcode

#viewdata )( 1024
#viewdata> 'viewdata

:codereset
	'viewcode 'viewcode> ! ;

:+code | nrow --
	viewcode> !+ 'viewcode> ! ;

:dupcode | --
	viewcode> dup 4 - @ swap !+ 'viewcode> ! ;

:-code | --
	-4 'viewcode> +! ;

:datareset
	'viewdata 'viewdata> ! ;

:+data | nrow --
	viewdata> !+ 'viewdata> ! ;

:-data | --
	-4 'viewdata> +! ;

|-------------------------------------
#inter )( 64
#inter> 'inter

#irqkey 0

#msg

|---- interrupciones
:+interrupcion | inter --
	0? ( drop ; )
	inter> !+ 'inter> >=? ( "Bucle infinito" 'msg ! 0 ; )
	'inter> ! ;

|---- Comprobaciones

:dstack? | cnt --
	3 << neg dpila> +
	'dpila >=? ( drop ; ) drop
	"data stack empty" 'msg ! 0 nip ;

:rstack? | cnt --
	3 << neg rpila> +
	'rpila >=? ( drop ; ) drop
	"return stack empty" 'msg ! 0 nip ;

:progmem? | adr -- adr
	prog >=? ( prog> <=? ( ; ) )
	"fuera de codemem" 'msg ! 0 nip ;

:datamem? | adr -- adr 0/1
	memvar >=? ( freemem <=? ( ; ) )
	"fuera de datamem" 'msg ! 0 nip ;


|--- interprete
:i0		drop ;
:i:		drop ;
:i#		drop ;

:idec	tok>cte d.pushDec ;
:ihex	tok>cte d.pushHex ;
:ibin	tok>cte d.pushBin ;
:ifix	tok>cte d.pushFix ;
:istr	tok>str d.pushStr ;

|--- llama palabra
:iwor	8 >> dup +code nro>tok swap r.pushEXE ;
:iworS	8 >> nro>tok swap r.pushEXE ;

:ivar	8 >> nro>mem @ d.pushVar ;
:idvar	8 >> nro>mem d.pushDVar ;
:idwor	8 >> nro>tok d.pushDCod ;

|--- retorna
:i;		drop r.cnt 0? ( nip ; ) 2drop r.pop -code ;
:i;S	drop r.cnt 0? ( nip ; ) 2drop r.pop  ;

:i)(
:i)		8 >> + ;
:i(     drop ;
:i[     8 >> over d.pushEXE + ;
:i]     drop ;

:i0?	drop @+ d.get 0? ( 2drop ; ) drop 8 >> + ;
:i+?	drop @+ d.get +? ( 2drop ; ) drop 8 >> + ;
:i-?	drop @+ d.get -? ( 2drop ; ) drop 8 >> + ;
:i1?	drop @+ d.get 1? ( 2drop ; ) drop 8 >> + ;
:i=?	drop @+ d.get2 d.pop =? ( 2drop ; ) drop 8 >> + ;
:i<?	drop @+ d.get2 d.pop <? ( 2drop ; ) drop 8 >> + ;
:i>?	drop @+ d.get2 d.pop >? ( 2drop ; ) drop 8 >> + ;
:i<=?	drop @+ d.get2 d.pop <=? ( 2drop ; ) drop 8 >> + ;
:i>=?   drop @+ d.get2 d.pop >=? ( 2drop ; ) drop 8 >> + ;
:i<>?   drop @+ d.get2 d.pop <>? ( 2drop ; ) drop 8 >> + ;
:iAND?  drop @+ d.get2 d.pop AND? ( 2drop ; ) drop 8 >> + ;
:iNAND? drop @+ d.get2 d.pop NAND? ( 2drop ; ) drop 8 >> + ;

:iEXEC
	dupcode
	drop d.pop 0? ( drop ; )
	swap r.pushEXE
	progmem? ;

:iEXECs
	drop d.pop 0? ( drop ; )
	swap r.pushEXE
	progmem? ;

|--- aritmetica y logica
:iAND   drop d.pop2 AND d.pushVar ;
:iOR	drop d.pop2 OR d.pushVar ;
:iXOR	drop d.pop2 XOR d.pushVar ;
:iNOT	drop d.pop NOT d.pushVar ;
:i+		drop d.pop2 + d.pushVar ;
:i-     drop d.pop2 - d.pushVar ;
:i*     drop d.pop2 * d.pushVar ;
:i/     drop d.pop2 / d.pushVar ;
:i*/    drop d.pop3 */ d.pushVar ;
:i*>>   drop d.pop3 *>> d.pushVar ;
:i/MOD  drop d.pop2 /MOD swap d.pushVar d.pushVar ;
:iMOD   drop d.pop2 MOD d.pushVar ;
:iABS   drop d.pop ABS d.pushVar ;
:iSQRT	drop d.pop SQRT d.pushVar ;
:iCLZ	drop d.pop CLZ d.pushVar ;
:i<</	drop d.pop3 <</ d.pushVar ;
:iNEG   drop d.pop NEG d.pushVar ;
:i2/    drop d.pop 2/ d.pushVar ;
:i2*    drop d.pop 2* d.pushVar ;
:i<<    drop d.pop2 << d.pushVar ;
:i>>    drop d.pop2 >> d.pushVar ;
:i1-    drop d.pop 1- d.pushVar ;
:i1+    drop d.pop 1+ d.pushVar ;
:i4+    drop d.pop 4+ d.pushVar ;

|--- memoria
:i@     drop d.pop @ d.pushVar ;
:iC@	drop d.pop c@ d.pushVar ;
:iW@    drop d.pop w@ d.pushVar ;
:i!     drop d.pop2 ! ;
:iC!    drop d.pop2 c! ;
:iW!    drop d.pop2 w! ;
:i+!	drop d.pop2 +! ;
:iC+!	drop d.pop2 c+! ;
:iW+!	drop d.pop2 w+! ;
:i@+	drop d.pop @+ swap d.pushVar d.pushVar ;
:iC@+	drop d.pop c@+ swap d.pushVar d.pushVar ;
:iW@+	drop d.pop w@+ swap d.pushVar d.pushVar ;
:i!+	drop d.pop2 !+ d.pushVar ;
:iC!+	drop d.pop2 c!+ d.pushVar ;
:iW!+	drop d.pop2 w!+ d.pushVar ;


|---- pantalla
:iSW 	drop sw d.pushDec ;
:iSH    drop sh d.pushDec ;
:iFRAMEV	drop framev d.pushVar ;
:iREDRAW    drop redraw ;
:iUPDATE    drop
	inter> 'inter =? ( drop ; )
	4 - dup 'inter> ! @ |0? ( drop ; )
	swap rpila> !+ 'rpila> !
	;


|---- dibujo
:iOP    	drop d.pop2 op ;
:iCP    	drop d.pop2 cp ;
:iLINE  	drop d.pop2 line ;
:iCURVE 	drop d.pop2 curve ;
:iPLINE 	drop d.pop2 pline ;
:iPCURVE 	drop d.pop2 pcurve ;
:iPOLI   	drop poli ;
:iFCOL   	drop d.pop2 fcol ;
:iFCEN   	drop d.pop2 fcen ;
:iFMAT   	drop d.pop2 fmat ;
:iSFILL  	drop sfill ;
:iLFILL  	drop lfill ;
:iRFILL  	drop rfill ;
:iTFILL  	drop d.pop tfill ;

:iSETXY  	drop d.pop2 setxy ;
:iPX+!   	drop d.pop px+! ;
:iPX!+   	drop d.pop px!+ ;
:iPX@    	drop px@ d.pushVar ;

:iXFB		drop xfb d.pushVar ;
:i>XFB		drop >xfb ;
:iXFB>		drop xfb> ;

:iPAPER  	drop d.pop paper ;
:iINK    	drop d.pop ink ;
:iINKF   	drop ink@ d.pushVar ;
:iALPHA  	drop d.pop ALPHA ;
:iCLS    	drop cls ;
|----- sis
:iMSEC   	drop msec d.pushVar ;
:iTIME   	drop time rot d.pushVar swap d.pushVar d.pushVar ;
:iDATE   	drop date rot d.pushVar swap d.pushVar d.pushVar ;
:iEND    	2drop 0 ;
:iRUNi   	iDROP ;
|-----  Interrupciones
|-----mouse
:iTPEN		drop tpen d.pushVar ;
:iXYMOUSE	drop xymouse swap d.pushVar d.pushVar ;
:iBMOUSE    drop bmouse d.pushVar ;
|-----teclado
:iSKEY  	drop d.pop key! ;
:iKEY		drop key d.pushVar ;
|-----joystick
:iCNTJOY    drop cntjoy d.pushVar ;
:iGETJOY    drop d.pop GETJOY d.pushVar ;
|--- archivos
:iDIR       drop d.pop dir ;	| "path" --
:iVOL       drop d.pop VOL d.pushVar ;  | nro -- "nombre" o 0
:iFILE      drop d.pop file d.pushVar ;  | nro -- "nombre" o 0
:iFSIZE     drop d.pop FSIZE d.pushVar ;  | nro --  size o 0
:iLOAD      drop d.pop2 load d.pushVar ;  | 'from "filename" -- 'to
:iSAVE      drop d.pop3 save ;   |  'from cnt "filename" --
:iMEM       drop freemem d.pushVar ; | mem

|--- mueve mem
:iMOVE      drop d.pop3 move ;
:iMOVE>     drop d.pop3 move> ;
:iCMOVE     drop d.pop3 cmove ;
:iCMOVE>    drop d.pop3 cmove> ;

|--- sonido
:iSLOAD     drop d.pop SLOAD d.pushVar ;  | "" -- n
:iSPLAY     drop d.pop SPLAY ;  | n/0 --
:iMLOAD     drop d.pop MLOAD d.pushVar ;  | "" -- n
:iMPLAY     drop d.pop MPLAY ;  | n/0 --

:iOPENURL
	drop d.pop3 openurl d.pushVar ;

|---------- tabla de saltos
#tablai	| tabla de saltos de instrucciones
i0
i: i#
idec ihex ibin ifix istr
iwor ivar idwor idvar
i;
i(		i)(		i)		i[		i]		iEXEC
i0?		i+?		i-?		i1?		i=?		i<?		i>?		i<=?	i>=?	i<>?	iAND?	iNAND?
iDUP	iDROP	iOVER	iPICK2	iPICK3	iPICK4	iSWAP	iNIP	iROT
i2DUP	i2DROP	i3DROP	i4DROP	i2OVER	i2SWAP
i>R		iR>		iR		iR+		iR@+	iR!+	iRDROP
iAND	iOR		iXOR	iNOT	i+		i-		i*		i/		i*/
i*>>	i/MOD	iMOD	iABS	iSQRT   iCLZ	i<</
iNEG	i1+		i4+		i1-		i2/		i2*		i<<		i>>
i@		iC@		iW@		i!		iC!		iW!		i+!		iC+!	iW+!	i@+		i!+		iC@+	iC!+	iW@+	iW!+
iMOVE	iMOVE>	iCMOVE	iCMOVE>
iMEM	iDIR	iFILE	iFSIZE	iVOL	iLOAD	iSAVE
iUPDATE
iTPEN 	iXYMOUSE iBMOUSE
iSKEY	iKEY
iCNTJOY	iGETJOY
iMSEC	iTIME	iDATE	iEND	iRUNi
iSW		iSH		iCLS	iREDRAW	iFRAMEV
iSETXY	iPX+!	iPX!+	iPX@
iXFB	i>XFB	iXFB>
iPAPER	iINK	iINKF	iALPHA
iOP		iCP		iLINE	iCURVE	iPLINE	iPCURVE	iPOLI
iFCOL	iFCEN	iFMAT	iSFILL	iLFILL	iRFILL	iTFILL
iSLOAD	iSPLAY	iMLOAD	iMPLAY					|--- Sonido
iOPENURL

#tablais	| tabla de saltos de instrucciones silenciosa
i0
i: i#
idec ihex ibin ifix istr
iwors ivar idwor idvar
i;s
i(		i)(		i)		i[		i]		iEXECs
i0?		i+?		i-?		i1?		i=?		i<?		i>?		i<=?	i>=?	i<>?	iAND?	iNAND?
iDUP	iDROP	iOVER	iPICK2	iPICK3	iPICK4	iSWAP	iNIP	iROT
i2DUP	i2DROP	i3DROP	i4DROP	i2OVER	i2SWAP
i>R		iR>		iR		iR+		iR@+	iR!+	iRDROP
iAND	iOR		iXOR	iNOT	i+		i-		i*		i/		i*/
i*>>	i/MOD	iMOD	iABS	iSQRT   iCLZ	i<</
iNEG	i1+		i4+		i1-		i2/		i2*		i<<		i>>
i@		iC@		iW@		i!		iC!		iW!		i+!		iC+!	iW+!	i@+		i!+		iC@+	iC!+	iW@+	iW!+
iMOVE	iMOVE>	iCMOVE	iCMOVE>
iMEM	iDIR	iFILE	iFSIZE	iVOL	iLOAD	iSAVE
iUPDATE
iTPEN 	iXYMOUSE iBMOUSE
iSKEY	iKEY
iCNTJOY	iGETJOY
iMSEC	iTIME	iDATE	iEND	iRUNi
iSW		iSH		iCLS	iREDRAW	iFRAMEV
iSETXY	iPX+!	iPX!+	iPX@
iXFB	i>XFB	iXFB>
iPAPER	iINK	iINKF	iALPHA
iOP		iCP		iLINE	iCURVE	iPLINE	iPCURVE	iPOLI
iFCOL	iFCEN	iFMAT	iSFILL	iLFILL	iRFILL	iTFILL
iSLOAD	iSPLAY	iMLOAD	iMPLAY					|--- Sonido
iOPENURL

::stepmacro | nro --
  	dup 11 + 2 << 'tablai + @ exec ;

::stepword | adr --
	dup 8 + @ 1 and? ( drop 12 + @ @ d.pushVar ; ) drop
	4+ @
	<<ip dup r.pushExe
	swap
	( over <>? )(
		@+ dup $ff and
		2 << 'tablais + @ exec
		0? ( '<<ip ! 2drop ; )
		) 2drop
	'<<ip ! ;

::stepadr | adr --
	dup 8 + @ 1 and? ( drop 12 + @ d.pushVar ; ) drop
	4+ @ d.pushExe
	;

::stepvm | --
	<<ip 0? ( drop ; )
:step..
	@+ dup $ff and
	2 << 'tablai + @ exec
	'<<ip ! ;

::stepvmn | --
	<<ip 0? ( drop ; )
	dup @ $ff and 8 <>? ( drop step.. ; ) drop
	dup 4+ swap
	( over <>? )(
		@+ dup $ff and
		2 << 'tablais + @ exec
		0? ( 2drop ; )
		) nip
	'<<ip ! ;


|----- imprime pilas
:dec	@+ "%d" print ;	|::d.pushDec 0
:hex    @+ "$%h" print ;	|::d.pushHex 1
:bin    @+ "%%%b" print ;	|::d.pushBin 2
:fix    @+ "%f" print ;	|::d.pushFix 3
:str    @+ "%d" print ;	|::d.pushStr 4
:var	@+ "%d" print ;	|::d.pushVar  5
:dvar	@+ "%d" print ;	|::d.pushDVar 6
:dcod	@+ "%d" print ;	|::d.pushDCod 7
:cnum	@+ "%d" print ;	|::d.pushCNum 8
:cstr	@+ "%d" print ;	|::d.pushCStr 9
:cdvar	@+ "%d" print ;	|::d.pushCDVar 10
:cdcod	@+ "%d" print ;	|::d.pushCDCod 11

#accpp 'dec 'hex 'bin 'fix 'str 'var 'dvar 'dcod 'cnum 'cstr 'cdvar  'cdcod

:printpilai | adr -- adr++
	@+ $f and 2 << 'accpp + @ exec ;

|------ imprime codigo
:nro>dicnr   8 >> 5 << 'indicepal + @ ;	| nombre de palabra

:coldefw drop ; |nro>dicnr ":%w" print ;
:coldefv drop ; |nro>dicnr "#%w" print ;
:colitd amarillo tok>cte "%d" print ;
:colitf amarillo tok>cte "%f" print ;
:colitb amarillo tok>cte "%%%b" print ;
:colith amarillo tok>cte "$%h" print ;
:colits	azul 34 emit tok>str printx 34 emit ;
:colwor	verde nro>dicnr "%w" print ;
:colvar	verde nro>dicnr "%w" print ;
:coldwo	cyan nro>dicnr "'%w" print ;
:coldva	cyan nro>dicnr "'%w" print ;

#codei 0 coldefw coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

:tokenprint | a -- a.
	@+ dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	blanco nro>macro print ;

:coldefws drop ":" ; |nro>dicnr ":%w" print ;
:coldefvs drop "#" ; |nro>dicnr "#%w" print ;
:colitds tok>cte "%d" ;
:colitfs tok>cte "%f" ;
:colitbs tok>cte "%%%b"  ;
:coliths tok>cte "$%h" ;
:colitss drop """""" ; |34 emit tok>str printx 34 emit ;
:colwors nro>dicnr "%w" ;
:colvars nro>dicnr "%w" ;
:coldwos nro>dicnr "'%w" ;
:coldvas nro>dicnr "'%w" ;

#codeis 0 coldefws coldefvs colitds coliths colitbs colitfs colitss colwors colvars coldwos coldvas

::tokenstr | a -- mem
	dup $ff and
	12 <? ( 2 << 'codeis + @ exec ; )
	nip nro>macro ;

:tokeninfolist | adr cnt --
	( 1? )( 1- swap | cnt adr
		<<ip =? ( blink 1? ( negro )( blanco ) drop ">" print )
		tokenprint
		<<ip 4+ =? ( blink 1? ( negro )( blanco ) drop "<" print )
		sp lout? 1? ( cr ) drop
		swap ) 2drop ;

:esvar | adr --
	dup @ "#%w " violeta print
	12 + @ @ "%d" amarillo print
	;

::printword | n --
	5 << 'indicepal +
	indicepal> >=? ( drop ; )
	dup 8 + @ 1 and? ( drop esvar ; ) drop
	dup @ ":%w " rojo print
	dup 4+ @
	swap 16 + @
	tokeninfolist ;

|---------------------------
::vcode
	'viewcode ( viewcode> <? )( @+ printword cr ) drop ;

::vdata
	'viewdata ( viewdata> <? )( @+ printword cr ) drop ;

::vm.dump
	cr
	"D)" print
	'dpila ( dpila> <? )( sp printpilai ) drop
	cr
	"R)" print
	'rpila ( rpila> <? )( sp printpilai ) drop
	;

::vm.dumpcode
	cr cr
	vdata
	vcode
	;

|-------------------------------
| Asigma memoria para ejecucion
|
:mem0 | nro --
	freemem !+ 'freemem ! ;
:mem1 | nro --
	freemem w!+ 'freemem ! ;
:mem2 | nro --
	freemem c!+ 'freemem ! ;
:mem3 | nro --
	'freemem +! ;

#gmem 'mem0

:gstr | adr --
	freemem
	( swap c@+ 1? )( rot c!+ ) rot
	c!+ 'freemem ! drop ;

:accpal | val instr --
	7 <? ( drop tok>cte gmem exec ; ) 	| nro
	7 =? ( drop tok>str	gstr ; )			| str
	12 <? ( drop 8 >>
			dup nro>var? 1? ( drop nro>mem )( drop nro>tok )
			mem0 ; )	| pal
	13 =? ( 2drop 'mem2 'gmem ! ; ) | (
	14 =? ( 2drop 'mem3 'gmem ! ; )	| )(
	16 =? ( 2drop 'mem1 'gmem ! ; ) | [
	2drop 'mem0 'gmem ! ;

|idec ihex ibin ifix istr	3 4 5 6 7
|iwor ivar idwor idvar      8 9 10 11
|i;							12
|i(	i)(	i) i[ i]			13 14 15 16 17

:addmem | inifree adr1token -- inifree adr1token
	dup @  | inicio tokens
	'mem0 'gmem !
	( @+ 1? )(
		dup $ff and
		3 <? ( 3drop ; ) | # o :
		17 >? ( 3drop ; ) | o > ]
		accpal
       )
	2drop
	;

|--- reserva memoria para dicc de memoria y memoria de vars
| 1do recorre variables,
|     asigna direccion real y valor en direccion

:c/var | nropal cntll -- nropal
	drop
	dup 5 << 'indicepal +	| nro dirw
	freemem over 4+ 		| nro dirw free tok
	addmem
	freemem pick2 =? ( 4 'freemem +! ) drop | si es variable sin nros
	8 + ! drop
	;

:verc/var | nropal cntll -- nropal
	drop
|	indicepal< 'indicepal - 5 >>
	newwords <? ( ; )
	dup +data
	;

::startvm | --
	here dup 'memvar ! 'freemem !
    'c/var varmap
::resetvm | --
	0 'irqkey !  | interrupciones
	'inter 'inter> !
	d.ini	| inicia pilad
	r.ini	| inicia pilar
	<<boot '<<ip !
	codereset
	cntw ind2nro +code
	datareset
	'verc/var varmap | 'vector --
	;

