| pilas virtuales (datos y retorno)
| para compilador
| PHREDA 2012
|------------------------------------
^r4/system/r4token.txt
^r4/lib/trace.txt

|-------- Registros del CPU
#:registros 0    | uso de registros

#inivpcnt		| nivel de inicio de pila D
#inivrcnt		| nivel de inicio de pila R

|------ Celda de la pila
| T Tipo (NUMERO CONSTANTE 'STRING CODIGO DATO REGISTRO COPIA)
| M Indireccion de memoria
| ...MTTTT
|-------- tipos de celdas
#celln 0
#cellt )( 1024	| tipo
#cellv )( 1024	| valor
#cella )( 1024  | suma
#cells )( 1024  | shift
#celli )( 1024 	| info de celda

|------ bloques de codigo
#blockn 0
#block )( 1024	| tipo+info
#blocks )( 1024 | celda comienzo
#blocke )( 1024 | celda fin
#blocki )( 1024 | info de las celdas en bloque

|----- pila para bloques
#pilab )( 256	#pilab> 'pilab

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

#... )( 1020 |... dpila soobreescribe ********!!!!!!!!!!!
|--- PILA DATO
#dpila )( 1024
#dpila> 'dpila

|--- PILA RETORNO
#rpila )( 1024
#rpila> 'rpila

#sysregs "eax" "ebx" "ecx" "edx" "edi" "esi" "ebp"
"XMM0" "XMM1" "XMM2" "XMM3" "XMM4" "XMM5" "XMM6" "XMM7"
#sysregw "ax" "bx" "cx" "dx" "di" "si" "bp"
"*" "*" "*" "*" "*" "*" "*" "*"
#sysregb "al" "bl" "cl" "dl" "*" "*" "*"
"*" "*" "*" "*" "*" "*" "*" "*"
#sysregsc  15

|-------- constantes del sistema
#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB"
"SYSPAPER" "SYSXYM" "SYSBM" "SYSKEY" | []

:emptyreg
	%1100001 | eax y esi,ebp siempre ocupados
	'registros ! ;

::reg! | nro --
	1 swap << registros or 'registros ! ;

::reg!! | nro --
	1 swap << not registros and 'registros ! ;

|:reg? | nro -- 1/0
|	registros 1 rot << and ;

::newReg | -- reg | busca un registro libre
	0 registros
	( 1? )( 1 nand? ( drop ; ) | libre?
		2/ $7fffffff and
		swap 1+ swap )
	drop ;

::cellNRO? | nro -- 1/0
	2 << 'cellt + @ $1f and
	0? ( 1 )( 0 ) nip ;

::cell0? | nro -- 1/0 (1 si es 0 literal)
	2 << dup 'cellt + @ $1f and
	1? ( 2drop 0 ; ) drop
	'cellv + @ 1? ( drop 0 ; ) drop
	1 ;

::cellREG? | nro -- nroreg
	2 << dup 'cellt + @ $1f and
	5 <>? ( 2drop -1 ; ) drop
	'cellv + @ ;

::cellREGM?
	2 << dup 'cellt + @ $f and
	5 <>? ( 2drop -1 ; ) drop
	'cellv + @ ;

::cellSUM | nro -- sum
	2 << 'cella + @ ;

::cellCPY? | nro -- 0/1
	2 << 'cellt + @ $f and
	6 =? ( drop 1 ; )
	drop 0 ;

::cellCPYTO | nro -- cnro
    2 << 'cellv + @ ;

::resCPY | cell -- cell
	( dup cellCPY? 1? )( drop cellCPYTO ) drop ;

::cellADR? | nro -- 0/1
|	resCPY
	2 << 'cellt + @ $10 and ;

::cellFREE | nro --
	cellREG? -? ( drop ; ) reg!! ;


::cellMEM! | nro --
	2 << 'cellt + dup @ $10 or swap ! ;

::cellNEED? | nro -- 0/1
	2 << 'celli + @
	dup 24 >> $ff and 1 >? ( 2drop 1 ; ) | tiene + de una lectura
	drop 16 >> $ff and 0 >? ( drop 1 ; ) | tiene escritura
	drop 0 ;

::cellCLON? | nro -- 0/1
	2 << 'celli + @ $10 and ;

::cellCLONTO | nro -- nro
	2 << 'celli + @ 8 >> $ff and ;

::cellST? | cell -- 0/1
	2 << 'celli + @ $1 and ;

:newcell | valor tipo -- nro
	celln 2 << 'cellt +
	!+
	1020 + !+
	0 swap 1020 + !+ | suma
	0 swap 1020 + ! | shift
	celln
	1 'celln +!
	;

:cellneedM | nro -- nro
	dup 2 <<
	dup 'cellt + @ $10 nand? ( 2drop ; ) | si no es [] seguir
	drop
|	d.tos needReg
|	"lea " ,s ,TOS "," ,s
	;

::cell+ | add nro --
	| si hay mem resolver
	2 << 'cella + +! ;

::cell+! | add nro --
	| si hay mem resolver
	2 << 'cella + ! ;

::cell>> | shi nro --
	| si hay mem resolver
	2 << 'cells + ! ;

::cell! | valor tipo nro --
	2 <<
	'cellt + !+
	1020 + !+
	0 swap 1020 + !+ | suma
	0 swap 1020 + ! | shift
	;

::cell2cell! | origen destino --
	2 << 'cellt +
	swap 2 << 'cellt +
	@+ rot !+
	swap 1020 + @+ rot 1020 + !+
	swap 1020 + @+ rot 1020 + !+
	swap 1020 + @ swap 1020 + ! ;

|---- imprime celda
:list2str swap ( 1? )( 1- swap >>0 swap ) drop ;

:value	over 1024 + @ ;
:suma	over 2048 + @ ;
:shift	over 3072 + @ ;

:mt0 value "$%h" ,print ;			|--	0 nro 	33
:mt1 value 'syscons list2str ,s ;	|--	1 cte	XRES
:mt2 value "s%h" ,print ;			|--	2 str   "hola"
:mt3 value "w%h" ,print ;			|--	3 cod  'func
:mt4 value "w%h" ,print ;			|--	4 dat  'var
:mt5 value 'sysregs list2str ,s ;	|-- 8 reg 	eax
#tiposrm mt0 mt1 mt2 mt3 mt4 mt5 0 0 0

:mt5b value 'sysregb list2str ,s ;
#tiposrmb mt0 mt1 mt2 mt3 mt4 mt5b 0 0 0

:mt5w value 'sysregw list2str ,s ;
#tiposrmw mt0 mt1 mt2 mt3 mt4 mt5w 0 0 0

:cellCOPYN | nro -- adr t T
	( 2 << 'cellt + dup @
		dup $f and
		6 =? )( drop value nip nip ) ;

::,REG | nro --
	'sysregs list2str ,s ;

::,cell | nro --
	cellCOPYN
	swap $10 and? ( "dword [" ,s )
	swap 2 << 'tiposrm + @  exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

::,cellb | nro --
	cellCOPYN
	swap $10 and? ( "byte [" ,s )
	swap 2 << 'tiposrmb + @ exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

::,cellw | nro --
	cellCOPYN
	swap $10 and? ( "word [" ,s )
	swap 2 << 'tiposrmw + @ exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

|------------------------BLOQUES
::block.new blockn pilab> !+ 'pilab> ! 1 'blockn +! ;
::block.end -4 'pilab> +! ;
::block.now pilab> 	4 - @ ; | -- nblo
::block.in? pilab> 'pilab - ;
::blockt block.now 2 << 'block + @ $f and ;
::blockin block.now 2 << 'blocki + @ ;

:blockT!	block.now 2 << 'block + ! ;
:blIF       0 blockT! ;
:blELSE  	1 blockT! ;
:blWHILE	2 blockT! ;
:blUNTIL  	3 blockT! ;
:blREPEAT  	4 blockT! ;

:blINI	celln block.now 2 << 'blocks + ! ;
:blEND	celln block.now 2 << 'blocke + ! ;

:>pilac pilac> !+ 'pilac> ! ;
:<pilac -4 'pilac> +! pilac> @ ;

:,dumppilac
	blockn "b:" ,s ,d ,cr
	pilac> 'pilac - "c:" ,s ,d ,cr

	;

|----- dpila
::d.nro 	2 << 'dpila + @ ;
::d.rel		1+ 2 << dpila> swap - @ ;
::d.cnt		dpila> 'dpila - 2 >> ;
::d.pop		-4 'dpila> +! dpila> @ ;
::d.push 	dpila> !+ 'dpila> ! ;
::d.TOS		dpila> 4 - @ ;
::d.NOS 	dpila> 8 - @ ;
::d.PK2 	dpila> 12 - @ ;
::d.PK3 	dpila> 16 - @ ;
::d.PK4 	dpila> 20 - @ ;
::d.PK5 	dpila> 24 - @ ;

|-- borrar de usados solo si no hya otra copia!
:esreg | nro adr n -- nro adr
	2 << dup 'cellt + @ $1f and 5 <>? ( 2drop ; ) drop | es tipo registro?
	'cellv + @ pick2 <>? ( drop ; )	| es registro igual?
	drop nip -1 swap ; | transforma en -1 si esta en otra celda de pila

::d.drop
	d.pop
	cellREG? -? ( drop ; )
	'dpila ( dpila> <? )( @+ esreg ) drop
	'rpila ( rpila> <? )( @+ esreg ) drop
	-? ( drop ; )
	reg!! ;

::d.swap	dpila> 8 - >r r@+ r@+ r> 8 - !+ ! ;
::d.rot		dpila> 12 - >r r@+ r@+ r@+ swap r> 12 - !+ !+ ! ;
::d.2swap	dpila> 16 - >r r@+ r@+ swap r@+ r@+ swap r> 32 - !+ !+ !+ ! ;

::pushNRO	0 newcell d.push ;
::pushCTE	1 newcell d.push ;
::pushSTR	2 newcell d.push ;
::pushCOD	3 newcell d.push ;
::pushDAT	4 newcell d.push ;
::pushVAR	4 $10 or newcell d.push ;
::pushREG	5 newcell d.push ;
::pushCPY 	6 newcell d.push ;

::d.dup		d.TOS pushCPY ;
::d.over	d.NOS pushCPY ;
::d.pick2	d.PK2 pushCPY ; |PICK2  abc -- abca
::d.pick3	d.PK3 pushCPY ; |PICK3  abcd -- abcda
::d.pick4	d.PK4 pushCPY ; |PICK4  abcde -- abcdea
::d.2dup	d.over d.over ;	|2DUP   ab -- abab
::d.2over	d.pick3 d.pick3 ; |2OVER  abcd -- abcdab
::d.nip		d.swap d.drop ;
::d.4DROP	d.drop
::d.3DROP	d.drop
::d.2DROP	d.drop d.drop ;

::r.cnt		rpila> 'rpila - 2 >> ;
::r.pop		-4 'rpila> +! rpila> @ ;
::r.push	rpila> !+ 'rpila> ! ;
::r.tos		rpila> 4 - @ ;
::r.drop	r.pop d.push d.drop ;

:r.rel		1+ 2 << rpila> swap - @ ;
:r.ini 		'rpila 'rpila> ! ;

:estareg | val reg dir cell -- val reg dir
	cellREG? pick2 <>? ( drop ; ) drop
	rot drop
	dup 4 - @
	rot rot ;

::REGcell | reg -- cell
	-1 swap
	'dpila ( dpila> <? )( @+ estareg ) drop
	'rpila ( rpila> <? )( @+ estareg ) drop
	drop ;

|----
:freelreg | adr cell reg --
	"mov " ,s
	pick2 'dpila - 1+ inivpcnt 2 << swap -
	"[esi" ,s +? ( "+" ,s ) 2 << ,d "],"  ,s dup ,REG ,cr
	reg!!
	5 $15 pick2 cell!
	swap 'dpila - 1+ inivpcnt 2 << swap -
	2 << swap cell+!
	;

::freelastreg | --
	'dpila ( dpila> <? )(
		@+ dup
		cellREG? 0 >=? ( freelreg ; )
		2drop ) drop ;

|--- pila de estado de pila y registros para bloques
#vpst )( 1024
#vpst> 'vpst
#vpmem )( $3fff
#vpmem> 'vpmem

:,vp vpmem> !+ 'vpmem> ! ;
:vp@ vpmem> @+ swap 'vpmem> ! ;

:,cpcell | nro --
	2 <<
	dup 'cellt + @ ,vp
	dup 'cellv + @ ,vp
	dup 'cella + @ ,vp
	'cells + @ ,vp
	;

:cpcell@ | nro --
	2 <<
	vp@ over 'cellt + !
	vp@ over 'cellv + !
	vp@ over 'cella + !
	vp@ swap 'cells + !
	;

::vpPush | --
	vpmem> vpst> !+ 'vpst> !
	dpila> 'dpila - 2 >>
	,vp
	'dpila ( dpila> <? )(
		@+ dup ,vp ,cpcell
		) drop
	rpila> 'rpila - 2 >>
	,vp
	'rpila ( rpila> <? )(
		@+ dup ,vp ,cpcell
		) drop
	registros ,vp
	inivpcnt ,vp
	inivrcnt ,vp
	;

::vpPop | --
	-4 'vpst> +!
	vpst> @ 'vpmem> !
	'dpila 'dpila> !
	vp@
	( 1? )( 1-
		vp@ dup d.push cpcell@
		) drop
	'rpila 'rpila> !
	vp@
	( 1? )( 1-
		vp@ dup r.push cpcell@
		) drop
	vp@ 'registros !
	vp@ 'inivpcnt !
	vp@ 'inivrcnt !
	;

::vpDrop | --
	-4 'vpst> +!
	vpst> @ 'vpmem> ! ;

::vpMapD | 'x --  ; npila adr nrocell x
	vpst> 4 - @ | pila objetivo
	@+ ( 1? )( 1-
		swap @+ pick3 exec
		4 2 << + swap ) 3drop
	;

:vpConvert | cell
	;

::vpGenerate | tengo una pila y genero la equivalente en vp
	vpst> 4 - @ | pila objetivo
	@+ ( 1? )( 1-
		swap @+ pick3 exec
		4 2 << + swap ) 3drop
	;

|------------------------------------------
| inicia vpila como normal con USADO celdas
| de forma normal, guarda nivel en INIVPCNT
| [esi+4] [esi] eax -- para usado=3
|------------------------------------------
:inivstack
	0 'celln !
	0 'blockn !
	'dpila 'dpila> !
	'rpila 'rpila> !
	'pilac 'pilac> !
	'pilab 'pilab> !
	'vpmem 'vpmem> !
	'vpst 'vpst> !
	;

::inivpila  | usado --
|	dup "; u:%d" ,print ,cr
	0? ( 1 nip )
	dup 'inivpcnt !
	0 'inivrcnt !
	inivstack
	0? ( drop emptyreg ; )
	1- ( 1? )( 1-
		5 $15 newcell
		over 2 << over cell+
		d.push | [esi+..|
		) drop
	0 5 newcell d.push | eax
	emptyreg ;


|-------------------------------------------
| DEBUG: imprime pila virtual
|-------------------------------------------
:,cellinfo
	dup 2 << 'cellt + @ $f and 6 =? ( "." ,s ) drop
	cellCOPYN
	swap $10 and? ( "[" ,s )
	swap 2 << 'tiposrm + @  exec
	shift 1? ( "*" ,s dup ,d ) drop
	suma 1? ( +? ( "+" ,s ) dup ,d ) drop
	$10 and? ( "]" ,s )
	2drop ;

::printddvtack
	dpila> 'dpila - -? ( "(-)" ,s ) drop
	registros ,b ":" ,s
	'dpila ( dpila> <? )( @+ ,cellinfo ,sp ) drop
	'rpila
	rpila> <>? ( " :R " ,s )
	( rpila> <? )( @+ ,cellinfo ,sp ) drop
	,cr ;

::dumpcells, | -- ; imprime info celdas
|	"Nro:Read:Write:T" ,print ,cr
	0 ( celln <? )(
		dup "; %h:" ,print
		dup 2 << 'celli + @
		dup 24 >> $ff and "%d:" ,print
		dup 16 >> $ff and "%d:" ,print
		dup 8 >> $ff and "%d:" ,print
		$ff and  "%h" ,print ,cr
		1+ ) drop
	;

::dumpblock, | n --
	2 <<
	dup 'block + @ "BL %d (" ,print
	dup 'blocks + @ "%h-" ,print
	dup 'blocke + @ "%h)" ,print
	'blocki + @ "%h" ,print
	,cr
	;

|-------------------------------------------
| calcula informacion de celdas
| RRRRRRRRWWWWWWWWcccccccc...CXBMS
| R cnt de lecturas
| W cnt de escrituras
| c celda clon nro
| flags........
| C clon
| X direccion de codigo
| B usa byte / Word
| M usa memoria
| S es stack puro
|-------------------------------------------
:cellW1	| celda+1W
	d.TOS 2 << 'celli + dup
	@ dup $ff00ffff and swap
	$10000 + $ff0000 and or
	swap ! ;

:cellR1 | celda+1R
	d.TOS 2 << 'celli + dup
	@ dup $ffffff and swap
	$1000000 + $ff000000 and or
	swap ! ;


:cellMem | celda que es direccion de memoria
	d.tos 2 << 'celli + dup
	@ $2 or swap ! ;

:cellBW | usa byte o word (necesita parte de 8 o 16bits)
	d.tos 2 << 'celli + dup
	@ $4 or swap ! ;

:cellEx | celda es direccion de codigo
	d.tos 2 << 'celli + dup
	@ $8 or swap ! ;

| clone es igual a otra celda (para bloques)

:cellClon | original clon --
	2 << 'celli + dup @
	$10 or
	rot $ff and 8 << or
	swap ! ;

:toknow	dup 4 - @ ;
:valnow	dup 4 - @ 8 >> ;


|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:es(
	block.new
	vpPush
	blINI
|	"A" ,s "r4asm/cod.asm" savemem
	salto? 1? ( 1 )( 2 )
|	"B" ,s dup ,d ,dumppilac "r4asm/cod.asm" savemem
	>pilac drop
|	,dumppilac "C" ,s "r4asm/cod.asm" savemem
	;

:es)(
	salto? 0? ( | ELSE
		vpPop
		<pilac drop 4 >pilac
	)( | WHILE
		vpDrop
		<pilac drop 3 >pilac
		) drop
	vpPush ;

|----------------------------------------
| busca y marca celdas que deben estar en pila

:cellST | cell -- celda es stack
	2 << 'celli + dup
	@ $1 or swap ! ;

:prevcond
	over 8 - dup @ $ff and
	19 <? ( 2drop ; ) 30 >? ( 2drop ; ) | es condicional?
	$100 or swap !  | marca condicional
	;

:blConsume | bloa cntpilad --
	2drop
	1 block.now 2 << 'blocki + !
	d.cnt 0? ( drop ; )
	1- ( 1? )( 1- dup d.rel cellST ) drop
	;

:blProduce | bloa cntpilad --
	2drop
	2 block.now 2 << 'blocki + !
	d.cnt 0? ( drop ; )
	1- ( 1? )( 1- dup d.rel cellST ) drop
	;

:blSTACK
	vpst> 4 - @
	@+ | cntdpila
	d.cnt <? ( blConsume ; )
	d.cnt >? ( blProduce ; )
	2drop ;

|----------------------------------------
| marca celdas que son clones de otras
:cadacell | npila adr nrocell -- npila adr
	pick2 d.rel | original clon
|	2dup "clone %d %d" ,print ,cr
	cellClon ;

:blCLONE
	'cadacell vpMapD ;

:es)
	salto? 1? ( <pilac drop
		blUNTIL blSTACK prevcond
		)( <pilac
		1 =? ( blIF blCLONE )
		2 =? ( blREPEAT blSTACK )
		3 =? ( blWHILE blSTACK 	)
		4 =? ( blELSE blCLONE
			pick2 8 - @ $ff and | ;)
			12 <>? ( vpdrop vppush )
			drop
			)
		drop ) drop
	blEND vpPop
	block.end ;

|---	 anonimas
:es[ :es] :es;	;

#lastdircode

:litN	toknow tok>cte pushNRO ;
:litS
	valnow cte + strusestack ( 1? )( 1- cellR1 d.tos cellST d.drop ) 2drop | correccion por "%d"
	0 pushSTR ;
:litAW	valnow dup 'lastdircode ! pushCOD ;
:litAV	valnow dup 'lastdircode ! pushDAT ;
:litV	valnow dup 'lastdircode ! pushVAR ;

:callW	| ww
	valnow nro>mov @
	dup 24 << 24 >> |duso
	dup ( 1? )( 1+ cellR1 d.drop ) drop
	swap 8 << 24 >> - abs
	( 1? )( 1- 0 pushREG ) drop ;

:exexec 	| exec
	cellEx
    cellR1 d.drop
	lastdircode nro>mov @
	dup 24 << 24 >> |duso
	dup ( 1? )( 1+ cellR1 d.drop ) drop
	swap 8 << 24 >> - abs
	( 1? )( 1- 0 pushREG ) drop ;

:c0 | 0? 1? ..
	cellR1 ;
:c1 | =? <? ..
	cellR1 d.drop cellR1 ;

:op1a1	cellW1 ; | neg not 1+ 4+ 1- 2/ ..
:vop1a1 cellW1 ; | abs  clz  ..
:op2a1	cellR1 d.drop cellW1 ; | + - * and or xor ..
:vop2a1 cellR1 d.drop cellW1 ; | / mod
:xop2a1	cellR1 d.drop cellW1 ; | << >>
:op3a1	cellR1 d.drop cellR1 d.drop cellW1 ; | */
:vop3a1	cellR1 d.drop cellR1 d.drop cellW1 ; | *>> /<<

:op2a2	cellW1 d.swap cellW1 ; | mod/

:1@	| @ c@ w@
	cellMem cellW1 ;
:1!	| ! c! w!
	cellMem cellR1 d.drop cellR1 d.drop ;
:2@	| @+ c@+ w@+
	cellMem cellW1 d.tos pushREG  ;
:2!	| !+ c!+ w!+
	d.swap cellR1 d.swap cellMem cellW1 d.nip ;
:2+! | +! c+! w+!
	cellMem cellR1 d.drop cellR1 d.drop ;

:vuso3	cellR1 d.drop
:vuso2	cellR1 d.drop
:vuso1	cellR1 d.drop ;
:vuso11	cellR1 ;
:vuso21	cellR1 d.drop cellR1 ;
:v1cte	0 pushCTE ;
:v3v	0 pushREG
:v2v	0 pushREG
:v1v	0 pushREG ;
:v>R	d.pop r.push ;
:vR>    r.pop d.push ;
:vR		r.tos d.push ;
:vr+	r.tos d.push cellW1 d.2drop ; |R+    a -- R: b -- c
:vr@+	r.tos d.push cellW1 cellMem d.drop d.tos pushREG ; |R@+    -- a R: b -- c
:vr!+	r.tos d.push cellW1 cellMem d.drop cellR1 d.drop ; |R!+   a -- R: b -- c

#usocelda
0
0
0	|0 1 :,,defc 2 :,,defv
litN
litN
litN
litN	|3 :,,litd | --	n numero decimal
litS	|7 :,,lits | --	s string
callW	|8 :,,word 	| ..--..  word <---- debe ser calculado
litV	|9 :,,var 	| -- v var
litAW	|10:,,dword | -- dw dir word
litAV	|11:,,dvar 	| -- dv dir var
es;		|; | fin de palabra (12)
es(
es)(
es)
es[
es]
exexec	|EXEC  x/0 --    TOS es dcod (18)
c0
c0
c0
c0					|0? a -- a  (19-22)
c1
c1
c1
c1
c1
c1
c1
c1		|=?  ab -- a (23-30)
d.dup
d.drop
d.over
d.pick2
d.pick3
d.pick4
d.swap
d.nip | ( 31--38)
d.rot
d.2dup
d.2drop
d.3drop
d.4drop
d.2over
d.2swap     | ( 39--45)
v>R		|>R    a -- R: -- a	(46)
vR>		|R>    -- a R: a -- (47)
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
r.drop	|RDROP	R: a -- (52)
op2a1	|53 AND	ab -- c
op2a1	|OR    ab -- c
op2a1	|XOR   ab -- c
op1a1	|NOT    a -- b
op2a1	|+		ab -- c
op2a1	|-     ab -- c
op2a1	|*     ab -- c
vop2a1	|/     ab -- c		usa eax,edx
op3a1	|*/    abc -- d     usa eax,edx
vop3a1	|*>>   abc -- d     usa eax,edx, ecx
op2a2	|/MOD   ab -- cd    usa eax,edx
vop2a1	|MOD    ab -- c     usa eax,edx
vop1a1	|ABS    a -- b      usa eax,edx
op1a1	|SQRT	a -- b
vop1a1	|CLZ	a -- b     usa eax,edx
vop3a1	|<</	abc -- d   usa eax,edx, ecx
op1a1	|NEG    a -- b
op1a1	|1+     a -- b
op1a1	|4+     a -- b
op1a1	|1-     a -- b
op1a1	|2/     a -- b
op1a1	|2*     a -- b
xop2a1	|<<    ab -- c     usa ecx
xop2a1	|76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat
vuso3	|MOVE  abc --       a,b es ddat
vuso3	|MOVE> abc --		a,b es ddat
vuso3	|CMOVE abc --		a,b es ddat
vuso3	|CMOVE> abc --		a,b es ddat
v1cte	|MEM	-- a		a es ddat
vuso1	|DIR    a --
vuso11	|FILE   a -- b
vuso11	|FSIZE  a -- b
vuso11	|VOL    a -- b
vuso21	|LOAD   ab -- c
vuso3	|SAVE   abc --
vuso3	|APPEND   abc --
vuso11	|UPDATE  a -- a
v2v		|XYMOUSE -- ab
v1v		|BMOUSE  -- a
vuso1	|IKEY!  a --
v1v		|KEY     -- a
v1v		|CNTJOY  -- a
v1v		|GETJOY  -- a
v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vuso1	|RUN    a --
v1cte	|SW      -- a
v1cte	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
vuso2	|SETXY  ab --
vuso1	|PX+!   a --
vuso1	|PX!+   a --
v1v	|PX@     -- a
v1cte	|XFB     -- a
0	|>XFB    --
0	|XFB>    --
vuso1	|PAPER  a --
vuso1	|INK    a --
v1v		|INK@    -- a
vuso1	|ALPHA  a --
vuso2	|OP     ab --
vuso2	|CP     ab --
vuso2	|LINE   ab --
vuso2	|CURVE  ab --
vuso2	|PLINE  ab --
vuso2	|PCURVE ab --
0		|POLI    --
vuso2	|FCOL   ab --
vuso2	|FCEN   ab --
vuso2	|FMAT   ab --
0 0 0	|SFILL LFILL RFILL  --
vuso1	|TFILL  a --
vuso11	|SLOAD   a -- a
vuso1	|SPLAY  a --
vuso11	|MLOAD   a -- a
vuso1	|MPLAY  a --
|---- falta
0	|OPENURL
0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM

:iniregi
	'celli 256 ( 0 rot !+ swap 1- 0? ) 2drop
	'block 256 4 * ( 0 rot !+ swap 1- 0? ) 2drop ;

:,dumpstate
	printddvtack
	;

::calccell | fin buff use
	iniregi
	inivpila
	( over <? )(
		@+ $ff and
|**** debug
|		,dumpstate
|		dup ,d ,sp "r4asm/cod.asm" savemem
|**** debug
		2 << 'usocelda + @ exec | adri+ adr+
		) 2drop ;

|------------------------------------------
| restaura la pila a su forma normal
|
|------------------------------------------
:cellESI | cell deltasi --
	over cellREGM? 5 <>? ( 3drop ; ) drop | si es ESI
	neg 2 << swap Cell+ ;

:correESI | deltaesi --
	0? ( drop ; )
	"lea esi,[esi" ,s dup +? ( "+" ,s ) 2 << ,d "]" ,ln
	'dpila ( dpila> <? )(
		@+ pick2 cellESI
		) drop
	'rpila ( rpila> <? )(
		@+ pick2 cellESI
		) drop
	drop ;


:resolveADRMMX
	"movd " ,s dup ,REG "," ,s pick2 ,CELL ,cr
	5 pick3 cell! ;

:resolveADR | nro xx cell yy -- nro xx cell yy
	newReg | nro xx cell yy reg
	6 >? ( resolveADRMMX ; )
	pick2 cell0? 0? ( drop
		"mov " ,s dup ,REG "," ,s pick2 ,CELL ,cr
		)( drop
		"xor " ,s dup ,REG "," ,s dup ,REG ,cr
		)
|	"mov " ,s dup ,REG "," ,s pick2 ,CELL ,cr
	|dup reg!
	5 pick3 cell!
	;

:genRSTMMX
	"movd dword [esi" ,s
	pick2 1? ( +? ( "+" ,s ) 2 << ,d )( drop )
	"]," ,s dup ,CELL ,cr
	5 $15 pick2 cell!
	pick2 2 << swap cell+! ;

:genRST | nro XX cell -- nro XX
	dup cellREGM? 5 =? (
		drop dup cellSUM
		pick3 2 << =? ( 2drop ; ) | si esta en el lugar no generar
		) drop
	dup cellADR? 1? ( resolveADR ) drop
	dup cellREG? 6 >? ( drop genRSTMMX ; ) drop
	"mov dword [esi" ,s
	pick2 1? ( +? ( "+" ,s ) 2 << ,d )( drop )
	"]," ,s dup ,CELL ,cr
|	dup cellFREE
	5 $15 pick2 cell!
	pick2 2 << swap cell+!
	;

:genEAX | cell --
	dup cellREG? 0? ( 2drop ; ) drop
|	"mov eax," ,s dup ,CELL ,cr
	dup cell0? 0? ( drop
		"mov eax," ,s dup ,CELL ,cr
		)( drop
		"xor eax,eax" ,s ,cr
		)
	0 5 rot cell!
	;

:inuseMMX
	"movd " ,s dup ,REG ",dword [esi" ,s
	dup reg! 5 rot cell!
	pick2 1? ( +? ( "+" ,s ) 2 << ,d )( drop )
	"]" ,s ,cr
	;

:inuse | ao no nro adr cell -- nro adr
	dup cellREGM? 5 <>? ( 2drop ; ) drop
	dup cellSUM pick4 2 <<
	<>? ( 2drop ; ) drop
	newReg
	6 >? ( inuseMMX ; )
	"mov " ,s dup ,REG ",dword [esi" ,s
	dup reg! 5 rot cell!
	pick2 1? ( +? ( "+" ,s ) 2 << ,d )( drop )
	"]" ,s ,cr
	;

:isused | adr nro -- adr  nro
	over 4+ over 1+
	( 1? )( 1-
		swap @+ inuse
		swap ) 2drop ;

:vplast
	inivpcnt 0? ( drop ; ) drop
	"mov eax,dword [esi-4]" ,s ,cr
	0 5 d.tos cell!
	;

:vpcopia
	'dpila d.cnt 0? ( 2drop vplast ; )
	1- ( 1? )( 1-
		isused
		swap @+ genRST
		swap ) drop
	@ genEAX
	;

|---- quita referencias de copia
:quitacp
	dup cellCPY? 0? ( 2drop ; ) drop
	dup resCPY | copia origen
	swap cell2cell!
	;

:vpquitacp
	'dpila ( dpila> <? )(
		@+ quitacp ) drop ;

|---- back & restore de pila R
:pilarback
	dup ( 1? )( 1+ 	) drop
	r.ini
	;

:pilarmove | cntr -- cntr
	-? ( pilarback ; )
	dup ( 1? )( 1-
		dup r.rel
		"push " ,s ,cell ,cr
|		"%d " mprint ,s ,cr
		) drop
	;

|---- transforma la pila actual a normal
::vpila2normal | --
|	r.cnt 1? ( pilarmove ) 'inivrcnt !

	inivpcnt d.cnt - | actual-origen
|	dup "; **** %d NORMAL :" ,print printddvtack

	vpquitacp | quita copia
	correESI
	vpcopia
	d.cnt 'inivpcnt ! | ahora vpila tiene...
	emptyreg ;


|---- acomoda pila actual
:rearma
	d.cnt 0? ( drop ; )
	1- ( 1? )( 1-
		dup 1+ d.rel
		5 $15 pick2 cell!
		over 2 << swap cell+!
		)
	d.rel 0 5 rot cell!
	;

::vpila2call | nro --
	nro>mov @ 8 << 24 >>
 |	dup "; **** %d  DELTA" ,print printddvtack
	0? ( drop ; )
	dup correESI
	-? ( ( 1? )( 1+ d.drop ) )( ( 1? )( 1- d.dup ) )
	drop
	rearma
	d.cnt 'inivpcnt ! | ahora vpila tiene...
	emptyreg ;

::vpila2callV | nro --
	nro>mov @ 8 << 24 >>
|	dup "; **** %d  DELTA:" ,print printddvtack
	1? ( -? ( ( 1? )( 1+ d.drop ) )( ( 1? )( 1- d.dup ) ) )
	drop
	rearma
 	d.cnt 'inivpcnt ! | ahora vpila tiene...
	emptyreg ;

::vpila2v | cnt --
	1? ( -? ( ( 1? )( 1+ d.drop ) )( ( 1? )( 1- d.dup ) ) )
	drop
	rearma
 	d.cnt 'inivpcnt ! | ahora vpila tiene...
	emptyreg ;
