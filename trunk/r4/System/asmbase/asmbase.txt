| rutinas para compilar
| reemplazo para ASM
| PHREDA 2013
|------------------------

#BPP 4 #TOLERANCE 24 #VALUES $10 #QFULL $100 #MASK $f
|#BPP 2 #TOLERANCE 8 #VALUES $4 #QFULL $8 #MASK $3

#FBASE	8

#col1 $ffffff
#col2 0
#col

#tex
#mtx #mty
#ma #mb
#mex #mey

::ink 'col ! ;
::ink@ col ;

#px #py
#pxBPP #pyBPP

#ymax -1

|--------- segmentos
| ymin x delta1x ymax
|-----------------------
#segs )( $7fff
#segs> 'segs

#heapseg )( $1fff
#heapcnt 0

#activos )( 2048
#activos> 'activos

#runlenscan )( 2048

|----------- movimiento de memoria
::cmove | de sr cnt --
	( 1? )( 1- >r c@+ rot c!+ swap r> ) 3drop ;

::cmove> | de sr cnt --
	( 1? )( 1- 2dup + c@ pick3 pick2 + c! ) 3drop ;

::move | de sr cnt --
	( 1? )( 1- >r @+ rot !+ swap r> ) 3drop ;

::move> | des src cnt
	 2 << ( 1? )( 4 - 2dup + @ pick3 pick2 + ! ) 3drop ;

::sqrt | v -- r
	0? ( ; )
	0 $40000000 | op res one
	( pick2 >? )( 2 >> )
	( 1? )(
		2dup +
		pick3 <=? (
			>r rot r> - | res one op
			rot pick2 2* +	| one op res
			2/ rot 2 >>
			)( drop 2 >> swap 2/ swap )
		)
	drop nip ;

|---------- GRAFICOS ------------
:clamp0 | v -- v
	dup neg 31 >> and ;

:clampmax | v max -- v
	swap over - dup 31 >> and + ;

|----- mexcla de colores
:pxa | alpha --
	col
:acpx!+ | alpha col --
	dup $ff00ff and				| alpha color colorand
	px@ dup $ff00ff and 		| alpha color colorand inkc inkcand
	pick2 - pick4 * 8 >> rot +	| alpha color inkc inkcandl
	$ff00ff and >r				| alpha color inkc
	swap $ff00 and 				| alpha px colorand
	swap $ff00 and 				| alpha colorand pxa
	over - rot * 8 >> + $ff00 and
	r> or px!+  ;

:gr_mix | a b al -- c (DWORD col,BYTE alpha)
	>r
	dup $ff00ff and pick2 $ff00ff and over - r * 8 >> + $ff00ff and
    rot rot
    $ff00 and swap $ff00 and over - r> * 8 >> + $ff00 and
	or ;

:mixcolor | niv -- color
    1 <? ( col2 nip ; )
    254 >? ( col1 nip ; )
    col1 col2 rot gr_mix ;

:wvline | y x --
	-? ( drop 'py ! ; ) sw >=? ( drop 'py ! ; )
	py pick2 dup 'py !  	| y x py  y
	<? ( swap rot )		| y1 x y2
	-? ( 3drop ; ) sh 1- clampmax
	rot sh >=? ( 3drop ; ) clamp0 | x y2 y1
	swap over - swap rot swap setxy
	1+ ( 1? )( 1- col px!+ sw 1- px+! ) drop ;

:whline | x y --
	-? ( drop 'px ! ; ) sh >=? ( drop 'px ! ; )
	px pick2 dup 'px !  	| x y px x
	<? ( swap rot )		| x1 y x2
	-? ( 3drop ; ) sw clampmax
	rot sw >=? ( 3drop ; ) clamp0	| y x2 x1
	swap over - swap rot setxy
	1+ ( 1? )( 1- col px!+ ) drop ;

|------- clipline
:clip1 | y1 x1 y2 x2 c1 -- y1 x1 y2 x2 c1
|    8 <? ( 0 )( sh 2 - ) nip >r
    8 <? ( 0 )( sh 1- ) nip >r
	2swap | y2 x2 y1 x1
|		X1+=(V-Y1)*(X2-X1)/(Y2-Y1);Y1=V;
 	pick3 pick2 - r pick3 - pick4 pick3 - rot */ +
	nip r> swap
	-? ( $1 )( 0 ) >r sw >=? ( $2 r+ )
	2swap r> ;

:clip2 | y1 x1 y2 x2 c2 -- y1 x1 y2 x2 c2
|	8 <? ( 0 )( sh 2 - ) nip >r	| y1 x1 y2 x2
	8 <? ( 0 )( sh 1- ) nip >r	| y1 x1 y2 x2
| 		X2+=(V-Y2)*(X2-X1)/(Y2-Y1);Y2=V;
	over pick4 - over pick4 - r pick4 - swap rot */ +
	nip r> swap
	-? ( $1 )( 0 ) >r sw >=? ( $2 r+ )
	r> ;

:clip3 | y1 x1 y2 x2 c2 -- y1 x1 y2 x2 c2
	1 =? ( 0 )( sw 1- ) nip >r
	swap | y1 x1 x2 y2
|		Y2+=(V-X2)*(Y2-Y1)/(X2-X1);X2=V;C2=0;
	dup pick4 - pick2 pick4 - r pick4 - rot rot */ +
	nip r> 0 ;

:clip4 | y1 x1 y2 x2 c1 -- y1 x1 y2 x2 c1
	1 =? ( 0 )( sw 1- ) nip >r
	2swap swap 	| y2 x2 x1 y1
|		Y1+=(V-X1)*(Y2-Y1)/(X2-X1);X1=V;C1=0;
	pick3 over - pick3 pick3 - r pick4 - rot rot */ +
	nip r>
	2swap 0 ;

:clipline | x2 y2 x1 y1 -- y1 x1 y2 x2 in
	sh >=? ( $8 )( 0 ) >r -? ( $4 r+ )	| y1
	swap sw >=? ( $2 r+ ) -? ( $1 r+ )	| x1
	2swap | y1 x1 x2 y2
	sh >=? ( $8 )( 0 ) >r -? ( $4 r+ )	| y2
	swap sw >=? ( $2 r+ ) -? ( $1 r+ )	| x2
	r> r>	| y1 x1 y2 x2 c2 c1
	2dup and 1? ( drop or ; ) drop
	2dup or 0? ( drop or ; ) drop
	>r 12 and? ( clip2 ) r> swap >r 12 and? ( clip1 ) r>
	2dup and 1? ( drop or ; ) drop
	2dup or 0? ( drop or ; ) drop
	>r 1? ( clip4 ) r> swap >r 1? ( clip3 ) r> or ;

:nline21 | | sx dy dx
	16 << over / 		| sx dy ea
	0 rot 				| sx ea ec dy
	( 1? )( 1- >r
		over + $ffff0000 and? ( $ffff and pick2 px+! )
		sw px+!
		dup 8 >>
		dup pxa pick3 1- px+!
		$ff xor pxa pick2 neg 1- px+!
		r> )
	4drop ;

|*******************************
::LINE | x y --
	py =? ( whline ; )
	swap px =? ( wvline ; )	| y x
	py pick2 <? ( px 2swap 2dup )( px 2over ) 'px ! 'py !
	swap -? ( 4drop ; ) 			| y1 x1 x2 y2 ; termina en y neg..
	2swap swap sh >=? ( 4drop ; )	| x2 y2 x1 y1 ; termina en y>sh
	clipline 1? ( 4drop drop ; ) drop	| y1 x1 y2 x2
	pick2 - swap pick3 -		| y1 x1 dx dy
	0? ( 4drop ; ) |***
	2swap					| dx dy y1 x1
	swap setxy col px!+ -1 px+!	| dx dy
	swap -? ( neg -1 )( 1 )		| dy dx sx
	rot rot					| sx dy dx
	over <? ( nline21 ; )
	swap 16 << over / 		| sx dx ea
	0 rot 					| sx ea ec dx
	( 1? )( 1- >r	| sx ea ec
		over + $ffff0000 and? ( $ffff and sw px+! )
		pick2 px+!		| sx ea ec
		dup 8 >> 		| sx ea ec ci
		dup pxa sw 1- px+!
		$ff xor pxa sw 1+ neg px+!
		r> ) 4drop ;

|*******************************
::OP | xy --
	2dup BPP << 'pyBPP ! BPP << 'pxBPP !
	'py ! 'px ! ;

|*******************************
::CURVE | fx fy cx cy --
	pick3 pxBPP + pick2 2* - abs
	pick3 pyBPP + pick2 2* - abs  +
	4 <? ( 3drop LINE ; ) drop
	pick3 pick2 + 2/  pick3 pick2 + 2/		| fx fy cx cy c2 c2
	2swap 									| fx fy c2 c2 cx cy
	py + 2/ swap px + 2/ swap				| fx fy c2 c2 c1 c1
	pick3 pick2 + 2/  pick3 pick2 + 2/		| fx fy c2 c2 c1 c1 ex ey
	2swap
	CURVE CURVE ;

#x1 #y1 #x2 #y2 #bx #by

|*******************************
::CURVE3 | xf yf x2 y2 x1 y1
	pick3 pick2 + 2/ pick3 pick2 + 2/ 'by ! 'bx !
	'y1 ! 'x1 !
	pick3 pick2 + 2/ pick3 pick2 + 2/ 2swap
	'y2 ! 'x2 !
	over bx + 2/ over by + 2/
	over x2 - abs over y2 - abs + >r
	px x1 + 2/ py y1 + 2/
	over bx + 2/ over by + 2/
	over x1 - abs over y1 - abs + >r
	2swap >r >r
	pick3 pick2 + 2/ pick3 pick2 + 2/
	2swap r> r>
	r> 3 <? ( drop 4drop line )( drop CURVE3 )
	r> 3 <? ( drop 4drop line ; )
	drop CURVE3 ;


|-------------------------------------------------
| PINTADO DE POLIGONOS
|-------------------------------------------------
| pos(12) | len(11) | cover(9) |
:getpos 20 >> $fff and ;
:getlen 9 >> $7ff and ;
:getval $1ff and ;
:setpos 20 << ;
:setlen 9 << ;

|------------------- llenadores
:solidofill
	( 1? )( 1- col px!+ ) drop ;
:solidoalpha
	$ff xor
	swap ( 1? )( 1- over pxa ) 2drop ;

:runlenSolid
	'runlenscan
	( @+ 1? )(
		dup getlen swap getval
		QFULL =? ( drop solidofill )( 1? ( solidoalpha )( drop px+! ) )
		) 2drop
	-1 px+! ;

|----------------- degrade lineal
:Ldegfill
	( 1? )( 1-
		mex 8 >> mixcolor px!+
		ma 'mex +! ) drop ;
:Ldegalpha
	$ff xor swap
	( 1? )( 1-
		over mex 8 >> mixcolor acpx!+
		ma 'mex +! ) 2drop ;

:runlenLdeg
	mtx neg ma * over BPP >> mty - mb * - 'mex !
	'runlenscan
	( @+ 1? )(
		dup getlen swap getval
		QFULL =? ( drop Ldegfill )( 1? ( Ldegalpha )( drop dup px+! ma * 'mex +! ) )
		) 2drop
	-1 px+! ;


|----------------- degrade radial
:distf | dx dy -- dis
	abs swap abs over <? ( swap )
	dup 8 << over 3 << + over 4 << - swap 2* -
	over 7 << + over 5 << - over 3 << + swap 2* - ;

:Rdegfill
	( 1? )( 1-
	    mex mey distf 16 >> mixcolor px!+
	    ma 'mex +! mb 'mey +!
		) drop ;
:Rdegalpha
	$ff xor swap
	( 1? )( 1-
		over
	    mex mey distf 16 >> mixcolor acpx!+
	    ma 'mex +! mb 'mey +!
		) 2drop ;

:runlenRdeg
    mtx neg ma * over BPP >> mty - mb * - 'mex !
    mtx neg mb * over BPP >> mty - ma * + 'mey !
	'runlenscan
	( @+ 1? )(
		dup getlen swap getval
		QFULL =? ( drop Rdegfill )( 1? ( Rdegalpha )( drop dup px+! dup ma * 'mex +! mb * 'mey +!  ) )
		) 2drop
	-1 px+! ;

|------------------ textura
:Texfill
	( 1? )( 1-
	    mex 8 >> $ff and mey $ff00 and or 2 << tex + @ px!+
	    ma 'mex +! mb 'mey +!
		) drop ;
:Texalpha
	$ff xor swap
	( 1? )( 1- over
	    mex 8 >> $ff and mey $ff00 and or 2 << tex + @ acpx!+
	    ma 'mex +! mb 'mey +!
		) 2drop ;

:runlenTex
    mtx neg ma * over BPP >> mty - mb * - 'mex !
    mtx neg mb * over BPP >> mty - ma * + 'mey !
	'runlenscan
	( @+ 1? )(
		dup getlen swap getval
		QFULL =? ( drop Texfill )( 1? ( Texalpha )( drop dup px+! dup ma * 'mex +! mb * 'mey +! ) )
		) 2drop
	-1 px+! ;

|--------------------
#runlencover 'runlenSolid

|*******************************
::FMAT 'mb ! 'ma ! ;
::FCEN 'mty ! 'mtx ! ;
::FCOL 'col2 ! 'col1 ! ;

::SFILL	'runlenSolid 'runlencover ! ;
::RFILL	'runlenRdeg 'runlencover ! ;
::LFILL	'runlenLdeg 'runlencover ! ;
::TFILL	'runlenTex 'runlencover ! ;

|---------- HEAP
:]heap | nro -- adrr
	2 << 'heapseg + ;

:heap! | nodo --
	heapcnt dup 1+ 'heapcnt !
	( 1? )(
		dup 1- 2/	| v j i
		dup ]heap @ | v j i vi
		pick3 <? ( 2drop ]heap ! ; )
		rot ]heap !	| v i
		) drop
	'heapseg ! ;

:moveDown | nodo pos --
	( heapcnt 2/ <? )(
		dup 2* 1+ 		| val pos ch1
		dup ]heap @	| val pos ch1 v1
		over 1+         | val pos ch1 v1 ch2
		heapcnt <? (
			]heap @	| val pos ch1 V1 V2
    		>? ( drop 1+ dup ]heap @ ) | val pos chm Vm
			)( drop )
		pick3 				| value pos chM vM va
		>=? ( 2drop ]heap ! ; )		| value pos chM vM
		rot over swap ]heap !	| value chM vM
		drop )
	]heap ! ;

:heap@ | -- nodo
	heapseg heapcnt
	1- ]heap @ 0 MoveDown
	heapcnt 1-
	0? ( -1 'heapseg ! )
	'heapcnt !
	;

|************************************
:PLINEI | x y --
	pyBPP =? ( drop 'pxBPP ! ; )
	pxBPP pyBPP pick2 >? ( 2swap 2dup )( 2over ) | x2 y2 x1 y1
	'pyBPP ! 'pxBPP !
	sh BPP << >=? ( 4drop ; ) rot 0 <=? ( 4drop ; ) | x2 x1 y1 y2
	ymax >? ( dup 'ymax ! )		| comprueba el mayor
	>r >r FBASE << swap FBASE << 	| x1 x2
	over - r> r over -				| x1 (x2-x1) y1 (y2-y1)
	rot swap / swap					| x1 t y1
	-? ( neg over * rot + swap 0 )	| x1 t y1
	dup 16 << segs> 'segs - 4 >> or heap! | ubica en heap
	segs> !+ rot pick2 2/ + swap !+ !+
	r> swap !+ 'segs> !
	;

:clearscan
	0 sw 1+ setlen 'runlenscan !+ ! ;

:searchscan | valor adr -- valor adr'
	( @+ 1? )(
		getpos pick2 >? ( drop 8 - ; )
		drop ) drop
	8 - ;

:inserta1 | adr --
	>r r@+
	( r @ 1? )( swap r!+ )
	swap r!+ r> ! ;

:inserta2 | adr --
	>r r@+ dup | j k
	( r @ 1? )(	rot r!+ )
	rot r!+ swap r!+ r> ! ;

:add.1 | val pos rl -- rl
	dup >r
	@ dup getlen	| val pos v len
	1 =? ( drop nip + r!+ r> ; )
	drop swap over getpos | val v pos posv
	=? ( r inserta1
		drop swap 	| v val
		over $fff001ff and + $200 or r!+
		$100000 + $200 - r ! r> ; )
	r 4+ @ getpos 1- | val v pos posf
	=? ( r inserta1 | val v pos
		over $200 - r!+
		setpos $200 or swap getval rot + or r!+ r> ; )
	r inserta2 | val v pos
	over $fff001ff and over pick3 getpos - setlen or r!+
	rot | v pos val
	pick2 getval + $200 or over setpos or r!+
	1+ | v pos+1
	r @ dup getpos swap getlen +
	over - setlen swap setpos or
	swap getval or r ! r> ;


:add.len | pos len rl -- rl
	>r
	1 =? ( drop VALUES swap r> add.1 ; )
	r @ getlen
	over >? (	| pos len lenv
		r inserta1
		pick2 setpos pick2 setlen or r @ getval VALUES + or r!+
		over - setlen rot rot + setpos or r @ getval or
		r ! r> ; )
	over <? ( 	| pos len lenv
		r @ VALUES + r!+
		rot over + rot rot -
		r> add.len ; )
	3drop r @ VALUES + r!+
	r> ;

:coverpixels | xb xa adr -- adr
	>r
    over BPP >> 0 <? ( 3drop r> ; )
	over BPP >> sw >=? ( 4drop r> ; )
	r> searchscan >r
	| xb xa x1 x0
	over =? ( nip rot MASK and rot MASK and -
			1? ( swap r> add.1 ; )
			2drop r> ; )
	| xb xa x1 x0
	0 >=? ( rot MASK and VALUES swap -
			over r> add.1 >r
			1+ sw >=? ( 3drop r> ; )
		)( drop nip 0 rdrop 'runlenscan >r )
	| xb x1 x0
	swap sw >? ( sw pick2 - )( dup pick2 - ) | xb x0 x1 largo
	0 >? ( rot swap r> add.len >r )( drop nip ) | xb x1
	sw <? ( swap MASK and
			1? ( swap r> add.1 ; )
			)
	2drop r> ;

:fillcover
	'runlenscan >r
	'activos ( activos> 4 - <? )(
		@+ 4+ @ FBASE >> swap @+ 4+ @ FBASE >> rot
		r> coverpixels >r
		) drop
	rdrop ;

|-----------------------------
:-activos	| --
	'activos 'activos> ! ;

:activosort | v x t1 --
	( 'activos >? )( 4 -		| v x t1
		dup @ 				| v x t1 n1
		dup 4+ @			|  v x t1 n1 nx
		pick3 <? ( 2drop nip 4+ ! ; ) drop
		| v x t1 v1
		over 4+ ! )
	nip ! ;

:activos!+ | v --	; agrega ordenado
	dup 4+ @ 	| v x
	activos> 	| v x t1
	dup 4+ 'activos> !
	activosort ;

:activosresort | nodo seg -- nodo	; incrementa y ordena
	dup 4+ @+ swap @ +	| nodo seg newx
	dup pick2 4+ !		| nodo seg newx
	pick2				| nodo seg newx nodo
	activosort ;

:advanceline
	'activos ( activos> <? )(
		dup @ activosresort 4+ ) drop ;

:deletecopy | nodoa --
	dup 4+ 	| en desde
	( activos> <? )(
		@+ dup 12 + @	| en desde seg yfin
		pick4 >? ( drop rot !+ swap )( 2drop )
		) drop
	'activos> ! ;

:deleteline
	'activos ( activos> <? )(
		dup @ 12 + @ pick2 =? ( drop deletecopy ; ) drop
		4+ ) drop ;

|-----------------------
:endpoli
	'segs 'segs> !
	-1 'ymax !
	0 'heapcnt ! ;

|*******************************
::POLI
	ymax -? ( drop endpoli ; )
	sh BPP << >? ( sh BPP << 'ymax ! ) drop
	-activos
	heapseg 16 >> dup | newy ymin
	0 over BPP >> setxy
	( ymax <? )(
        clearscan
		VALUES ( 1? )( 1- >r
	    	( over =? )( nip	| agrega nuevos ordenados
				heap@ $ffff and 4 << 'segs + activos!+
	           	heapseg 16 >> swap )
			fillcover
	        1+
			deleteline
			advanceline
			r> ) drop
		runlencover exec
		) 2drop
	endpoli	;


|*******************************
:PCURVEI | fx fy cx cy --
	pick3 pxBPP + pick2 2* - abs
	pick3 pyBPP + pick2 2* - abs  +
	TOLERANCE <? ( 3drop PLINEI ; ) drop
	pick3 pick2 + 2/  pick3 pick2 + 2/		| fx fy cx cy c2 c2
	2swap 									| fx fy c2 c2 cx cy
	pyBPP + 2/ swap pxBPP + 2/ swap			| fx fy c2 c2 c1 c1
	pick3 pick2 + 2/  pick3 pick2 + 2/		| fx fy c2 c2 c1 c1 ex ey
	2swap PCURVEI PCURVEI ;

|*******************************
:PCURVE3I | xf yf x2 y2 x1 y1
	pick3 pick2 + 2/ pick3 pick2 + 2/ 'by ! 'bx !
	'y1 ! 'x1 !
	pick3 pick2 + 2/ pick3 pick2 + 2/ 2swap
	'y2 ! 'x2 !
	over bx + 2/ over by + 2/
	over x2 - abs over y2 - abs + >r
	pxBPP x1 + 2/ pyBPP y1 + 2/
	over bx + 2/ over by + 2/
	over x1 - abs over y1 - abs + >r
	2swap >r >r
	pick3 pick2 + 2/ pick3 pick2 + 2/
	2swap r> r>
	r> 3 <? ( drop 4drop plineI )( drop PCURVE3I )
	r> 3 <? ( drop 4drop plineI ; )
	drop PCURVE3I ;

::PLINE | x y --
	BPP << swap BPP << swap PLINEI ;

::PCURVE | x y x y --
	>r >r >r BPP << r> BPP << r> BPP << r> BPP <<
	PCURVEI ;

::PCURVE3 | x y x y x y --
	>r >r >r >r >r
	BPP << r> BPP << r> BPP << r> BPP << r> BPP << r> BPP <<
	PCURVE3I ;

|-------- NO IMPLEMENTADAS!
::ALPHA | a --
	drop ;
