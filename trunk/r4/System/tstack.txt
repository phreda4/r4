| register allocator and type control
| PHREDA 2011
|----------------------
^r4/system/vstack.txt

#tostr )( 4096	| indice de dib pilas
#tostr> 'tostr

#memp )( 4096	| dibujo de pilas
#memp> 'memp

#cntregs 0
#regs )( 1024	| info de registros

#sst )( 1024 | pila de pilas
#sst> 'sst

:+memp | c --
	memp> c!+ 'memp> ! ;

:stacks>str
	memp> tostr> !+ 'tostr> !
	[ 65 + +memp ; ] mappila
	$3A +memp
	[ 65 + +memp ; ] mappilar
	0 +memp
	;

:str>stacks | "" -
	d.ini
	( c@+ $3a <>? )(
		65 - d.pushDec
		) drop
	r.ini
	( c@+ 1? )(
		65 - r.pushDec
		) 2drop
	;

:pushstack
	tostr> 4 - @ sst> !+ 'sst> !
	;
:popstack
	-4 'sst> +!
	sst> @ str>stacks
	;

:newREG
	cntregs d.pushDec 1 'cntregs +! ;
:+rn	| 12
	newREG ;
:+rs	| "kk"
	newREG ;

:+rw	| ww
|***	newREG
	;

:+rv	| vv
	newREG ;
:+rdw	| 'w
	newREG ;
:+rdv	| 'v
	newREG ;

:TOSchange
	findpilaT
	0? ( drop ; ) drop
	vDrop
	newREG ;

:TOSNOSchange
	findpilaT
	0? ( drop ; ) drop
	v2Drop
	newREG newREG ;

:1dw 	| exec
	vDrop ;
:1a0	| =? ..
	vDrop ;
:2a1	| + - * and or xor << ..
	vDrop TOSchange ;
:1a1	| neg not 1+ 4+ 1- 2/ ..
	TOSchange ;
:3a1
	v2Drop TOSchange ;
:2a2
	TOSNOSchange ;
:1@
	TOSchange ;
:1!
	v2Drop ;
:2@
	TOSchange newReg ;
:2!
	vNip ;
:2+!
	v2Drop ;

:+mem
	newREG ;

:v3v newREG
:v2v newREG
:v1v newREG ;

|--- condicionales
| ?( v;) (push )pop ;=endonw
| ?( v ) ..
| ?( )( ) (push  )(  )pop
| ( ? )(  )
| (  ? )
| (    )
:es(	|(
	pushstack ;

:es)(	|)(
	;

:es)	|)
	popstack ;

|--- anonimas
:es[	|[
	newREG
	pushstack ;

:es]	|]
	popstack ;

| uso dD dR tipo
#acctoken
0	| 0
0	|1 :,,defc
0	|2 :,,defv
+rn |3 :,,litd | --	n numero decimal
+rn |4 :,,lith | --	n numero hexa
+rn |5 :,,litb | -- n numero binario
+rn |6 :,,litf | --	n numero punto fijo
+rs |7 :,,lits | --	s string
+rw |8 :,,word 	| ..--..  word <---- debe ser calculado
+rv |9 :,,var 	| -- v var
+rdw |10:,,dword | -- dw dir word
+rdv |11:,,dvar 	| -- dv dir var
0	|; | fin de palabra (12)
es(	|(
es)(	|)(
es)	|)
es[	|[
es]	|]
1dw	|EXEC  x/0 --    TOS es dcod
0	|0? a -- a
0	|+? a -- a
0	|-? a -- a
0	|1? a -- a
1a0	|=?  ab -- a
1a0	|<?  ab -- a
1a0	|>?  ab -- a
1a0	|<=? ab -- a
1a0	|>=? ab -- a
1a0	|<>? ab -- a
1a0	|AND?  ab -- a
1a0	|NAND? ab -- a
vdup 	|DUP    a -- aa
vdrop 	|DROP  a --
vover 	|OVER   ab -- aba
vpick2 	|PICK2  abc -- abca
vpick3 	|PICK3  abcd -- abcda
vpick4 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
v2dup	|2DUP   ab -- abab
v2drop	|2DROP ab --
v3drop	|3DROP abc --
v4drop	|4DROP abcd --
v2over	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab
v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --

vR		|R      -- a R: a -- a
vR+		|R+    a -- R: b -- c
vR@+	|R@+    -- a R: b -- c
vR!+	|R!+   a -- R: b -- c

vrdrop	|RDROP	R: a --

2a1 |53 AND	ab -- c
2a1 |OR    ab -- c
2a1 |XOR   ab -- c
1a1 |NOT    a -- b
2a1 |+		ab -- c
2a1 |-     ab -- c
2a1 |*     ab -- c
2a1 |/     ab -- c		usa eax,edx
3a1	|*/    abc -- d     usa eax,edx
3a1	|*>>   abc -- d     usa eax,edx, ecx
2a2	|/MOD   ab -- cd    usa eax,edx
2a1 |MOD    ab -- c     usa eax,edx
1a1 |ABS    a -- b      usa eax,edx
1a1 |SQRT	a -- b
1a1 |CLZ	a -- b     usa eax,edx
3a1	|<</	abc -- d   usa eax,edx, ecx
1a1 |NEG    a -- b
1a1 |1+     a -- b
1a1 |4+     a -- b
1a1 |1-     a -- b
1a1 |2/     a -- b
1a1 |2*     a -- b
2a1 |<<    ab -- c     usa ecx
2a1 |76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v3drop	|MOVE  abc --       a,b es ddat
v3drop	|MOVE> abc --		a,b es ddat
v3drop	|CMOVE abc --		a,b es ddat
v3drop	|CMOVE> abc --		a,b es ddat

+mem |MEM	-- a		a es ddat
vdrop	|DIR    a --
0	|FILE   a -- b
0	|FSIZE  a -- b
0	|VOL    a -- b
vdrop	|LOAD   ab -- c
v3drop	|SAVE   abc --

0	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vdrop	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vdrop	|RUN    a --
v1v	|SW      -- a
v1v	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
v2drop	|SETXY  ab --
vdrop	|PX+!   a --
vdrop	|PX!+   a --
v1v	|PX@     -- a

v1v	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vdrop	|PAPER  a --
vdrop	|INK    a --
v1v	|INK@    -- a
vdrop	|ALPHA  a --
v2drop	|OP     ab --
v2drop	|CP     ab --
v2drop	|LINE   ab --
v2drop	|CURVE  ab --
v2drop	|PLINE  ab --
v2drop	|PCURVE ab --
0	|POLI    --
v2drop	|FCOL   ab --
v2drop	|FCEN   ab --
v2drop	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vdrop	|TFILL  a --

0	|SLOAD   a -- a
vdrop	|SPLAY  a --
0	|MLOAD   a -- a
vdrop	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM


::sregini | usados --
	'tostr 'tostr> !
	'memp 'memp> !
	0 'cntregs !
	d.ini
	( 1? )( newREG 1- ) drop

	stacks>str ;

::sregtok | adr -- adr+
	@+ $ff and 2 << 'acctoken + @ exec
	stacks>str ;

::sregend
	;


::tstacklisis | nro --
	dup nro>mov @ 24 << 24 >> | uso
	neg sregini

	nro>toklen
	( 1? )( 1- swap
		sregtok swap )
	2drop
	;

::sregdump
	'tostr ( tostr> <? )(
		@+ print cr
		) drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr + ( tostr> <? )(
		@+ print cr
		) drop
	;
