| register allocator and type control
| PHREDA 2011
|----------------------
^r4/system/vstack.txt

#tostr )( 4096	| indice de dib pilas
#tostr> 'tostr

#memp )( 4096	| dibujo de pilas
#memp> 'memp

:+memp | c --
	memp> c!+ 'memp> ! ;

#sst )( 1024 | pila de pilas
#sst> 'sst

:sst!
	sst> !+ 'sst> ! ;

:sst@
	-4 'sst> +! sst> @ ;

|--- registros  $iiffccss
| ii inicio
| ff fin
| cc cntdeop ss:
| cte 	$1 | str   $2 | var   $3 | dvar  $4
| dcod  $5 | mem	$6 | orig 	$7 | []	$80
|-----------

#nroi 0
#cntregs 0
#regs )( 1024	| info de registros
#regv )( 1024	| valor de registro

:mcte "$%h" mprint ;
:mstr "s%h" mprint ;
:mvar "[w%h]" mprint ;
:mdvar "w%h" mprint ;
:mdcod "w%h" mprint ;
:mmem ;
:morig ;

#accnreg 0 mcte mstr mvar mdvar mdcod mmem morig

::,nreg | nro -- ""
	2 << dup 'regv + @
	swap 'regs + @
	$7 and 2 << 'accnreg + @ exec ;

:clrreg | --
	0 'nroi !
	0 'cntregs !
	'regs 256 ( 1? )( 1- 0 rot !+ swap ) 2drop ;

:setreg | valor --
	nroi 24 << or	| inicio
	cntregs 1- 2 << 'regs + !
	;

:usoreg | --
	d.get 2 << 'regs + dup
	@ dup $ffff00ff and swap
	$ff00 and $100 + or
	swap ! ;

:usomreg | --
	d.get 2 << 'regs + dup
	@ $80 or swap ! ;

:setrange | --
	d.get 2 << 'regs + dup
	@ $ff00ffff and
	nroi 16 << or
	swap ! ;

|-------------------------------
:stacks>str | --
	memp> tostr> !+ 'tostr> !
	[ 65 + +memp ; ] mappila
	$3A +memp
	[ 65 + +memp ; ] mappilar
	0 +memp
	;

:str>stacks | "" --
	d.ini
	( c@+ $3a <>? )(
		65 - d.pushDec
		) drop
	r.ini
	( c@+ 1? )(
		65 - r.pushDec
		) 2drop
	;

:stacknow | -- now
	tostr> 4 - @ ; | stack actual

:newREG
	cntregs d.pushDec 1 'cntregs +! ;

:newREGR
	cntregs r.pushDec 1 'cntregs +! ;

:TOSchange
	findpilaT
	0? ( drop ; ) drop
	vDrop
	newREG ;

|----------------------------
:+rn	| 12
	newREG $1 setreg ;

:+rs	| "kk"
	newREG $2 setreg ;

:+rw	| ww
	dup 4 - @ 8 >> nro>mov @
|	dup 24 >> | no se propaga es flujo de ejecucion
|	-? ( ( 1? )( 1+ vrdrop ) drop )( ( 1? )( 1- newRegR ) drop ) 	|	'deltaR +!
	8 << 24 >>
	0? ( drop ; )
	-? ( ( 1? )( 1+ vdrop ) drop )( ( 1? )( 1- newReg ) drop ) 	|'deltaD +!
	TOSchange
	;

:+rv	| vv
	newREG $4 setreg ;
:+rdw	| 'w
	newREG $10 setreg ;
:+rdv	| 'v
	newREG $8 setreg ;


:1dw 	| exec
	setrange vdrop ;
:c0 | 0? 1? ..
	usoreg setrange ;
:c1 | =? <? ..
	setrange vdrop usoreg setrange ;

:d4 | 4drop
	setrange vdrop
:d3 | 3drop
	setrange vdrop
:d2 | 2drop
	setrange vdrop
:d1 | drop
	setrange vdrop ;

:2a1	| + - * and or xor << ..
	setrange vdrop toschange usoreg setrange ;
:1a1	| neg not 1+ 4+ 1- 2/ ..
	TOSchange usoreg setrange ;
:3a1	| *>> /<< */
	setrange vdrop setrange vdrop
	TOSchange usoreg setrange ;
:2a2	| mod/
	setrange toschange vswap setrange toschange vswap
	;
:1@
	TOSchange usomreg setrange ;
:1!
	usomreg
	d2 ;
:2@	| @+
	TOSchange usomreg setrange
	newReg $20 setreg ;
:2! | !+
	usomreg setrange
	vswap setrange vdrop ;
:2+! | +!
	usomreg
	d2 ;


:vr		|R      -- a R: a -- a
	vr> setrange v>r ;
:vr+		|R+    a -- R: b -- c
	vr d1 ;
:vr@+	|R@+    -- a R: b -- c
	vr> setrange usomreg v>r 
	newReg $20 setreg ;
:vr!+	|R!+   a -- R: b -- c
	vr> setrange usomreg v>r
	d1 ;
:vrdr
	vr> d1 ;

:+mem
	newREG $8 setreg ;

:v3v newREG
:v2v newREG
:v1v newREG ;

|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(	|(
	stacknow sst!
	salto? sst!
	;

:es)(	|)(
	salto? 1? ( sst@ 2drop stacknow sst! 3 sst! ; ) | while
	sst@ 2drop
	sst@ dup sst!
	stacknow sst! 2 sst!
	str>stacks
	;

:tipo0 | (  ? ) o (    )
	sst@ drop ;

:tipo1 | ?( )
	;? 1? ( sst@ str>stacks drop ; )
	sst@ 2drop ;

:tipo2 | ?( )( )
	;? 1? ( sst@ sst@ str>stacks 2drop ; )
	sst@ str>stacks sst@ 2drop ;

:es)	|)
	sst@ 0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	sst@ str>stacks	| ( ? )(  )
	sst@ 2drop
	;

|--- anonimas
:es[	|[
	stacknow sst!
	d.ini r.ini ;

:es]	|]
	sst@ str>stacks
	newREG $10 setreg ;

| uso dD dR tipo
#acctoken
0	| 0
0	|1 :,,defc
0	|2 :,,defv
+rn |3 :,,litd | --	n numero decimal
+rn |4 :,,lith | --	n numero hexa
+rn |5 :,,litb | -- n numero binario
+rn |6 :,,litf | --	n numero punto fijo
+rs |7 :,,lits | --	s string
+rw |8 :,,word 	| ..--..  word <---- debe ser calculado
+rv |9 :,,var 	| -- v var
+rdw |10:,,dword | -- dw dir word
+rdv |11:,,dvar 	| -- dv dir var
0	|; | fin de palabra (12)
es(	|(
es)(	|)(
es)	|)
es[	|[
es]	|]
1dw	|EXEC  x/0 --    TOS es dcod
c0	|0? a -- a
c0	|+? a -- a
c0	|-? a -- a
c0	|1? a -- a
c1	|=?  ab -- a
c1	|<?  ab -- a
c1	|>?  ab -- a
c1	|<=? ab -- a
c1	|>=? ab -- a
c1	|<>? ab -- a
c1	|AND?  ab -- a
c1	|NAND? ab -- a
vdup 	|DUP    a -- aa
d1 	|DROP  a --
vover 	|OVER   ab -- aba
vpick2 	|PICK2  abc -- abca
vpick3 	|PICK3  abcd -- abcda
vpick4 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
v2dup	|2DUP   ab -- abab
d2	|2DROP ab --
d3	|3DROP abc --
d4	|4DROP abcd --
v2over	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab

v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
vrdr	|RDROP	R: a --

2a1 |53 AND	ab -- c
2a1 |OR    ab -- c
2a1 |XOR   ab -- c
1a1 |NOT    a -- b
2a1 |+		ab -- c
2a1 |-     ab -- c
2a1 |*     ab -- c
2a1 |/     ab -- c		usa eax,edx
3a1	|*/    abc -- d     usa eax,edx
3a1	|*>>   abc -- d     usa eax,edx, ecx
2a2	|/MOD   ab -- cd    usa eax,edx
2a1 |MOD    ab -- c     usa eax,edx
1a1 |ABS    a -- b      usa eax,edx
1a1 |SQRT	a -- b
1a1 |CLZ	a -- b     usa eax,edx
3a1	|<</	abc -- d   usa eax,edx, ecx
1a1 |NEG    a -- b
1a1 |1+     a -- b
1a1 |4+     a -- b
1a1 |1-     a -- b
1a1 |2/     a -- b
1a1 |2*     a -- b
2a1 |<<    ab -- c     usa ecx
2a1 |76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v3drop	|MOVE  abc --       a,b es ddat
v3drop	|MOVE> abc --		a,b es ddat
v3drop	|CMOVE abc --		a,b es ddat
v3drop	|CMOVE> abc --		a,b es ddat

+mem |MEM	-- a		a es ddat
vdrop	|DIR    a --
0	|FILE   a -- b
0	|FSIZE  a -- b
0	|VOL    a -- b
vdrop	|LOAD   ab -- c
v3drop	|SAVE   abc --

0	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vdrop	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vdrop	|RUN    a --
v1v	|SW      -- a
v1v	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
v2drop	|SETXY  ab --
vdrop	|PX+!   a --
vdrop	|PX!+   a --
v1v	|PX@     -- a

v1v	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vdrop	|PAPER  a --
vdrop	|INK    a --
v1v		|INK@    -- a
vdrop	|ALPHA  a --
v2drop	|OP     ab --
v2drop	|CP     ab --
v2drop	|LINE   ab --
v2drop	|CURVE  ab --
v2drop	|PLINE  ab --
v2drop	|PCURVE ab --
0		|POLI    --
v2drop	|FCOL   ab --
v2drop	|FCEN   ab --
v2drop	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vdrop	|TFILL  a --

0	|SLOAD   a -- a
vdrop	|SPLAY  a --
0	|MLOAD   a -- a
vdrop	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM


::sregini | usados --
	'tostr 'tostr> !
	'memp 'memp> !
	'sst 'sst> !
	clrreg
	d.ini r.ini
	( 1? )( newREG $40 setreg 1- ) drop
	stacks>str ;

::sregtok | adr -- adr+
	@+ $ff and 2 << 'acctoken + @ exec
	stacks>str
	1 'nroi +! ;

::sregend

	;

|-------- analizadores
::tstacklisis | nro --
	dup nro>mov @ 24 << 24 >> | uso
	neg sregini
	nro>toklen
	( 1? )( 1- swap sregtok swap )
	2drop
	;

::tstacklisisb | fin ini uso --
	sregini
	( over <? )( sregtok ) 2drop
	sregend
	;

|-------- asignadores
::mapregs | exe --
	'regs 0 ( cntregs <? )(
		swap
		@+ pick3 exec
		swap 1+ ) 3drop ;

|--------- dump
::sregdump
	'tostr ( tostr> <? )(
		@+ print cr
		) drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr + ( tostr> <? )(
		@+ print cr
		) drop
	;

::dumpregs | --
	| ctes
	azul
	[ $ff00 nand? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs
	cyan cr
	[ $ff00 and? ( pick2 65 + "%k %h |" allowcr print )( drop ) ; ] mapregs
	;