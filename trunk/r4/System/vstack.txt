| pilas virtuales (datos y retorno)
| para emulador y compilador
| PHREDA 2011
|------------------------------------

|--- Pila DATOS
| 		valor 		tipo
| TOS = dpila>-4  dpila>-8
|       -12       -16
|       -20       -24
|       -28       -32
#uquieto	| pila de udato

#:dpila )( 2048
#:dpila> 'dpila

::d.ini 'dpila 'dpila> ! ;
:d.cnt | -- cnt
	dpila dpila> - 3 >> ;

::d.pop | -- nro
	dpila> 8 -
	dup 'dpila> ! 4+ @ ;
::d.pop2
	-16 'dpila> +!
	dpila> 4+ @+ swap 4+ @ ;
::d.pop3
	-24 'dpila> +!
	dpila> 4+ @+ swap 4+ @+ swap 4+ @ ;

::d.get dpila> 4 - @ ;
::d.get2 dpila> 12 - @ ;

:d.push | nro tipo --
	dpila> !+ !+ 'dpila> ! ;

::d.pushDec		$0 d.push ;
::d.pushHex		$1 d.push ;
::d.pushBin		$2 d.push ;
::d.pushFix		$3 d.push ;
::d.pushStr		$4 d.push ;
::d.pushVar		$5 d.push ;
::d.pushDVar	$6 d.push ;
::d.pushDCod	$7 d.push ;
::d.pushCNum	$8 d.push ;
::d.pushCStr	$9 d.push ;
::d.pushCDVar	$10 d.push ;
::d.pushCDCod	$11 d.push ;
::d.pushEXE		$11 d.push ;

:d.TOSt | -- tipodetos
	dpila> 8 - @ ;

:d.NOSt | -- tipodenos
	dpila> 16 - @ ;

:d.NOS2t | -- tipodenos2
	dpila> 24 - @ ;

:d.push | nro tipo --
	dpila> !+ !+ 'dpila> ! ;

:d.setReg | nro tipo lugar --
	1+ 3 << dpila> swap - !+ ! ;

:d.u
	d.cnt uquieto + ;
:d.f
	d.cnt uquieto - ;
:uquieto!
	'uquieto ! ;

|-------- operaciones de pila

::vDROP  -8 'dpila> +! ;
::v2DROP -16 'dpila> +! ;
::v3DROP -24 'dpila> +! ;
::v4DROP -32 'dpila> +! ;
::vDUP
	dpila> 8 - >r
	r@+ r@+ swap
	r!+ r!+ r> 'dpila> ! ;
::v2DUP
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r!+ r!+ r!+ r!+
	r> 'dpila> ! ;
::vOVER
	dpila> 16 - >r
	r@+ r@+ swap r> 8 + >r
	r!+ r!+ r> 'dpila> ! ;
::vPICK2
	dpila> 24 - >r
	r@+ r@+ swap r> 16 + >r
	r!+ r!+ r> 'dpila> ! ;
::vPICK3
	dpila> 32 - >r
	r@+ r@+ swap r> 24 + >r
	r!+ r!+ r> 'dpila> ! ;
::vPICK4
	dpila> 40 - >r
	r@+ r@+ swap r> 32 + >r
	r!+ r!+ r> 'dpila> ! ;
::vSWAP
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r> @ swap
	dpila> 16 -
	!+ !+ !+ ! ;
::vNIP
	dpila> 8 - >r
	r@+ r@+ swap r> 16 -
	!+ !+ 'dpila> ! ;
::vROT
	dpila> 24 - >r
	r@+ r@+ swap
	r@+ r@+ swap
	r@+ r> @ swap 2swap
	dpila> 24 -
	!+ !+ !+ !+ !+ ! ;
::v2OVER
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r> 16 +
	!+ !+ !+ !+ 'dpila> ! ;
::v2SWAP
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r@+ r@+ swap
	r@+ r@+ swap 2swap r> 32 -
	!+ !+ !+ !+ !+ !+ !+ ! ;

|---- Calculo

::vAND	d.pop2 and d.pushDec ;
::vOR	d.pop2 or d.pushDec ;
::vXOR	d.pop2 xor d.pushDec ;
::vNOT	d.pop not d.pushDec ;
::v+ 	d.pop2 + d.pushDec ;
::v-	d.pop2 - d.pushDec ;
::v*    d.pop2 * d.pushDec ;
::v/    d.pop2 / d.pushDec ;
::v*/   d.pop3 */ d.pushDec ;
::v*>>  d.pop3 *>> d.pushDec ;
::v<</  d.pop3 <</ d.pushDec ;
::v/MOD d.get2 /mod d.pushDec d.pushDec ;
::vMOD  d.get2 mod d.pushDec ;
::v<<   d.get2 << d.pushDec ;
::v>>   d.get2 << d.pushDec ;
::vABS	d.pop abs d.pushDec ;
::vCLZ	d.pop clz d.pushDec ;
::vNEG  d.pop neg d.pushDec ;
::v1+	d.pop 1+ d.pushDec ;
::v1-	d.pop 1- d.pushDec ;
::v4+	d.pop 4+ d.pushDec ;
::v2/	d.pop 2/ d.pushDec ;
::v2*	d.pop 2* d.pushDec ;

|----------- tipo de pila por registro
|:d.pushReg	0 d.push ; | eax ebx ecx edx edi mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7
|:d.pushEsi  1 d.push ; | dword [esi+4*] ..
|:d.pushEsp	2 d.push ; | dword	[esp+4*] ..
|:d.pushVar	3 d.push ; | var	[w1]
|:d.pushIcod	4 d.push ; | dcod	'w2
|:d.pushDcod	5 d.push ; | dcod	'w2
|:d.pushDvar	6 d.push ; | dvar	w1
|:d.pushStr	7 d.push ; | str    "hola"
|:d.pushCte	8 d.push ; | cte	23


#RegCount 5
#ra "eax" #rb "ebx" #rc "ecx" #rd "edx" #re "edi"
#reg 'ra 'rb 'rc 'rd 're

#RegMCount 8
#rm0 "mm0" #rm1 "mm1" #rm2 "mm2" #rm3 "mm3" #rm4 "mm4" #rm5 "mm5" #rm6 "mm6" #rm7 "mm7"
#regmmx rm0 rm1 rm2 rm3 rm4 rm5 rm6 rm7

:,Reg	RegCount <? ( 2 << 'reg + @ ; ) RegCount - 	| eax ebx ecx edx
		RegMCount <? ( 	2 << 'regmmx + @ ; ) RegMCount -
		1+ neg
:,Esi	0? ( "dword [esi]" ,s drop ; )
		-? ( neg "dword [esi-4*%d]" )( "dword [esi+4*%d]" )
		mprint ;
:,Esp	0? ( "dword [esp]" ,s drop ; )
		-? ( neg "dword [esp-4*%d]" )( "dword [esp+4*%d]" )
		mprint ;
:,Var	"[w%h]" mprint ;
:,Icod  "i%h" mprint ;
:,Dcod
:,Dvar	"w%h" mprint ;
:,Str	"s%h" mprint ;
:,Cte	"%d" mprint ;

#tipopila ,Reg ,Esi ,Esp ,Var ,Icod ,Dcod ,Dvar ,Str ,Cte

:,vstack | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopila + @ exec ,s ;

:,nreg ,reg ,s ;

#rab "al" #rbb "bl" #rcb "cl" #rdb "dl"
#regb 'rab 'rbb 'rcb 'rdb

:,regB	2 << 'regb + @ ; | no esta edi!!
:,esiB  0? ( "byte [esi]" ,s drop ; )
		-? ( neg "byte [esi-4*%d]" )( "byte [esi+4*%d]" )
		mprint ;
:,EspB	0? ( "byte [esp]" ,s drop ; )
		-? ( neg "byte [esp-4*%d]" )( "byte [esp+4*%d]" )
		mprint ;
:,VarB	"byte [w%h]" mprint ;

#tipopilaB ,RegB ,EsiB ,EspB ,VarB

:,vstackbyte | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaB + @ exec ,s ;

#raw "ax" #rbw "bx" #rcw "cx" #rdw "dx" #rew "di"
#regw 'raw 'rbw 'rcw 'rdw 'rdw

:,regW	2 << 'regw + @ ;
:,esiW  0? ( "word [esi]" ,s drop ; )
		-? ( neg "word [esi-4*%d]" )( "word [esi+4*%d]" )
		mprint ;
:,EspW	0? ( "word [esp]" ,s drop ; )
		-? ( neg "word [esp-4*%d]" )( "word [esp+4*%d]" )
		mprint ;
:,VarW	"word [w%h]" mprint ;

#tipopilaW ,RegW ,EsiW ,EspW ,VarW

:,vstackword | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaW + @ exec ,s ;

:d.resortstack | --  convierto to eax [esi] ..
 	trace
	d.cnt
	'dpila >r
	1- 0 ( over <? )(
		"mov [esi-" ,s uquieto ,d "]," ,s
     	r@+ r@+ swap 2 << 'tipopilaW + @ exec ,s ,cr
		1+ ) drop
	1+ "mov eax," ,s
	r@+ r@+ swap 2 << 'tipopilaW + @ exec ,s cr
	rdrop
	"lea esi,[esi" ,s d.f -? ( neg "-" )( "+" ) ,s 2 << ,d "]" ,ln
	;

:,TOS	0 ,vstack ;
:,NOS	1 ,vstack ;
:,NOS2	2 ,vstack ;
:,TOSbyte 0 ,vstackbyte ;
:,TOSword 0 ,vstackword ;
:,NOSbyte 1 ,vstackbyte ;
:,NOSword 1 ,vstackword ;
:,RTOS 	"edi" ;
:,, "," ,s ;

:1cte? | -- f
	dpila> 8 -
	@ 8 <>? ( drop 0 ; ) drop
	1 ;

:2cte? | -- f
	dpila> 16 -
	@+ 8 <>? ( 2drop 0 ; ) drop
	4+ @ 8 <>? ( drop 0 ; ) drop
	1 ;

:3cte? | -- f
	dpila> 24 -
	@+ 8 <>? ( 2drop 0 ; ) drop
	4+ @+ 8 <>? ( 2drop 0 ; ) drop
	4+ @ 8 <>? ( drop 0 ; ) drop
	1 ;

|----- PILA R
#:rpila )( 2048
#:rpila> 'rpila

::r.ini	'rpila 'rpila> ! ;
::r.pop	-8 'rpila> +! rpila> 4+ @ ;
::r.cnt	rpila> 'rpila - 3 >> ;
:r.tos rpila> 4 - @ ;
:r.push | nro tipo --
	rpila> !+ !+ 'rpila> ! ;

::r.pushDec		$0 r.push ;
::r.pushHex		$1 r.push ;
::r.pushBin		$2 r.push ;
::r.pushFix		$3 r.push ;

::r.pushStr		$4 r.push ;
::r.pushVar		$5 r.push ;
::r.pushDVar	$6 r.push ;
::r.pushDCod	$7 r.push ;
::r.pushCNum	$8 r.push ;
::r.pushCStr	$9 r.push ;
::r.pushCDVar	$10 r.push ;
::r.pushCDCod	$11 r.push ;
::r.pushEXE		$11 r.push ;

::v>R	drop d.pop r.pushDec ;		|--- pila de direccion
::vR>    drop r.pop d.pushDec ;
::vR     drop r.tos d.pushDec ;
::vR+	drop r.pop d.pop + r.pushDec ;
::vR@+	drop r.pop @+ d.pushDec r.pushDec ;
::vR!+	drop d.pop r.pop !+ r.pushDec ;
::vRDROP	r.pop 2drop ;

|----------- uso de registro
#regused 0  0  0  0  0  0   0   0   0   0   0   0   0
#regname ra rb rc rd re rm0 rm1 rm2 rm3 rm4 rm5 rm6 rm7

:reg.free | -- nro
	'regused
	5 ( 1? )( swap @+
		0? ( drop 'regused - 2 >> 1- nip ; )
		drop swap ) 2drop
	| si no hay uno, libera y asigna
	4 ;
|	-1 ;

:reg.set | nro --
	2 << 'regused + 1 swap ! ;

:reg.refresh
	0 0 0 0 0 'regused !+ !+ !+ !+ !
	'dpila
	( dpila> <? )(
		@+ 0? ( over @ reg.set )
		drop 4+ ) drop
	;

| NOS a un registro (si no esta)
:TOSreg
	d.TOSt 0? ( drop ; ) drop
	reg.free
	"mov " ,s dup ,nReg ,, ,TOS ,cr
	0 0 d.setReg ;

:TOSmem
    d.TOSt 3 <? ( drop ; ) drop
	reg.free
	"mov " ,s dup ,nReg ,, ,TOS ,cr
	0 0 d.setReg ;

:NOSreg
	d.NOSt 0? ( drop ; ) drop
	reg.free
	"mov " ,s dup ,nReg ,, ,NOS ,cr
	0 1 d.setReg ;

:NOSmem
    d.NOSt 3 <? ( drop ; ) drop
	reg.free
	"mov " ,s dup ,nReg ,, ,NOS ,cr
	0 1 d.setReg ;

:NOSeax
	|nos es eax..salir
	|liberea eax
	"mov eax," ,s ,NOS ,cr ;

:NOS2eax
	|nos es eax..salir
	"mov eax," ,s ,NOS2 ,cr ;

:FREEedx
	|libera edx
	;

:TOSecx
	"mov ecx," ,s ,TOS
	;

:eaxNOS
	;
:edxTOS
	;

|----- imprime pilas

:dec	@+ "%d" print ;	|::d.pushDec 0
:hex    @+ "$%h" print ;	|::d.pushHex 1
:bin    @+ "%%%b" print ;	|::d.pushBin 2
:fix    @+ "%f" print ;	|::d.pushFix 3
:str    @+ "%d" print ;	|::d.pushStr 4
:var	@+ "%d" print ;	|::d.pushVar  5
:dvar	@+ "%d" print ;	|::d.pushDVar 6
:dcod	@+ "%d" print ;	|::d.pushDCod 7
:cnum	@+ "%d" print ;	|::d.pushCNum 8
:cstr	@+ "%d" print ;	|::d.pushCStr 9
:cdvar	@+ "%d" print ;	|::d.pushCDVar 10
:cdcod	@+ "%d" print ;	|::d.pushCDCod 11

#accpp 'dec 'hex 'bin 'fix 'str 'var 'dvar 'dcod 'cnum 'cstr 'cdvar  'cdcod

:printpilai | adr -- adr++
	@+ $f and 2 << 'accpp + @ exec ;

::dumpvstack
	"D)" print
	'dpila ( dpila> <? )( sp printpilai ) drop
	cr
	"R)" print
	'rpila ( rpila> <? )( sp printpilai ) drop
	cr
	;

