| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt

^r4/system/r4code.txt
^r4/system/pilaestatica.txt
^r4/system/vstack2.txt

^r4/lib/trace.txt

|----- nro de str y label
#nstr | nro de string
#nlabel | nro de etiqueta

::ini.compila
	0 'nstr ! 0 'nlabel ! ;

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

:>pilac pilac> ! 4 'pilac> +! ;
:<pilac -4 'pilac> +! pilac> @ ;
:-pilac 'pilac 'pilac> ! ;


|------ consulta sobre registros

|#sysregs "RAX" "RBX" "RCX" "RDX" "RDI" "R8" "R9" "R10" "R11" "R12" "R13" "R14"
|#sysregsc 12
|#sysregx "XMM0" "XMM1" "XMM2" "XMM3" "XMM4" "XMM5" "XMM6" "XMM7" "XMM8" "XMM9" "XMM10" "XMM11" "XMM12" "XMM13" "XMM14" "XMM15"
|#sysregxc 16

#sysregs "EAX" "EBX" "ECX" "EDX" "EDI"  | "EBP"
#sysregsc  5
#sysregx "XMM1" "XMM2" "XMM3" "XMM4" "XMM5" "XMM6" "XMM7"
#sysregxc  8

#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB"
#sysvars "[SYSPAPER]" "[SYSXYM]" "[SYSBM]" "[SYSKEY]"



| NRO CTE 'STR 'COD 'DAT
| DAT VAR
| REG XREG
|----- tipos de celdas

:nrolist2str swap ( 1? )( 1- swap >>0 swap ) drop ;
:value	over 1024 + @ ;

|--	0 nro 	33
:mt0 value 99 >? ( "$%h" )( -9999999 <? ( "$%h" )( "%d" ) )  mprint ;
|--	1 cte	XRES
:mt1 value 'syscons nrolist2str ;
|--	2 str   "hola"
:mt2 value cte + "s%h" mprint ;
|--	3 'cod  'func
:mt3 value "w%h" mprint ;
|--	4 'dat  'var
:mt4 value "w%h" mprint ;
|--	5 dat   var
:mt5 value "[w%h]" mprint ;
|-- 6 var 	[SYSKEY]
:mt6 value 'sysvars nrolist2str ;
|-- 7 stack [esi+v*4]
:mt7 value 0? ( drop "[esi]" )( "[esi+%d*4]" mprint ) ;
|-- 8 reg 	eax
:mt8 value 'sysregs nrolist2str ;
|-- 9 regx 	xmm1
:mt9 value 'sysregx nrolist2str ;

#tiposrm mt0 mt1 mt2 mt3 mt4 mt5 mt6 mt7 mt8 mt9

::reg>str | nro -- ""
	( 2 << 'regt + dup @
		dup $7 and
		2 =? )( value nip nip nip )
	2 << 'tiposrm + @ exec
	nip nip ;

#registrosusados

#inivpcnt
:inivpila  | usado --
	inivstack
	0? ( drop ; )
	dup 'inivpcnt !
	1-
	( 1? )( 1-
		dup 7 addcell d.push | [esi
		) drop
	0 8 addcell d.push | eax
	;

:cambiareg | deltaesi --
	
	;
| eax [esi]
| [esi] eax
|  xx     xx    xx
| [esi+4] [esi] eax

:pila2normal | --  ;transforma la pila actual a normal
	d.cnt 0? ( drop ; )
	inivpcnt over - | actual-origen
	1? ( "lea esi,[esi" ,s dup +? ( "+" ,s ) 2 << ,d "]" ,ln ) drop | corre esi

	( 1? )( 1-
		dup d.nro
		) drop ;


|-------------------------------------
#regact
#regval )( 32

:regTOS		regact 24 >> $ff and ;
:regNOS		regact 16 >> $ff and ;
:regNOS2	regact 8 >> $ff and ;

:cte1? | reg -- 1/0
	reg.t@
	$8000 nand? ( drop 0 ; )
	24 >> 1 >? ( drop 0 ; )
	drop 1 ;

:reg? | reg -- 1/0
	reg.t@
	$4000 nand? ( drop 0 ; )
	drop 1 ;

:mem? | reg -- 1/0
	reg.t@
	$80 and? ( drop 1 ; )
	drop 0 ;

:ctelit? |
	reg.t@
	$f and 0? ( drop 1 ; )
	drop 0 ;

|------
:,TOS
	regTOS reg>str ,s ;

:,NOS
	regNOS reg>str ,s ;

|------ asignacion de registros

|------------ compila CODIGO

|:nro>dicn2   8 >> 5 << 'indicepal + @ ; | nombre
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:label	"_" ,s ,h 	;
:jmp,	"jmp " ,s label ,cr ;

:toknow
	dup 4 - @ ;

:,DUP
	"lea esi,[esi-4]" ,ln
	"mov [esi],eax" ,ln ;

:,lit
	toknow tok>cte 0 addcell d.push ;
|	toknow tok>cte ,DUP "mov eax," ,s ,d ,cr ;

:,lits
	nstr 2 addcell d.push ;
|	,DUP "mov eax,s" ,s nstr ,h ,cr 1 'nstr +! ;

:,dwo
	toknow nro>dicn 3 addcell d.push ;
|	toknow nro>dicn ,DUP "mov eax," ,s ,s ,cr ;

:,dva
	toknow nro>dicn 4 addcell d.push ;
|	toknow nro>dicn ,DUP "mov eax," ,s ,s ,cr ;

:,wor
	pila2normal
	dup @ $ff and | word ;
	12 =? ( "jmp " )( "call " )
	,s drop
	toknow nro>dicn ,s ,cr ;

:,var
	toknow nro>dicn 5 addcell d.push ;
|	toknow nro>dicn ,DUP "mov eax,dword [" ,s ,s "]" ,s ,cr ;

:,;
	pila2normal
	dup 8 - @ $ff and | word ;
	8 =? ( drop ; ) drop
	"ret" ,ln ;


:+etiqueta	| -- nueva   // y agrega a pila
	nlabel 1+ dup 'nlabel ! dup >pilac ;

:salto? | adr++ xx -- adr++ xx 0/1
	over 8 - @ $ff and
	18 >? ( 31 <? ( 1 nip ; ) ) 0 nip ;

:,(
	| reajusta pila
	+etiqueta salto? 1? ( swap label ,cr 1 )( swap label ":" ,ln 2 ) >pilac drop ;
:,)(
	| reajusta pila
	<pilac salto? 0? ( drop
			1 =? ( <pilac +etiqueta jmp, label ":" ,ln 1 >pilac drop ; )
			)( drop
			2 =? ( <pilac +etiqueta label ,cr >pilac 3 >pilac drop ; ) )
	drop ;
:,)
	| reajusta pila
	<pilac salto? 0? ( drop
			1 =? ( <pilac label ":" ,ln drop ; )
			2 =? ( <pilac jmp, drop ; )
			3 =? ( <pilac jmp, <pilac label ":" ,ln drop ; )
		)( drop
			2 =? ( <pilac label ,cr drop ; ) )
	drop ;


:,defw :,defv ; | no hay definiciones en optimizado (investigar como)
:,[ :,] ; | no hay anonimas en optimizado

|--------- PILA
:,DROP
	"lodsd" ,ln ;
:,NIP
	"lea esi,[esi+4]" ,ln ;
:,2DROP
	,NIP ,DROP ;
:,3DROP
	"lea esi,[esi+8]" ,ln ,DROP ;
:,4DROP
	"lea esi,[esi+12]" ,ln ,DROP ;

:,OVER
	,DUP "mov eax,[esi+4]" ,ln ;
:,PICK2
	,DUP "mov eax,[esi+4*2]" ,ln ;
:,PICK3
	,DUP "mov eax,[esi+4*3]" ,ln ;
:,PICK4
	,DUP "mov eax,[esi+4*4]" ,ln ;
:,SWAP
	"xchg eax,[esi]" ,ln ;
:,ROT
	"mov edx,[esi]" ,ln
	"mov [esi],eax" ,ln
	"mov eax,[esi+4]" ,ln
	"mov [esi+4],edx" ,ln ;
:,2DUP
	"mov edx,[esi]" ,ln
	"mov [esi-4],eax" ,ln
	"mov [esi-8],edx" ,ln
	"lea esi,[esi-8]" ,ln ;
:,2OVER
	"mov [esi-4],eax" ,ln
	"lea esi,[esi-8]" ,ln
	"pushd [esi+16]" ,ln
	"popd [esi]" ,ln
	"mov eax,[esi+12]" ,ln ;
:,2SWAP
	"pushd [esi+4]" ,ln
	"mov [esi+4],eax" ,ln
	"pushd [esi+8]" ,ln
	"mov eax,[esi]" ,ln
	"mov [esi+8],eax" ,ln
	"popd [esi]" ,ln
	"pop eax" ,ln ;



|:,DUP :,OVER  :,PICK2 :,PICK3 :,PICK4
|	,NOS ,TOS "mov %w,%w" ,line ;
|:,2DUP
|	,NOS ,TOS "mov %w,%w" ,line ;

|:,SWAP
|	,NOS ,TOS "xchg %w,%w" ,line ;
|:,ROT
|	,NOS2 ,TOS "xchg %w,%w" ,line
|	,NOS ,TOS "xchg %w,%w" ,line ;


:,EXEC
|	,TOS "mov ecx,%w" ,line
	"mov ecx,eax" ,ln
	,DROP
	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln ;

:,EXECx1 | 2 >> + @ exec
	"mov ecx,[eax*4+ebx]" ,line
	"or ecx,ecx" ,line
	"jz @f" ,line
	"call ecx" ,line
	"@@:" ,line ;


|------- PILAR

:,>R
|	nopt
|	2 =? ( drop ,TOS "push %w" ,line ; )
|	drop
|	,TOS ,NOS "mov %w,%w" ,line ;

	"push eax" ,ln ,DROP ;
:,R>
|	nopt
|	2 =? ( drop ,TOS "pop %w" ,line ; )
|	drop ;

	,DUP "pop eax" ,ln ;
:,R
|	nopt
|	2 =? ( drop ,NOS ,TOS "mov %w,%w" ,line ; ) drop
|	,TOS "mov %w,[esp]" ,line ;

	,DUP "mov eax,[esp]" ,ln ;

:,RDROP
|	nopt
|	2 =? ( drop "lea esp,[esp-4]" ,line ; )
|	drop ;

	"lea esp,[esp+4]" ,ln ;

:,R+
|	,NOS ,TOS "mov %w,[%w]" ,line
|	,NOS "add %w,4" ,line ;

	"add [esp],eax" ,ln ,DROP ;

:,R!+
|	nopt
|	2 =? ( drop ,TOS ,NOS "add %w,%w" ,line  ; ) drop
|	,TOS "add [esp],%w" ,line ;

	"pop edx" ,ln
	"mov [edx],eax" ,ln
	"add edx,4" ,ln
	"push edx" ,ln
	,DROP ;

:,R@+
	,DUP
	"mov eax,[esp]" ,ln
	"mov eax,[eax]" ,ln
	"add dword [esp],4" ,ln ;

|------- ARITMETICAS LOGICAS
:,AND
|	,TOS ,NOS "and %w,%w" ,line ;

	"and eax,[esi]" ,ln ,NIP ;
:,OR
|	,TOS ,NOS "or %w,%w" ,line ;

	"or eax,[esi]" ,ln ,NIP ;
:,XOR
|	,TOS ,NOS "xor %w,%w" ,line ;

	"xor eax,[esi]" ,ln ,NIP ;
:,NOT
|	,TOS "not %w" ,line ;

	"not eax" ,ln ;
:,+
|	,TOS ,NOS "add %w,%w" ,line ;

	"add eax,[esi]" ,ln ,NIP ;
:,-
|	,TOS ,NOS "sub %w,%w" ,line ;

	"neg eax" ,ln
	"add eax,[esi]" ,ln
	,NIP ;
:,*
|	,TOS ,NOS "imul %w,%w" ,line ;

	"imul eax,dword [esi]" ,ln
	,NIP ;
:,/
|	,TOS ,NOS "idiv %w,%w" ,line ;

	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln ;
:,*/
|	"cdq" ,line
|	,NOS "imul %w" ,line
|	,TOS "idiv %w" ,line ;

	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"idiv ecx" ,ln
	,NIP ;
:,*>>
|	"cdq" ,line
|	,NOS "imul %w" ,line
|	,TOSb "shrd eax,edx,%w" ,line
|	,TOSb "shr edx,%w" ,line
|	;

	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"shrd eax,edx,cl" ,ln
	"shr edx,cl" ,ln
	,NIP ;
:,<</
|	"cdq" ,line
|    ,TOSb "shld edx,eax,%w" ,line
|	,TOSb "shl eax,%w" ,line
|	,NOS "idiv %w" ,line ;

	"mov ecx,eax" ,ln
	"mov ebx,[esi]" ,ln
	,2DROP
	"cdq" ,ln
    "shld edx,eax,cl" ,ln
	"shl eax,cl" ,ln
	"idiv ebx" ,ln ;

:,/MOD
|	"cdq" ,line
|	,TOS "idiv %w" ,line ;

	"mov ecx,eax" ,ln
	"mov eax,[esi]" ,ln
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov [esi],eax" ,ln
	"mov eax,edx" ,ln ;

:,MOD
|	,TOS "idiv %w" ,line
|	"mov eax,edx" ,line ;

	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov eax,edx" ,ln ;

:,<<n
	"mov ecx," ,s ,TOS ,cr
	"sal " ,s ,NOS ",cl" ,ln ;

:,<<1
	regTOS ctelit? 0? ( drop ,<<n ; ) drop
	"sal " ,s ,NOS "," ,s ,TOS ,cr ;

:,<<
	regTOS cte1? 1? ( drop ,<<1 ; ) drop
	"mov ecx,eax" ,ln ,DROP
	"sal eax,cl" ,ln ;

:,>>n
	"mov ecx," ,s ,TOS ,cr
	"sar " ,s ,NOS ",cl" ,ln ;

:,>>1
	regTOS ctelit? 0? ( drop ,>>n ; ) drop
	"sar " ,s ,NOS "," ,s ,TOS ,cr ;

:,>>
	regTOS cte1? 1? ( drop ,>>1 ; ) drop
	"mov ecx,eax" ,ln ,DROP
	"sar eax,cl" ,ln ;

:,ABS
|	"mov ecx,ebx" ,ln
|	"sar ebx,31" ,ln
|	"add ecx,ebx" ,ln
|	"xor ecx,ebx" ,ln

	"cdq" ,ln
	"add eax,edx" ,ln
	"xor eax,edx" ,ln ;

:,CLZ
|	,TOS dup "bsr %w,%w" ,line
|	,TOS "xor %w,31" ,line ;

	"bsr eax,eax" ,ln
	"xor eax,31" ,ln ;

:,NEG
| 	,TOS "neg %w" ,line ;

	"neg eax" ,ln ;
:,1+
|	,TOS "add %w,1" ,line ;

	"inc eax" ,ln ;
:,4+
| 	,TOS "add %w,4" ,line ;

	"add eax,4" ,ln ;
:,1-
|	,TOS "add %w,-1" ,line ;

	"dec eax" ,ln ;
:,2/
| 	,TOS "sar %w,1" ,line ;

	"sar eax,1" ,ln ;
:,2*
| 	,TOS "sal %w,1" ,line ;

	"sal eax,1" ,ln ; | "add eax,eax" ,ln

|------ MEMORIA
:,@
	"mov eax,dword [eax]" ,ln ;
:,C@
	"movsx eax,byte [eax]" ,ln ;
:,W@
	"movsx eax,word [eax]" ,ln ;

|------------------
:,!mm
	"mov edx,[" ,s ,NOS "]" ,ln
	"mov ecx,[" ,s ,TOS "]" ,ln
	"mov [ecx],edx" ,ln
	;
:,!1m
	"mov edx," ,s ,NOS ,cr
	"mov [" ,s ,TOS "],edx" ,ln
	;
:,!11
	regTOS mem? 2* regNOS mem? +
	dup "; *!3 %d" ,print ,cr
	3 =? ( drop ,!mm ; )
|	2 =? ( drop ,!1m ; )
	drop
	"mov [" ,s ,TOS "]," ,s ,NOS ,cr
	;

:,!10
	"; *!2" ,print ,cr ;
:,!01
	"; *!1" ,print ,cr ;

:,!
	regTOS cte1? 2* regNOS cte1? +
	3 =? ( drop ,!11 ; )
	2 =? ( drop ,!10 ; )
	1? ( drop ,!01 ; )
	drop
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	,2DROP ;


:,C!
	"mov ecx,[esi]" ,ln
	"mov byte [eax],cl" ,ln
	,2DROP ;
:,W!
	"mov ecx,[esi]" ,ln
	"mov word [eax],cx" ,ln
	,2DROP ;
:,+!
	"mov ecx,[esi]" ,ln
	"add [eax],ecx" ,ln
	,2DROP ;
:,W+!
	"mov ecx,[esi]" ,ln
	"add word [eax],cx" ,ln
	,2DROP ;
:,C+!
	"mov ecx,[esi]" ,ln
	"add byte [eax],cl" ,ln
	,2DROP ;
:,!+
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	"add eax,4" ,ln
	,NIP ;
:,W!+
	"movsx ecx,word [esi]" ,ln
	"mov [eax],cx" ,ln
	"add eax,2" ,ln
	,NIP ;
:,C!+
	"movsx ecx,byte [esi]" ,ln
	"mov [eax],cl" ,ln
	"inc eax" ,ln
	,NIP ;
:,@+
	"mov ecx,[eax]" ,ln
	"add eax,4" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;
:,W@+
	"movsx ecx,word [eax]" ,ln
	"add eax,2" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;
:,C@+
	"movsx ecx,byte [eax]" ,ln
	"inc eax" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;

|:,@
|	,TOS ,TOS "mov %w,dword [%w]" ,line ;
|:,C@
|	,TOS ,TOS "movsx %w,byte [%w]" ,line ;
|:,W@
|	,TOS ,TOS "movsx %w,word [%w]" ,line ;

|:,@x1	"lea %w,[%w+%w]" ,line ;
|:,@x2	"lea %w,[%w+%w*%w]" ,line ;
|:,@x3	"lea %w,[%w+%w+%w*%w]" ,line ;

|:,!ex	"mov [%w+%w*%w],%w" ,line ;


|:,C!
|--- caso 1
	| 2 'var ! 		--> mov [var],2
	| 'var1 'var2 ! --> mov [var2],var1
	| 'cod 'var2 !  -->=mov [var2],cod
|	,NOSb ,TOS "mov byte [%w],%w" ,line ;
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov ecx,[var1];mov [ebx],ecx; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **

|:,W!
|--- caso 1
	| 2 'var ! 		--> mov [var],2
	| 'var1 'var2 ! --> mov [var2],var1
	| 'cod 'var2 !  -->=mov [var2],cod
|	,NOSw ,TOS "mov word [%w],%w" ,line ;
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **

|:,+!
|--- caso 1
	| 2 'var +! 		--> add dword[var],2
	| 'var1 'var2 +! --> add [var2],var1
	| 'cod 'var2 +!  --> add [var2],cod
|	,TOS ,NOS "add [%w],%w" ,line ;
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **

|:,W+!
|	,TOS ,NOS "add word [%w],%w" ,line ;
|:,C+!
|	,TOS ,NOS "add byte [%w],%w" ,line ;
|:,!+
|	,NOS ,TOS "mov [%w],%w" ,line ,TOS "add %w,4" ,line ;
|:,W!+
|	,NOSw ,TOS "mov word [%w],%w" ,line ,TOS "add %w,2" ,line ;
|:,C!+
|	,NOSb ,TOS "mov byte [%w],%w" ,line ,TOS "add %w,1" ,line ;
|:,@+
|	,TOS ,NOS "mov %w,[%w]" ,line ,TOS "add %w,4" ,line ;
|:,W@+
|	,TOS ,NOS "movsx %w,word [%w]" ,line ,TOS "add %w,2" ,line ;
|:,C@+
|	,TOS ,NOS "movsx %w,byte [%w]" ,line ,TOS "add %w,1" ,line ;


|-------- CONDICIONALES
:,condicion
	regTOS mem? 1? ( drop
		"cmp " ,s ,TOS ",0" ,ln ; ) drop
	"or eax,eax" ,ln
	;
:,0? ,condicion "jnz " ,s ;
:,+? ,condicion "js " ,s ;
:,-? ,condicion "jns " ,s ;
:,1? ,condicion "jz " ,s ;

:,condicion2
	regTOS cte1? 1? ( drop
    	"cmp " ,s ,NOS "," ,s ,TOS ,cr ; ) drop
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln ;

:,=? ,condicion2	"jnz " ,s ;
:,<? ,condicion2	"jge " ,s ;
:,>? ,condicion2	"jle " ,s ;
:,<=? ,condicion2	"jg " ,s ;
:,>=? ,condicion2	"jl " ,s ;
:,<>? ,condicion2	"jz " ,s ;

:,condicion3
	regTOS cte1? 1? ( drop
    	"test " ,s ,NOS "," ,s ,TOS ,cr ; ) drop
	"mov ecx,eax" ,ln ,DROP
	"test eax,ecx" ,ln ;

:,and?  ,condicion3	"jz " ,s ;
:,nand? ,condicion3	"jnz " ,s ;

|--------- Sistema
:,END		"jmp SYSEND" ,ln ;
:,DIR		"call SYSDIR" ,ln ;
:,FILE  	"call SYSFILE" ,ln ;
:,FSIZE		"call SYSFSIZE" ,ln ;
:,VOL		"call SYSVOL" ,ln ;
:,LOAD		"call SYSLOAD" ,ln ;
:,SAVE		"call SYSSAVE" ,ln ;
:,APPEND	"call SYSAPPEND" ,ln ;

:,UPDATE	"call SYSUPDATE" ,ln ;
:,MSEC		"call SYSMSEC" ,ln ;
:,TIME		"call SYSTIME" ,ln ;
:,DATE		"call SYSDATE" ,ln ;
:,RUN		"call SYSRUN" ,ln ;
:,CLS		"call SYSCLS" ,ln ;
:,REDRAW	"call SYSREDRAW" ,ln ;
:,>XFB  	"call SYSTOXFB" ,ln ;
:,XFB>  	"call SYSXFBTO" ,ln ;

:,ctesys
	regTOS cte1? 1? ( drop "; *SYSCTE*" ,s ; ) drop
	regTOS reg? 1? ( drop "mov " ,s ,TOS "," ,s ; ) drop
	,DUP "mov eax," ,s ;

:,SW 	,ctesys "XRES" ,ln ;
:,SH	,ctesys "YRES" ,ln ;
:,MEM	,ctesys "FREE_MEM" ,ln ;
:,FRAMEV	,ctesys "SYSFRAME" ,ln ;
:,XFB		,ctesys "XFB" ,ln ;

:,PAPER		"mov [SYSPAPER],eax" ,ln ,DROP ;

:,setxyopt
	3 =? ( drop
		"lea ebp,[SYSFRAME+((" ,s ,TOS "*XRES+" ,s ,NOS ")*4)]" ,ln ; )
	2 =? ( drop | TOS=cte =Y
		"mov edx," ,s ,TOS "*YRES" ,ln
		"add edx," ,s ,NOS ,cr
		"lea ebp,[SYSFRAME+edx*4]" ,ln
		; )
	drop | NOS=cte =X
	"mov edx," ,s ,TOS ,cr
	"shl edx,10" ,ln
	"add edx," ,s ,NOS ,cr
	"lea ebp,[SYSFRAME+" ,s ,NOS "+eax*4]" ,ln
	;

:,SETXY | x y --
	regTOS cte1? 2* regNOS cte1? +
	1? ( ,setxyopt ; )
	drop
	"shl eax,10" ,ln
	"add eax,[esi]" ,ln
	"lea ebp,[SYSFRAME+eax*4]" ,ln
|	"imul eax,XRES" ,ln
|	"add eax,[esi]" ,ln
|	"lea ebp,[SYSFRAME+eax*4]" ,ln
	,2DROP ;

:,PX+!	| s --
	"lea ebp,[ebp+eax*4]" ,ln
	,DROP ;
:,PX!+	| rgb --
	"mov [ebp],eax" ,ln
	"add ebp,4" ,ln
	,DROP ;
:,PX@	| -- rgb
	,DUP "mov eax,[ebp]" ,ln ;

:,XYMOUSE | -- x y
	,DUP
	"lea esi,[esi-4]" ,ln
	"mov eax,[SYSXYM]" ,ln
	"mov ecx,eax" ,ln
	"and ecx,$ffff" ,ln
	"shr eax,16" ,ln
	"mov [esi],ecx" ,ln ;
:,BMOUSE | -- c
	,DUP "mov eax,[SYSBM]" ,ln ;

:,KEY! | v --
	"mov [SYSKEY],eax" ,ln ,DROP ;
:,KEY	| -- c
	,DUP "mov eax,[SYSKEY]" ,ln ;

:,CNTJOY
	,DUP "xor eax,eax" ,ln ;
:,GETJOY ;
:,SLOAD ;
:,SPLAY  ,DROP ;
:,MLOAD ;
:,MPLAY  ,DROP ;

|----------- en asmbase.txt
:,SQRT
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,INK :,INK@ :,ALPHA
:,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE :,POLI
:,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL
:,OPENURL
:,DOCINI :,DOCEND :,DOCAT :,DOCLINE :,DOCTEXT :,DOCFONT :,DOCBIT :,DOCRES :,DOCSIZE
:,SYSTEM
	;

|---- nivel 1 - usando registros
| info adr+ valor -- adr+
#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva | 11
,; ,( ,)( ,) ,[ ,] ,EXEC	| 18
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila 38
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP	| 45
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones 52
,AND ,OR ,XOR ,NOT  								|--- logicas        56
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>> | 76
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria 85
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+	| 91
,MOVE ,MOVE> ,CMOVE ,CMOVE> | 95
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE ,APPEND		|--- memoria bloques 102
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY 							| 109
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema 114
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
#bufprim 0 | para salto?
#bufftok )( 4096
#buff> 'bufftok

:+buff | tok --
	buff> !+ 'buff> ! ;
:-buff | --
	0 'bufprim !
	'bufftok 'buff> ! ;

|--------- nivel de pila
| si pila esta en 0
| [esi+4] [esi] eax
| si esta en 1
| [esi] eax tosr
| en 2
| eax nosr tosr

:gencode | adr adri+ -- adri+ adr+
	swap @+

|dup tokenstr "; " ,s ,s 10 ,c | ** debug

	$ff and	2 << 'nivel1 + @ exec | adri+ adr+
	;

::,compwordopt | nro --
|---- carga en buffer
	-buff
	dup nro>toklen
	( 1? )( 1- swap
		@+ +buff
		swap ) 2drop
|---- optimiza
	nro>mov @ 24 << 24 >> neg | uso
	buff> 'bufftok rot analisabuf
|---- genera codigo

	nro>mov @ 24 << 24 >> neg
	inivpila
	'buffinf 4+
	'bufftok ( buff> <? )(
		swap @+ 'regact !
		gencode

|"r4asm/cod.asm" savemem | ****debug

		) 2drop
	;
