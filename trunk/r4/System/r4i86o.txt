| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt

^r4/system/r4code.txt
^r4/system/r4i86.txt
^r4/system/vtstack.txt

^r4/lib/trace.txt

|--------------------------------------------
#RegCount 5
#ra "eax" #rb "ebx" #rc "ecx" #rd "edx" #re "edi"
#reg 'ra 'rb 'rc 'rd 're

#RegMCount 8
#rm0 "mm0" #rm1 "mm1" #rm2 "mm2" #rm3 "mm3" #rm4 "mm4" #rm5 "mm5" #rm6 "mm6" #rm7 "mm7"
#regmmx rm0 rm1 rm2 rm3 rm4 rm5 rm6 rm7

:,Reg	RegCount <? ( 2 << 'reg + @ ; ) RegCount - 	| eax ebx ecx edx
		RegMCount <? ( 	2 << 'regmmx + @ ; ) RegMCount -
		1+ neg
:,Esi	0? ( "dword [esi]" ,s drop ; )
		-? ( neg "dword [esi-4*%d]" )( "dword [esi+4*%d]" )
		mprint ;
:,Esp	0? ( "dword [esp]" ,s drop ; )
		-? ( neg "dword [esp-4*%d]" )( "dword [esp+4*%d]" )
		mprint ;
:,Var	"[w%h]" mprint ;
:,Icod  "i%h" mprint ;
:,Dcod
:,Dvar	"w%h" mprint ;
:,Str	"s%h" mprint ;
:,Cte	"%d" mprint ;

#tipopila ,Reg ,Esi ,Esp ,Var ,Icod ,Dcod ,Dvar ,Str ,Cte

:,vstack | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopila + @ exec ,s ;

:,nreg ,reg ,s ;

#rab "al" #rbb "bl" #rcb "cl" #rdb "dl"
#regb 'rab 'rbb 'rcb 'rdb

:,regB	2 << 'regb + @ ; | no esta edi!!
:,esiB  0? ( "byte [esi]" ,s drop ; )
		-? ( neg "byte [esi-4*%d]" )( "byte [esi+4*%d]" )
		mprint ;
:,EspB	0? ( "byte [esp]" ,s drop ; )
		-? ( neg "byte [esp-4*%d]" )( "byte [esp+4*%d]" )
		mprint ;
:,VarB	"byte [w%h]" mprint ;

#tipopilaB ,RegB ,EsiB ,EspB ,VarB

:,vstackbyte | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaB + @ exec ,s ;

#raw "ax" #rbw "bx" #rcw "cx" #rdw "dx" #rew "di"
#regw 'raw 'rbw 'rcw 'rdw 'rdw

:,regW	2 << 'regw + @ ;
:,esiW  0? ( "word [esi]" ,s drop ; )
		-? ( neg "word [esi-4*%d]" )( "word [esi+4*%d]" )
		mprint ;
:,EspW	0? ( "word [esp]" ,s drop ; )
		-? ( neg "word [esp-4*%d]" )( "word [esp+4*%d]" )
		mprint ;
:,VarW	"word [w%h]" mprint ;

#tipopilaW ,RegW ,EsiW ,EspW ,VarW

:,vstackword | nro --
	1+ 3 << dpila> swap -
	@+ swap @ swap 2 << 'tipopilaW + @ exec ,s ;

:d.resortstack | --  convierto to eax [esi] ..
 	trace
|	d.cnt
	'dpila >r
	1- 0 ( over <? )(
|		"mov [esi-" ,s uquieto ,d "]," ,s
     	r@+ r@+ swap 2 << 'tipopilaW + @ exec ,s ,cr
		1+ ) drop
	1+ "mov eax," ,s
	r@+ r@+ swap 2 << 'tipopilaW + @ exec ,s cr
	rdrop
|	"lea esi,[esi" ,s d.f -? ( neg "-" )( "+" ) ,s 2 << ,d "]" ,ln
	;

:,TOS	0 ,vstack ;
:,NOS	1 ,vstack ;
:,NOS2	2 ,vstack ;
:,TOSbyte 0 ,vstackbyte ;
:,TOSword 0 ,vstackword ;
:,NOSbyte 1 ,vstackbyte ;
:,NOSword 1 ,vstackword ;
:,RTOS 	"edi" ;
:,, "," ,s ;


:,DUP
:,DROP
:,NIP
:,2DROP
:,3DROP
:,4DROP
:,OVER
:,PICK2
:,PICK3
:,PICK4
:,SWAP
:,ROT
:,2DUP
:,2OVER
:,2SWAP
	drop nip ;

|----------- tipo de pila por registro
|:d.pushReg	0 d.push ; | eax ebx ecx edx edi mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7
|:d.pushEsi  1 d.push ; | dword [esi+4*] ..
|:d.pushEsp	2 d.push ; | dword	[esp+4*] ..
|:d.pushVar	3 d.push ; | var	[w1]
|:d.pushIcod	4 d.push ; | dcod	'w2
|:d.pushDcod	5 d.push ; | dcod	'w2
|:d.pushDvar	6 d.push ; | dvar	w1
|:d.pushStr	7 d.push ; | str    "hola"
|:d.pushCte	8 d.push ; | cte	23
|----------- uso de registro
#regused 0  0  0  0  0  0   0   0   0   0   0   0   0
#regname ra rb rc rd re rm0 rm1 rm2 rm3 rm4 rm5 rm6 rm7

:reg.free | -- nro
	'regused
	5 ( 1? )( swap @+
		0? ( drop 'regused - 2 >> 1- nip ; )
		drop swap ) 2drop
	| si no hay uno, libera y asigna
	4 ;
|	-1 ;

:reg.set | nro --
	2 << 'regused + 1 swap ! ;

:reg.refresh
	0 0 0 0 0 'regused !+ !+ !+ !+ !
	'dpila
	( dpila> <? )(
		@+ 0? ( over @ reg.set )
		drop 4+ ) drop
	;


:TOS,
:TOSb,
:NOS,
:RTOS,
	"*" ;

|--------------------------------------------
:,AND	NOS, TOS, "and %w,%w" ,print ;
:,OR	NOS, TOS, "or %w,%w" ,print ;
:,XOR	NOS, TOS, "xor %w,%w" ,print ;
:,NOT	TOS, "not %w" ,print ;
:,+		NOS, TOS, "add %w,%w" ,print ;
:,-		TOS, NOS, "sub %w,%w" ,print ;
:,*		NOS, TOS, "imul %w,%w" ,print ;
:,/		NOS, TOS, "idiv %w,%w" ,print ;
:,<<	TOS, NOS, "sal %w,%w" ,print ;
:,>>	TOS, NOS, "sar %w,%w" ,print ;
:,NEG 	TOS, "neg %w" ,print ;
:,1+	TOS, "add %w,1" ,print ;
:,1-	TOS, "add %w,-1" ,print ;
:,4+ 	TOS, "add %w,4" ,print ;
:,2/ 	TOS, "sar %w,1" ,print ;
:,2* 	TOS, "sal %w,1" ,print ;

:,*/
	"cdq" ,ln
	NOS, "imul %w" ,print ,cr
	TOS, "idiv %w" ,print ;

:,*>>
	"cdq" ,ln
	NOS, "imul %w" ,ln
	TOSb, "shrd eax,edx,%w" ,print cr ;

:,<</
	"cdq" ,ln
    TOSb, "shld eax,edx,%w" ,print cr
	NOS, "idiv %w" ,print ;

:,/MOD
	"cdq" ,ln TOS, "idiv %w" ,print ;

:,MOD
	TOS, "idiv %w" ,print ,cr
	"mov eax,edx" ,ln ;

:,ABS
	"cdq" ,ln
	NOS, "add %w,edx" ,ln
	NOS, "xor %w,edx" ,ln ;

:,CLZ
	TOS, dup "bsr %w,%w" ,print ,cr
	TOS, "xor %w,31" ,print ;


:,>R	TOS, "push %w" ,print ;
:,>Rv	TOS, RTOS, "mov %w,%w" ,print ;

:,R>    TOS, "pop %w" ,print ;
:,R>v   ;

:,R 	RTOS, TOS, "mov %w,%w" ,print ;
:,R+    TOS, RTOS, "add [%w],%w" ,print ;

:,R!+
	TOS, RTOS, "mov [%w],%w" ,print ,cr
	RTOS, "add %w,4" ,print ;

:,R@+
	RTOS, TOS, "mov %w,[%w]" ,print ,cr
	RTOS, "add %w,4" ,print ;

:,RDROP
	;

:,@		TOS, TOS, "mov %w,dword [%w]" ,print ;
:,C@	TOS, TOS, "movsx %w,byte [%w]" ,print ;
:,W@    TOS, TOS, "movsx %w,word [%w]" ,print ;

:,@x1	"lea %w,[%w+%w]" ,print ;
:,@x2	"lea %w,[%w+%w*%w]" ,print ;
:,@x3	"lea %w,[%w+%w+%w*%w]" ,print ;

:,!ex	"mov [%w+%w*%w],%w" ,print ;

:,!		NOS, TOS, "mov [%w],%w" ,print ;
:,C!    NOS, TOS, "mov byte [%w],%w" ,print ;
:,W!    NOS, TOS, "mov word [%w],%w" ,print ;

:,+!    TOS, NOS, "add [%w],%w" ,print ;
:,W+!   TOS, NOS, "add word [%w],%w" ,print ;
:,C+!   TOS, NOS, "add byte [%w],%w" ,print ;

:,!+
	NOS, TOS, "mov [%w],%w" ,print ,cr
	TOS, "add %w,4" ,print ;
:,W!+
	"mov word [%w],%w" ,print ,cr
	TOS, "add %w,2" ,print ;
:,C!+
	"mov byte [%w],%w" ,print ,cr
	TOS, "add %w,1" ,print ;

:,@+
	"mov %w,[%w]" ,print ,cr
	TOS, "add %w,4" ,print ;

:,W@+
	"movsx %w,word [%w]" ,print ,cr
	TOS, "add %w,2" ,print ;

:,C@+
	"movsx %w,byte [%w]" ,print ,cr
	TOS, "add %w,1" ,print ;

|------------------------------------
:,0?
	TOS, dup "or %w,%w" ,print ,cr
	"jnz " ,s ;
:,+?
	TOS, dup "or %w,%w" ,print ,cr
	"js " ,s ;
:,-?
	TOS, dup "or %w,%w" ,print ,cr
	"jns " ,s ;
:,1?
	TOS, dup "or %w,%w" ,print ,cr
	"jz " ,s ;

:,=?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jnz " ,s ;
:,<?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jge " ,s ;
:,>?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jle " ,s ;
:,<=?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jg " ,s ;
:,>=?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jl " ,s ;
:,<>?
	TOS, NOS, "cmp %w,%w" ,print ,cr
	"jz " ,s ;
:,and?
	TOS, NOS, "test %w,%w" ,print ,cr
	"jz " ,s ;
:,nand?
	TOS, NOS, "test %w,%w" ,print ,cr
	"jnz " ,s ;

|--------- Sistema
:,END   	"jmp SYSEND" ,ln ;

:,DIR		"call SYSDIR" ,ln ;
:,FILE  	"call SYSFILE" ,ln ;
:,FSIZE 	"call SYSFSIZE" ,ln ;
:,VOL   	"call SYSVOL" ,ln ;
:,LOAD  	"call SYSLOAD" ,ln ;
:,SAVE  	"call SYSSAVE" ,ln ;
:,UPDATE 	"call SYSUPDATE" ,ln ;
:,MSEC		"call SYSMSEC" ,ln ;
:,TIME  	"call SYSTIME" ,ln ;
:,DATE  	"call SYSDATE" ,ln ;
:,RUN  		"call SYSRUN" ,ln ;
:,CLS       "call SYSCLS" ,ln ;
:,REDRAW    "call SYSREDRAW" ,ln ;
:,>XFB      "call SYSTOXFB" ,ln ;
:,XFB>      "call SYSXFBTO" ,ln ;

:,MEM   	"mov eax,FREE_MEM" ,ln ;
:,FRAMEV    "mov eax,SYSFRAME" ,ln ;
:,XFB       "mov eax,XFB" ,ln ;

:,SW    	"mov eax,[SYSW]" ,ln ;
:,SH    	"mov eax,[SYSH]" ,ln ;
:,KEY		"mov eax,[SYSKEY]" ,ln ;
:,BMOUSE 	"mov eax,[SYSBM]" ,ln ;

:,KEY! 		"mov [SYSKEY],eax" ,ln ;
:,PAPER		"mov [SYSPAPER],eax" ,ln ;

:,SETXY | x y --
	"imul eax,dword [SYSW]" ,ln
	"add eax,[esi]" ,ln
	"lea ebp,[SYSFRAME+eax*4]" ,ln ;

:,PX+!	| s --
	"lea ebp,[ebp+eax*4]" ,ln ;

:,PX!+	| rgb --
	"mov [ebp],eax" ,ln
	"add ebp,4" ,ln ;

:,PX@	| -- rgb
	"mov eax,[ebp]" ,ln ;

:,XYMOUSE | -- x y
	"lea esi,[esi-4]" ,ln
	"mov eax,[SYSXYM]" ,ln
	"mov ecx,eax" ,ln
	"and ecx,$ffff" ,ln
	"shr eax,16" ,ln
	"mov [esi],ecx" ,ln ;

|-- falta definir
:,CNTJOY :,GETJOY
:,SLOAD :,SPLAY :,MLOAD :,MPLAY
:,OPENURL
:,DOCINI :,DOCEND :,DOCAT :,DOCLINE :,DOCTEXT :,DOCFONT :,DOCBIT
:,DOCRES :,DOCSIZE
:,SYSTEM ;

|-----------definiciones en asmbase.txt ---------------
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,SQRT
:,INK :,INK@ :,ALPHA :,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE
:,POLI :,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL ;


#nstr 0
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:,defw :,defv :,;
	drop nip ;

:*LIT | nro
|	1 vpush ;
:*LITS | string
|	2 vpush ;
:*LITV | variable [var1]
|	3 vpush ;
:*LITDC | dir codigo word
|	4 vpush ;
:*LITDD | dir variable var1
|	5 vpush ;

:,lit
	tok>cte *LIT nip ;
:,lits
	drop nstr *LITS nip 1 'nstr +! ;

:,wor	nro>dicn "jmp " ,s ,s ,cr nip ;

:,var   nro>dicn *LITV nip ;
:,dwo   nro>dicn *LITDC nip ;
:,dva   nro>dicn *LITDD nip ;

:,( :,)( :,) :,[ :,]	| por ahora nada
	drop nip ;

:,EXEC
	TOS, "mov ecx,%w" ,print
   	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln ;
	;

:,EXECx1 | 2 >> + @ exec
	"mov ecx,[eax*4+ebx]" ,ln
	"call ecx" ,ln ;

|---- nivel 1 - usando registros
| info adr+ valor -- adr+
#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva
,; ,( ,)( ,) ,[ ,] ,EXEC
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones
,AND ,OR ,XOR ,NOT  								|--- logicas
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>>
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+
,MOVE ,MOVE> ,CMOVE ,CMOVE>
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE			|--- memoria bloques
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
0 | para salto?
#bufftok )( 4096
#buffinf )( 4096
#buff> 'bufftok

:+buff | tok info --
	buff> 4096 + !
	buff> !+ 'buff> ! ;
:-buff | --
	'bufftok 'buff> ! ;

:buffmap | exec token --
	'bufftok ( buff> <? )(
		@+ $ff and pick2 =? ( drop pick2 exec )( drop )
		) 3drop ;


|--- optimizadores
|"*v2@"		| mov r0,[r1+r2*2]
|"N<v2@"	| mov r0,[r1+r2*4(+r2)]
|"*v2!"		| mov [r1+r2*2],r0
|"N<v2!"	| mov [r1+r2*4(+r2)],r0
|"*v2"		| lea r0,[r1+r2*2]
|"N<v2"		| lea r0,[r1+r2*4(+r2)]
|"N<2@x"	| mov rx,[r1+r0*4];call rx

:calltojump | buff+4 -- buff+4
	dup 8 - @ $ff and
	8 =? ( 1 1 pick3 8 - 4096 + !+ ! ) | W; --> jmpW
	| r>; --> jmp
	| exec; -->jmp
	drop
	;

|-------------
:setctes | nro adr+ valor -- nro adr+
	$ff00 and? ( drop ; ) | cte no hace otra cosa

	drop ;

:optimiza | nro --
	nro>mov @ 24 << 24 >> neg | uso
	buff> 'bufftok rot
	tstacklisisb		| asignacion de registross

	'setctes mapregs

	'calltojump 12 buffmap	| ;
	;

|----- compila
:niv0 | adr adri+ info -- adri+ adr+
	drop swap
	,token0 ;

:niv1 | adr adri+ info -- adri+ adr+
	rot					| adri+ info adr
	@+ dup $ff and		| adri+ info adr+ valor token
	2 << 'nivel1 + @ exec | adri+ adr+
	;

::,compword | nro --
	| carga en buffer
	-buff
	dup
	nro>toklen ( 1? )( 1- swap
		@+ 0 +buff
		swap ) 2drop
	optimiza
	| genera codigo
	'buffinf
	'bufftok ( buff> <? )(
		swap @+
		0? ( niv0 )( niv1 )
		) 2drop
	;
