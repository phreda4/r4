| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt

^r4/system/r4code.txt
^r4/system/pilaestatica.txt
^r4/system/vstack2.txt

^r4/lib/trace.txt

|----- nro de str y label
#nstr | nro de string
#nlabel | nro de etiqueta

::ini.compila
	0 'nstr ! 0 'nlabel ! ;

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

:>pilac pilac> ! 4 'pilac> +! ;
:<pilac -4 'pilac> +! pilac> @ ;
:-pilac 'pilac 'pilac> ! ;

|-------------------------------------
#regact

|--- para registros de vpila vstack2
:useREG | nro --
	drop ;
:freeREG | nro --
	drop ;

:useEDX
	| ocupo EDX
	;
:freeEDX
	| libero EDX
	;
:freeEAX
   	| libero EAX
	;

:needEAX | cell --
	| si es registro a o numero salir
	| liberar y ocupar a ( puede ser xchg eax,.. )
	drop ;

:needREG | cell --
	| si es registro o numero salir
	| buscar registro libre
	| asignar si hay que resolver
	drop ;

:needWrite | cell -- ; pone en registro si no esta
	dup cellREG? 0 >=? ( 2drop ; ) drop | ya esta en registro
	newREG | cell reg
	"mov " ,s dup ,REG "," ,s
	over ,CELL ,cr
	dup reg!
	5 rot cell!	;

:needWriteM | cell -- ; registro o direccion cte
	dup cellADR? 1? ( drop needWrite ; )
	2drop ;

:needRead | cell --
	| si tiene escrituras convertir a REG
	drop ;
:needReadW | cell --
	drop ;
:needReadB | cell --
	drop ;

:needReadM | cell --
	dup cellADR? 1? ( drop needWrite ; )
	2drop ;

:cteorECX | cell --
	drop ;

:setEAX | cell --
	drop ;
:setEDX | cell --
	drop ;

|------ codigo para acceso a celdas

:,TOS	d.tos cell2str, ;
:,TOSb	d.tos cell2str, ; | b

:,NOS	d.nos cell2str, ;
:,NOSb	d.nos cell2str, ;
:,NOSw	d.nos cell2str, ;

:,NOS2	d.pk2 cell2str, ;
:,RTOS	r.tos cell2str, ;

|------------ compila CODIGO

|:nro>dicn2   8 >> 5 << 'indicepal + @ ; | nombre
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:label	"_" ,s ,h 	;
:jmp,	"jmp " ,s label ,cr ;

:toknow		dup 4 - @ ;

:,defw :,defv ; | no hay definiciones en optimizado (investigar como)
:,[ :,] ; | no hay anonimas en optimizado

:,lit	toknow tok>cte pushNRO ;
:,lits  nstr pushSTR ;
:,dwo	toknow 8 >> pushCOD ;
:,dva   toknow 8 >> pushDAT ;
:,var	toknow 8 >> pushVAR ;

:,wor
	vpila2normal
	dup @ $ff and | word ;
	12 =? ( "jmp " )( "call " )
	,s drop
	toknow nro>dicn ,s ,cr ;

:,callsys
	vpila2normal
	dup @ $ff and | word ;
	12 =? ( "jmp " )( "call " )
	,s drop ;

:,END		"jmp SYSEND" ,ln ;
:,DIR		,callsys "SYSDIR" ,ln ;
:,FILE  	,callsys "SYSFILE" ,ln ;
:,FSIZE		,callsys "SYSFSIZE" ,ln ;
:,VOL		,callsys "SYSVOL" ,ln ;
:,LOAD		,callsys "SYSLOAD" ,ln ;
:,SAVE		,callsys "SYSSAVE" ,ln ;
:,APPEND	,callsys "SYSAPPEND" ,ln ;
:,UPDATE	,callsys "SYSUPDATE" ,ln ;
:,MSEC		,callsys "SYSMSEC" ,ln ;
:,TIME		,callsys "SYSTIME" ,ln ;
:,DATE		,callsys "SYSDATE" ,ln ;
:,RUN		,callsys "SYSRUN" ,ln ;
:,CLS		,callsys "SYSCLS" ,ln ;
:,REDRAW	,callsys "SYSREDRAW" ,ln ;
:,>XFB  	,callsys "SYSTOXFB" ,ln ;
:,XFB>  	,callsys "SYSXFBTO" ,ln ;

:,;
	dup 8 - @ $ff and | word ;
	8 =? ( drop ; ) drop
	vpila2normal
	"ret" ,ln ;

|----- auxiliares bloques
:+etiqueta	| -- nueva   // y agrega a pila
	nlabel 1+ dup 'nlabel ! dup >pilac ;

:salto? | adr++ xx -- adr++ xx 0/1
	over 8 - @ $ff and
	18 >? ( 31 <? ( 1 nip ; ) ) 0 nip ;

|----------------------
:,(
	| reajusta pila
	vpPush
	+etiqueta salto? 1? ( swap label ,cr 1 )( swap label ":" ,ln 2 )
	>pilac drop ;
:,)(
	| reajusta pila
	<pilac salto? 0? ( drop	| ELSE
		vpPop vpPush
		1 =? ( <pilac +etiqueta jmp, label ":" ,ln 1 >pilac drop ; )
		)( drop	| WHILE
		vpDrop vpPush
		2 =? ( <pilac +etiqueta label ,cr >pilac 3 >pilac drop ; ) )
	drop ;
:,)
	| reajusta pila
	vpPop
	<pilac salto? 0? ( drop
			1 =? ( <pilac label ":" ,ln drop ; )
			2 =? ( <pilac jmp, drop ; )
			3 =? ( <pilac jmp, <pilac label ":" ,ln drop ; )
		)( drop
			2 =? ( <pilac label ,cr drop ; ) )
	drop ;


|--------- PILA
:,NIP   d.swap d.drop ;
:,4DROP	d.drop
:,3DROP	d.drop
:,2DROP d.drop
:,DROP	d.drop ;

:,DUP	d.dup ;
:,OVER	d.over ;
:,PICK2 d.pick2 ;
:,PICK3	d.pick3 ;
:,PICK4	d.pick4 ;

:,SWAP	d.swap ;
:,ROT	d.rot ;
:,2DUP	d.2dup ;
:,2OVER	d.2over ;
:,2SWAP	d.2swap ;

|--------------------- Exec
:,EXEC | v --
	d.tos needREG
	"or " ,s ,TOS "," ,s ,TOS ,cr
	"jz @f" ,ln
	"call " ,s ,TOS ,cr
	"@@:" ,ln ;

|------- PILAR
:,>R	d.pop r.push ;
:,R>    r.pop d.push ;
:,R		r.tos d.push ;
:,RDROP r.drop ;

:,R+
	d.tos needRead
	r.tos needWrite
	"add " ,s ,RTOS "," ,s ,TOS ,cr
|	d.tos Cellval+ r.tos Cell+ |
	d.drop ;

:,R!+
	d.tos needRead
	r.tos needWriteM
	"mov [" ,s ,RTOS "]," ,s ,TOS ,cr
	"add " ,s ,RTOS ",4" ,ln
|	4 r.tos Cell+ | add 4
	d.drop ;

:,R@+
	d.dup d.tos needReg
	r.tos needReadM
	"mov " ,s ,TOS ",[" ,s ,RTOS "]" ,ln
	"add " ,s ,RTOS ",4" ,ln
|	4 r.tos Cell+ | add 4
	;

|------- ARITMETICAS LOGICAS
:,AND
	d.tos needRead
	d.nos needWrite
	"and " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,OR
	d.tos needRead
	d.nos needWrite
	"or " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,XOR
	d.tos needRead
	d.nos needWrite
	"xor " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,+
	d.tos needRead
	d.nos needWrite
	"add " ,s ,NOS "," ,s ,TOS ,cr
|	d.tos Cell.value d.nos Cell+ | add 4
	d.drop ;
:,-
	d.tos needRead
	d.nos needWrite
	"sub " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,*
	d.tos needRead
	d.nos needWrite
	"imul " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,/
	d.tos needRead
	d.nos needWrite
	"idiv " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;
:,*/
	useEDX
	d.pk2 needEAX
	d.nos needRead
	d.tos needRead
	"cdq" ,ln
	"imul " ,s ,NOS ,cr
	"idiv " ,s ,TOS ,cr
	,2DROP
	d.tos setEAX
	freeEDX ;

:,*>>
	useEDX
	d.pk2 needEAX
	d.nos needRead
	d.tos cteorECX
	"cdq" ,ln
	"imul " ,s ,NOS2 ,cr
	"shrd eax,edx," ,s ,TOSb ,cr
	"shr edx," ,s ,TOSb ,cr
	,2DROP
	d.tos setEAX
	freeEDX ;

:,<</
	useEDX
	d.pk2 needEAX
	d.nos needRead
	d.tos cteorECX
	"cdq" ,ln
    "shld edx,eax," ,s ,TOSb ,cr
	"shl eax," ,s ,TOSb ,cr
	"idiv " ,s ,NOS ,cr
	,2DROP
	d.tos setEAX
	freeEDX ;

:,/MOD
	useEDX
	d.nos needEAX
	d.tos needRead
	"cdq" ,ln
	"idiv " ,s ,TOS ,cr
	d.nos setEAX
	d.tos setEDX ;

:,MOD
	useEDX
	d.nos needEAX
	d.tos needRead
	"cdq" ,ln
	"idiv " ,s ,TOS ,cr
	d.drop
	d.tos setEDX
	freeEAX ;

:,<<
	d.tos cteorECX
	d.nos needWrite
	"sal " ,s ,NOS "," ,s ,TOSb ,cr
	d.drop ;

:,>>
	d.tos cteorECX
	d.nos needWrite
	"sar " ,s ,NOS "," ,s ,TOSb ,cr
	d.drop ;

:,ABS
	useEDX
	d.tos needREG
	d.tos cellREG? 0? ( | EAX
		"cdq" ,ln
		)(
		"mov edx," ,s ,TOS ,cr
		"sar edx,31" ,ln
		) drop
	"add " ,s ,TOS ",edx" ,ln
	"xor " ,s ,TOS ",edx" ,ln
	freeEDX ;

:,CLZ
	d.tos needREG
	"bsr " ,s ,TOS  "," ,s ,TOS ,cr
	"xor " ,s ,TOS ",31" ,ln ;

:,NOT
	d.tos needWrite
	"not " ,s ,TOS ,cr ;

:,NEG
	d.tos needWrite
	"neg " ,s ,TOS ,cr ;

:,1+
	"add " ,s ,TOS ",1" ,ln
|	1 d.tos Cell+
	;
:,4+
	"add " ,s ,TOS ",4" ,ln
|	4 d.tos Cell+
	;
:,1-
	"sub " ,s ,TOS ",1" ,ln
|	-1 d.tos Cell+
	;
:,2/
	d.tos needWrite
	"sar " ,s ,TOS ",1" ,ln ;
:,2*
	d.tos needWrite
	"sal " ,s ,TOS ",1" ,ln ;

|------ MEMORIA
:,@
	d.tos needReadM
	"mov " ,s ,TOS ",dword [" ,s ,TOS "]" ,ln ;

:,C@
	d.tos needReadM
	"movsx " ,s ,TOS ",byte [" ,s ,TOS "]" ,ln ;

:,W@
	d.tos needReadM
	"movsx " ,s ,TOS ",word [" ,s ,TOS "]" ,ln ;

:,!
	d.tos needWriteM
	d.nos needReadM
	"mov [" ,s ,TOS "]," ,s ,NOS ,cr
	,2DROP ;
:,C!
	d.tos needWriteM
	d.nos needReadM
	"mov byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	,2DROP ;
:,W!
	d.tos needWriteM
	d.nos needReadM
	"mov word [" ,s ,TOS "]," ,s ,NOSw ,cr
	,2DROP ;

:,+!
	d.nos needReadM
	d.tos needWriteM
	"add [" ,s ,TOS "]," ,s ,NOS ,cr
	,2DROP ;

:,W+!
	d.nos needReadM
	d.tos needWriteM
	"add word [" ,s ,TOS "]," ,s ,NOSw ,cr
	,2DROP ;

:,C+!
	d.nos needReadM
	d.tos needWriteM
	"add byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	,2DROP ;

:,!+
    d.nos needRead
	d.tos needWriteM
	"mov [" ,s ,TOS "]," ,s ,NOS ,cr
	"add " ,s ,TOS ",4" ,ln
|	4 d.tos Cell+
	,NIP ;

:,W!+
    d.nos needRead
	d.tos needWriteM
	"mov word [" ,s ,TOS "]," ,s ,NOSw ,cr
	"add " ,s ,TOS ",2" ,ln
|	2 d.tos Cell+
	,NIP ;
:,C!+
    d.nos needRead
	d.tos needWriteM
	"mov byte [" ,s ,TOS "]," ,s ,NOSb ,cr
	"add " ,s ,TOS ",1" ,ln
|	1 d.tos Cell+
	,NIP ;

:,@+
	d.tos needReadM
	d.dup d.tos needReg
	"mov " ,s ,TOS ",[" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",4" ,ln ;
:,W@+
	d.tos needReadM
	d.dup d.tos needReg
	"movsx " ,s ,TOS ",word [" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",2" ,ln ;
:,C@+
	d.tos needReadM
	d.dup d.tos needReg
	"movsx " ,s ,TOS ",byte [" ,s ,NOS "]" ,ln
	"add " ,s ,NOS ",1" ,ln ;

|-------- CONDICIONALES
:,simple?
	d.tos needWrite
	d.tos cellMEM? 1? ( drop
		"cmp " ,s ,TOS ",0" ,ln ; ) drop
	"or " ,s ,TOS "," ,s ,TOS ,cr
	;

:,0? ,simple?	"jnz " ,s ;
:,+? ,simple?	"js " ,s ;
:,-? ,simple?	"jns " ,s ;
:,1? ,simple?	"jz " ,s ;

:,doble?
	d.tos needRead
	d.nos needWrite
	d.tos cellMEM? 1? ( drop
		d.nos cellMEM? 1? ( drop
			d.dup d.tos needREG
			"mov " ,s ,TOS "," ,s ,NOS ,cr
			"cmp " ,s ,NOS2 "," ,s ,TOS ,cr
			,2DROP ;
			)( drop ) )( drop )
    "cmp " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;

:,=? ,doble?	"jnz " ,s ;
:,<? ,doble?	"jge " ,s ;
:,>? ,doble?	"jle " ,s ;
:,<=? ,doble?	"jg " ,s ;
:,>=? ,doble?	"jl " ,s ;
:,<>? ,doble?	"jz " ,s ;

:,bit?
	d.tos needRead
	d.nos needWrite
	d.tos cellMEM? 1? ( drop
		d.nos cellMEM? 1? ( drop
			d.dup d.tos needREG
			"mov " ,s ,TOS "," ,s ,NOS ,cr
			"test " ,s ,NOS2 "," ,s ,TOS ,cr
			,2DROP ;
			) )( drop )
    "test " ,s ,NOS "," ,s ,TOS ,cr
	d.drop ;

:,and?  ,bit?	"jz " ,s ;
:,nand? ,bit?	"jnz " ,s ;

|--------- Sistema
|#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB" | [] | "SYSPAPER" "SYSXYM" "SYSBM" "SYSKEY"

:,SW 		0 pushCTE ;
:,SH		1 pushCTE ;
:,MEM		2 pushCTE ;
:,FRAMEV	3 pushCTE ;
:,XFB		4 pushCTE ;

:,BMOUSE | -- c
	7 pushCTE d.tos cellMEM! ;

:,KEY	| -- c
	8 pushCTE d.tos cellMEM! ;

:,PAPER | n --
	d.tos needReadM | no memoria []
	"mov [SYSPAPER]," ,s ,TOS ,cr
	d.drop ;

:,KEY! | v --
	d.tos needReadM | no memoria []
	"mov [SYSKEY]," ,s ,TOS ,cr
	d.drop ;

:setxyNOS
	d.nos needWrite | x
|	"imul " ,s ,NOS ",XRES" ,ln	| cualquier ancho
	"shl " ,s ,NOS  ",10" ,ln	| 1024 de ancho
	"lea ebp,[SYSFRAME+" ,s ,TOS "+" ,s ,NOS "*4]" ,ln ;


:,SETXY | x y --
	d.tos needRead
	d.tos cellNRO? 1? ( drop
		d.nos needRead
		d.nos cellNRO? 1? ( drop
			"lea ebp,[SYSFRAME+(" ,s ,TOS "*XRES+" ,s ,NOS ")*4]" ,ln
			)( drop
			setxyNOS )
		)( drop
		d.nos needWrite | x
|		"imul " ,s ,NOS ",XRES" ,ln	| cualquier ancho
		"shl " ,s ,NOS ",10" ,ln	| 1024 de ancho

		"add " ,s ,NOS "," ,s ,TOS ,cr
		"lea ebp,[SYSFRAME+" ,s ,NOS "*4]" ,ln
		)
	,2DROP ;

:,PX+!	| s --
	d.TOS needREG
	"lea ebp,[ebp+" ,s ,TOS "*4]" ,ln
	d.drop ;

:,PX!+	| rgb --
	d.tos needRead
	"mov [ebp]," ,s ,TOS ,cr
	"add ebp,4" ,ln
	d.drop ;

:,PX@	| -- rgb
	d.dup d.tos needREG
	"mov " ,s ,TOS ",[ebp]" ,ln ;

:,XYMOUSE | -- x y
	d.dup d.tos needREG
	d.dup d.tos needREG
	"mov " ,s ,TOS ",[SYSXYM]" ,ln
	"mov " ,s ,NOS "," ,s ,TOS ,cr
	"and " ,s ,NOS ",$ffff" ,ln
	"shr " ,s ,TOS ",16" ,ln
	;

:,CNTJOY
	,DUP "xor eax,eax" ,ln ;
:,GETJOY ;
:,SLOAD ;
:,SPLAY  ,DROP ;
:,MLOAD ;
:,MPLAY  ,DROP ;

|----------- en asmbase.txt
:,SQRT
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,INK :,INK@ :,ALPHA
:,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE :,POLI
:,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL
:,OPENURL
:,DOCINI :,DOCEND :,DOCAT :,DOCLINE :,DOCTEXT :,DOCFONT :,DOCBIT :,DOCRES :,DOCSIZE
:,SYSTEM
	;

|---- nivel 1 - usando registros
| info adr+ valor -- adr+
#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva | 11
,; ,( ,)( ,) ,[ ,] ,EXEC	| 18
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila 38
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP	| 45
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones 52
,AND ,OR ,XOR ,NOT  								|--- logicas        56
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>> | 76
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria 85
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+	| 91
,MOVE ,MOVE> ,CMOVE ,CMOVE> | 95
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE ,APPEND		|--- memoria bloques 102
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY 							| 109
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema 114
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
#bufprim 0 | para salto?
#bufftok )( 4096
#buff> 'bufftok

:+buff | tok --
	buff> !+ 'buff> ! ;
:-buff | --
	0 'bufprim !
	'bufftok 'buff> ! ;

|--------- nivel de pila
:gencode | adr adri+ -- adri+ adr+
	swap @+

dup tokenstr "; " ,s ,s 10 ,c | ** debug

	$ff and
	2 << 'nivel1 + @ exec | adri+ adr+

"; " ,s printddvtack	| ** debug

	;

::,compwordopt | nro --
|---- carga en buffer
	-buff
	dup nro>toklen
	( 1? )( 1- swap
		@+ +buff
		swap ) 2drop
|---- optimiza
	nro>mov @ 24 << 24 >> neg | uso
	buff> 'bufftok rot analisabuf
|---- genera codigo

	dup nro>mov @ 24 << 24 >> neg
	inivpila
	'buffinf 4+
	'bufftok ( buff> <? )(
		swap @+ 'regact !
		gencode
"r4asm/cod.asm" savemem | ****debug

		) 2drop
	;
