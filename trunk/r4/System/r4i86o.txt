| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt

^r4/system/r4code.txt
^r4/system/r4i86.txt
^r4/system/vtstack.txt

^r4/lib/trace.txt

#btos )( 16
#btosb )( 16
#bnos )( 16
#bnos2 )( 16

#nopt
#,TOS 'btos
#,TOSb 'btosb
#,NOS 'bnos
#,NOS2 'bnos2

#nstr 0
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

|--- por ahora nada
:,defw :,defv :,;
:,( :,)( :,) :,[ :,]
	 ;

:,lit :,lits :,dwo :,dva
	,NOS ,TOS "mov %w,%w" ,line ;

:,var
	,NOS ,TOS "mov %w,[%w]" ,line ;

:,wor
	| ajustar pila
	dup 4 - @ nro>dicn "jmp " ,s ,s ,cr nip

| --- no optimiza call pero necesita ajustar pila
| 	ajusta pila
|	dup 4 - @ nro>dicn "call " ,s ,s ,cr nip
|	reacomoda pil
	;

:,EXEC
	,TOS "mov ecx,%w" ,line
   	"or ecx,ecx" ,line
	"jz @f" ,line
	"call ecx" ,line
	"@@:" ,line ;
	;

:,EXECx1 | 2 >> + @ exec
	"mov ecx,[eax*4+ebx]" ,line
	"or ecx,ecx" ,line
	"jz @f" ,line
	"call ecx" ,line
	"@@:" ,line ;

:,DROP :,NIP :,2DROP :,3DROP :,4DROP ;

:,DUP :,OVER  :,PICK2 :,PICK3 :,PICK4
	,NOS ,TOS "mov %w,%w" ,line ;
:,2DUP
	,NOS ,TOS "mov %w,%w" ,line ;

:,SWAP
	,NOS ,TOS "xchg %w,%w" ,line ;
:,ROT
	,NOS2 ,TOS "xchg %w,%w" ,line
	,NOS ,TOS "xchg %w,%w" ,line ;
:,2SWAP
:,2OVER
	;

:,AND	,TOS ,NOS "and %w,%w" ,line ;
:,OR	,TOS ,NOS "or %w,%w" ,line ;
:,XOR	,TOS ,NOS "xor %w,%w" ,line ;
:,NOT	,TOS "not %w" ,line ;
:,+		,TOS ,NOS "add %w,%w" ,line ;
:,-		,TOS ,NOS "sub %w,%w" ,line ;
:,*		,TOS ,NOS "imul %w,%w" ,line ;
:,/		,TOS ,NOS "idiv %w,%w" ,line ;
:,<<	,TOS ,NOS "sal %w,%w" ,line ;
:,>>	,TOS ,NOS "sar %w,%w" ,line ;
:,NEG 	,TOS "neg %w" ,line ;
:,1+	,TOS "add %w,1" ,line ;
:,1-	,TOS "add %w,-1" ,line ;
:,4+ 	,TOS "add %w,4" ,line ;
:,2/ 	,TOS "sar %w,1" ,line ;
:,2* 	,TOS "sal %w,1" ,line ;

:,*/
	"cdq" ,line
	,NOS "imul %w" ,line
	,TOS "idiv %w" ,line ;

:,*>>
	"cdq" ,line
	,NOS "imul %w" ,line
	,TOSb "shrd eax,edx,%w" ,line ;

:,<</
	"cdq" ,line
    ,TOSb "shld edx,eax,%w" ,line
	,NOS "idiv %w" ,line ;

:,/MOD
	"cdq" ,line
	,TOS "idiv %w" ,line ;

:,MOD
	,TOS "idiv %w" ,line
	"mov eax,edx" ,line ;

:,ABS
	"cdq" ,line
	,NOS "add %w,edx" ,line
	,NOS "xor %w,edx" ,line ;

:,CLZ
	,TOS dup "bsr %w,%w" ,line
	,TOS "xor %w,31" ,line ;


:,>R
	nopt
	2 =? ( drop ,TOS "push %w" ,line ; )
	drop
	,TOS ,NOS "mov %w,%w" ,line ;
:,R>
	nopt
	2 =? ( drop ,TOS "pop %w" ,line ; )
	drop ;
:,R
	nopt
	2 =? ( drop ,NOS ,TOS "mov %w,%w" ,line ; ) drop
	,TOS "mov %w,[esp]" ,line ;
:,R+
	nopt
	2 =? ( drop ,TOS ,NOS "add %w,%w" ,line  ; ) drop
	,TOS "add [esp],%w" ,line ;

:,R!+
	,TOS ,NOS "mov [%w],%w" ,line
	,NOS "add %w,4" ,line ;

:,R@+
	,NOS ,TOS "mov %w,[%w]" ,line
	,NOS "add %w,4" ,line ;

:,RDROP
	nopt
	2 =? ( drop "lea esp,[esp-4]" ,line ; )
	drop ;

:,@
	,TOS ,TOS "mov %w,dword [%w]" ,line ;
:,C@
	,TOS ,TOS "movsx %w,byte [%w]" ,line ;
:,W@
	,TOS ,TOS "movsx %w,word [%w]" ,line ;

:,@x1	"lea %w,[%w+%w]" ,line ;
:,@x2	"lea %w,[%w+%w*%w]" ,line ;
:,@x3	"lea %w,[%w+%w+%w*%w]" ,line ;

:,!ex	"mov [%w+%w*%w],%w" ,line ;

:,!
|--- caso 1
	| 2 'var ! 		--> mov [var],2
	| 'var1 'var2 ! --> mov [var2],var1
	| 'cod 'var2 !  -->=mov [var2],cod
	,NOS ,TOS "mov [%w],%w" ,line ;
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **
	"push ebx" ,line  | si esta ocupado ebx
	"mov ebx,dword [%w]" ,line
	"mov [%w],%w" ,line
	"pop ebx" ,line ; | si esta ocupado ebx

:,C!
|--- caso 1
	| 2 'var ! 		--> mov [var],2
	| 'var1 'var2 ! --> mov [var2],var1
	| 'cod 'var2 !  -->=mov [var2],cod
	,NOSb ,TOS "mov byte [%w],%w" ,line
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **
	"push ebx" ,line
	"mov ebx,dword [%w]" ,line
	"mov byte [%w],bl" ,line
	"pop ebx" ,line ;

:,W!
|--- caso 1
	| 2 'var ! 		--> mov [var],2
	| 'var1 'var2 ! --> mov [var2],var1
	| 'cod 'var2 !  -->=mov [var2],cod
	,NOSw ,TOS "mov word [%w],%w" ,line
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **
	"push ebx" ,line
	,NOS "mov ebx,[%w]" ,line
	,TOS "mov word [%w],bx" ,line
	"pop ebx" ,line ;

:,+!
|--- caso 1
	| 2 'var +! 		--> add dword[var],2
	| 'var1 'var2 +! --> add [var2],var1
	| 'cod 'var2 +!  --> add [var2],cod
	,TOS ,NOS "add [%w],%w" ,line
|--- caso 2
	| var1 'var2 !	--> mov ebx,[var1];mov [var2],ebx; ** push ebx..pop ebx si ebx ocupado
	| 2 var ! 		--> mov ebx,[var ];mov [ebx],2; ** push ebx..pop ebx si ebx ocupado
	| var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	| 'var1 var2 !	-->= mov ebx,[var2];mov [ebx],var1; **
	|  'cod var2 !	-->= mov ebx,[var2];mov [ebx],cod ; **

	,NOS "mov ebx,[%w]" ,line
	,TOS "add [%w],ebx" ,line

	;

:,W+!
	,TOS ,NOS "add word [%w],%w" ,line

	,NOS "mov ebx,[%w]" ,line
	,TOS "add word [%w],bx" ,line

	;

:,C+!
	,TOS ,NOS "add byte [%w],%w" ,line

	,NOS "mov ebx,[%w]" ,line
	,TOS "add byte [%w],bl" ,line

	;

:,!+
	| si NOS es unico y es una variable
	,NOS "mov ebx,[%w]" ,line
	,NOS ,TOS "mov [%w],ebx" ,line
	,TOS "add %w,4" ,line ;
	| si NOS no tiene indireccion
	,NOS ,TOS "mov [%w],%w" ,line
	,TOS "add %w,4" ,line ;
:,W!+
	,NOSw ,TOS "mov word [%w],%w" ,line
	,TOS "add %w,2" ,line ;
:,C!+
	,NOSb ,TOS "mov byte [%w],%w" ,line
	,TOS "add %w,1" ,line ;

:,@+
	,TOS ,NOS "mov %w,[%w]" ,line
	,TOS "add %w,4" ,line ;

:,W@+
	,TOS ,NOS "movsx %w,word [%w]" ,line
	,TOS "add %w,2" ,line ;

:,C@+
	,TOS ,NOS "movsx %w,byte [%w]" ,line
	,TOS "add %w,1" ,line ;

|------------------------------------
:,0?
	,TOS dup "or %w,%w" ,line
	"jnz " ,s ;
:,+?
	,TOS dup "or %w,%w" ,line
	"js " ,s ;
:,-?
	,TOS dup "or %w,%w" ,line
	"jns " ,s ;
:,1?
	,TOS dup "or %w,%w" ,line
	"jz " ,s ;

:,=?
	,TOS ,NOS "cmp %w,%w" ,line
	"jnz " ,s ;
:,<?
	,TOS ,NOS "cmp %w,%w" ,line
	"jge " ,s ;
:,>?
	,TOS ,NOS "cmp %w,%w" ,line
	"jle " ,s ;
:,<=?
	,TOS ,NOS "cmp %w,%w" ,line
	"jg " ,s ;
:,>=?
	,TOS ,NOS "cmp %w,%w" ,line
	"jl " ,s ;
:,<>?
	,TOS ,NOS "cmp %w,%w" ,line
	"jz " ,s ;
:,and?
	,TOS ,NOS "test %w,%w" ,line
	"jz " ,s ;
:,nand?
	,TOS ,NOS "test %w,%w" ,line
	"jnz " ,s ;

|--------- Sistema
:,END   	 "jmp SYSEND" ,line ;

:,DIR		 "call SYSDIR" ,line ;
:,FILE  	 "call SYSFILE" ,line ;
:,FSIZE 	 "call SYSFSIZE" ,line ;
:,VOL   	 "call SYSVOL" ,line ;
:,LOAD  	 "call SYSLOAD" ,line ;
:,SAVE  	 "call SYSSAVE" ,line ;
:,UPDATE 	 "call SYSUPDATE" ,line ;
:,MSEC		 "call SYSMSEC" ,line ;
:,TIME  	 "call SYSTIME" ,line ;
:,DATE  	 "call SYSDATE" ,line ;
:,RUN  		 "call SYSRUN" ,line ;
:,CLS        "call SYSCLS" ,line ;
:,REDRAW     "call SYSREDRAW" ,line ;
:,>XFB       "call SYSTOXFB" ,line ;
:,XFB>       "call SYSXFBTO" ,line ;

:,MEM   	 ,TOS "mov %w,FREE_MEM" ,line ;
:,FRAMEV     ,TOS "mov %w,SYSFRAME" ,line ;
:,XFB        ,TOS "mov %w,XFB" ,line ;

:,SW    	 ,TOS "mov %w,[SYSW]" ,line ;
:,SH    	 ,TOS "mov %w,[SYSH]" ,line ;
:,KEY		 ,TOS "mov %w,[SYSKEY]" ,line ;
:,BMOUSE 	 ,TOS "mov %w,[SYSBM]" ,line ;

:,KEY! 		 "mov [SYSKEY],eax" ,line ;
:,PAPER		 "mov [SYSPAPER],eax" ,line ;

:,SETXY | x y --
	,TOS "imul %w,dword [SYSW]" ,line
	,NOS ,TOS "add %w,%w" ,line
	,TOS "lea ebp,[SYSFRAME+%w*4]" ,line ;
|	"shl eax,10" ,ln             | 1024 en X
|	"add eax,[esi]" ,ln
|	"lea ebp,[SYSFRAME+eax*4]" ,ln


:,PX+!	| s --
	,TOS "lea ebp,[ebp+%w*4]" ,line ;

:,PX!+	| rgb --
	,TOS "mov [ebp],%w" ,line
	"add ebp,4" ,line ;

:,PX@	| -- rgb
	,TOS "mov %w,[ebp]" ,line ;

:,XYMOUSE | -- x y
	"lea esi,[esi-4]" ,line
	"mov eax,[SYSXYM]" ,line
	"mov ecx,eax" ,line
	"and ecx,$ffff" ,line
	"shr eax,16" ,line
	"mov [esi],ecx" ,line ;

|-- falta definir
:,CNTJOY :,GETJOY
:,SLOAD :,SPLAY :,MLOAD :,MPLAY
:,OPENURL
:,DOCINI :,DOCEND :,DOCAT :,DOCLINE :,DOCTEXT :,DOCFONT :,DOCBIT
:,DOCRES :,DOCSIZE
:,SYSTEM ;

|-----------definiciones en asmbase.txt ---------------
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,SQRT
:,INK :,INK@ :,ALPHA :,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE
:,POLI :,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL ;

|---- nivel 1 - usando registros
| info adr+ valor -- adr+
#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva | 11
,; ,( ,)( ,) ,[ ,] ,EXEC	| 18
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila 38
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP	| 45
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones 52
,AND ,OR ,XOR ,NOT  								|--- logicas        56
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>> | 76
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria 85
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+	| 91
,MOVE ,MOVE> ,CMOVE ,CMOVE> | 95
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE			|--- memoria bloques 102
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY 							| 109
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema 114
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
0 | para salto?
#bufftok )( 4096
#buff> 'bufftok

:+buff | tok --
	buff> !+ 'buff> ! ;
:-buff | --
	'bufftok 'buff> ! ;

:buffmap | exec token --
	'bufftok ( buff> <? )(
		@+ $ff and pick2 =? ( drop pick2 exec )( drop )
		) 3drop ;

|----- compila
:niv0 | adr adri+ info -- adri+ adr+
	drop swap
	,token0 ;

| extrae TOS NOS NOS2
:extraeREGS | info -- INFO
	dup 24 >> $ff and
	dup reg>str 'btos strcpy
	reg>strb 'btosb strcpy
	dup 16 >> $ff and reg>str 'bnos strcpy
	dup 8 >> $ff and reg>str 'bnos2 strcpy
	$f and |'nopt ! | celdas directas
	;


:niv1 | adr adri+ info -- adri+ adr+
	extraeREGS		| adr adri+
	|dup $f and
	$f =? ( drop swap 4+ ; )
|	$1 =? ( "eax" 'bnos strcpy ) |** NOS no optimizado
	drop swap
	@+ $ff and		| adri+ adr+ valor token
	2 << 'nivel1 + @ exec | adri+ adr+
	;

::,compwordopt | nro --
|---- carga en buffer
	-buff
	dup nro>toklen
	( 1? )( 1- swap
		@+ +buff
		swap ) 2drop
|---- optimiza
	nro>mov @ 24 << 24 >> neg | uso
	buff> 'bufftok rot vtstack | analisis
|---- genera codigo
	'buffinf 4+
	'bufftok ( buff> <? )(
		swap @+ |dup "%h " ,print
		$3 nand? ( niv0 )( niv1 )
		) 2drop
	;
