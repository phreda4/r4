| R4i86o.txt - PHREDA 2010
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt

^r4/system/r4code.txt
^r4/system/r4i86.txt
^r4/system/vtstack.txt

^r4/lib/trace.txt

:,DUP
:,DROP
:,NIP
:,2DROP
:,3DROP
:,4DROP
:,OVER
:,PICK2
:,PICK3
:,PICK4
:,SWAP
:,ROT
:,2DUP
:,2OVER
:,2SWAP
	drop nip ;


|--------------------------------------------
:,AND	,NOS ,TOS "and %w,%w" ,print ;
:,OR	,NOS ,TOS "or %w,%w" ,print ;
:,XOR	,NOS ,TOS "xor %w,%w" ,print ;
:,NOT	,TOS "not %w" ,print ;
:,+		,NOS ,TOS "add %w,%w" ,print ;
:,-		,TOS ,NOS "sub %w,%w" ,print ;
:,*		,NOS ,TOS "imul %w,%w" ,print ;
:,/		,NOS ,TOS "idiv %w,%w" ,print ;
:,<<	,TOS ,NOS "sal %w,%w" ,print ;
:,>>	,TOS ,NOS "sar %w,%w" ,print ;
:,NEG 	,TOS "neg %w" ,print ;
:,1+	,TOS "add %w,1" ,print ;
:,1-	,TOS "add %w,-1" ,print ;
:,4+ 	,TOS "add %w,4" ,print ;
:,2/ 	,TOS "sar %w,1" ,print ;
:,2* 	,TOS "sal %w,1" ,print ;

:,*/
	"cdq" ,ln
	,NOS "imul %w" ,print ,cr
	,TOS "idiv %w" ,print ;

:,*>>
	"cdq" ,ln
	,NOS "imul %w" ,ln
	,TOSb "shrd eax,edx,%w" ,print cr ;

:,<</
	"cdq" ,ln
    ,TOSb "shld eax,edx,%w" ,print cr
	,NOS "idiv %w" ,print ;

:,/MOD
	"cdq" ,ln ,TOS "idiv %w" ,print ;

:,MOD
	,TOS "idiv %w" ,print ,cr
	"mov eax,edx" ,ln ;

:,ABS
	"cdq" ,ln
	,NOS "add %w,edx" ,ln
	,NOS "xor %w,edx" ,ln ;

:,CLZ
	,TOS dup "bsr %w,%w" ,print ,cr
	,TOS "xor %w,31" ,print ;


:,>R	,TOS "push %w" ,print ;
:,>Rv	,TOS ,NOS "mov %w,%w" ,print ;

:,R>    ,TOS "pop %w" ,print ;
:,R>v   ;

:,R 	,NOS ,TOS "mov %w,%w" ,print ;
:,R+    ,TOS ,NOS "add [%w],%w" ,print ;

:,R!+
	,TOS ,NOS "mov [%w],%w" ,print ,cr
	,NOS "add %w,4" ,print ;

:,R@+
	,NOS ,TOS "mov %w,[%w]" ,print ,cr
	,NOS "add %w,4" ,print ;

:,RDROP
	;

:,@		,TOS ,TOS "mov %w,dword [%w]" ,print ;
:,C@	,TOS ,TOS "movsx %w,byte [%w]" ,print ;
:,W@    ,TOS ,TOS "movsx %w,word [%w]" ,print ;

:,@x1	"lea %w,[%w+%w]" ,print ;
:,@x2	"lea %w,[%w+%w*%w]" ,print ;
:,@x3	"lea %w,[%w+%w+%w*%w]" ,print ;

:,!ex	"mov [%w+%w*%w],%w" ,print ;

:,!		,NOS ,TOS "mov [%w],%w" ,print ;
:,C!    ,NOS ,TOS "mov byte [%w],%w" ,print ;
:,W!    ,NOS ,TOS "mov word [%w],%w" ,print ;

:,+!    ,TOS ,NOS "add [%w],%w" ,print ;
:,W+!   ,TOS ,NOS "add word [%w],%w" ,print ;
:,C+!   ,TOS ,NOS "add byte [%w],%w" ,print ;

:,!+
	,NOS ,TOS "mov [%w],%w" ,print ,cr
	,TOS "add %w,4" ,print ;
:,W!+
	"mov word [%w],%w" ,print ,cr
	,TOS "add %w,2" ,print ;
:,C!+
	"mov byte [%w],%w" ,print ,cr
	,TOS "add %w,1" ,print ;

:,@+
	"mov %w,[%w]" ,print ,cr
	,TOS "add %w,4" ,print ;

:,W@+
	"movsx %w,word [%w]" ,print ,cr
	,TOS "add %w,2" ,print ;

:,C@+
	"movsx %w,byte [%w]" ,print ,cr
	,TOS "add %w,1" ,print ;

|------------------------------------
:,0?
	,TOS dup "or %w,%w" ,print ,cr
	"jnz " ,s ;
:,+?
	,TOS dup "or %w,%w" ,print ,cr
	"js " ,s ;
:,-?
	,TOS dup "or %w,%w" ,print ,cr
	"jns " ,s ;
:,1?
	,TOS dup "or %w,%w" ,print ,cr
	"jz " ,s ;

:,=?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jnz " ,s ;
:,<?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jge " ,s ;
:,>?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jle " ,s ;
:,<=?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jg " ,s ;
:,>=?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jl " ,s ;
:,<>?
	,TOS ,NOS "cmp %w,%w" ,print ,cr
	"jz " ,s ;
:,and?
	,TOS ,NOS "test %w,%w" ,print ,cr
	"jz " ,s ;
:,nand?
	,TOS ,NOS "test %w,%w" ,print ,cr
	"jnz " ,s ;

|--------- Sistema
:,END   	"jmp SYSEND" ,ln ;

:,DIR		"call SYSDIR" ,ln ;
:,FILE  	"call SYSFILE" ,ln ;
:,FSIZE 	"call SYSFSIZE" ,ln ;
:,VOL   	"call SYSVOL" ,ln ;
:,LOAD  	"call SYSLOAD" ,ln ;
:,SAVE  	"call SYSSAVE" ,ln ;
:,UPDATE 	"call SYSUPDATE" ,ln ;
:,MSEC		"call SYSMSEC" ,ln ;
:,TIME  	"call SYSTIME" ,ln ;
:,DATE  	"call SYSDATE" ,ln ;
:,RUN  		"call SYSRUN" ,ln ;
:,CLS       "call SYSCLS" ,ln ;
:,REDRAW    "call SYSREDRAW" ,ln ;
:,>XFB      "call SYSTOXFB" ,ln ;
:,XFB>      "call SYSXFBTO" ,ln ;

:,MEM   	"mov eax,FREE_MEM" ,ln ;
:,FRAMEV    "mov eax,SYSFRAME" ,ln ;
:,XFB       "mov eax,XFB" ,ln ;

:,SW    	"mov eax,[SYSW]" ,ln ;
:,SH    	"mov eax,[SYSH]" ,ln ;
:,KEY		"mov eax,[SYSKEY]" ,ln ;
:,BMOUSE 	"mov eax,[SYSBM]" ,ln ;

:,KEY! 		"mov [SYSKEY],eax" ,ln ;
:,PAPER		"mov [SYSPAPER],eax" ,ln ;

:,SETXY | x y --
	,TOS "imul %w,dword [SYSW]" ,ln
	,NOS ,TOS "add %w,%w" ,print ,cr
	,TOS "lea ebp,[SYSFRAME+%w*4]" ,print ,cr ;

:,PX+!	| s --
	,TOS "lea ebp,[ebp+%w*4]" ,print ,cr ;

:,PX!+	| rgb --
	,TOS "mov [ebp],%w" ,print ,cr
	"add ebp,4" ,ln ;

:,PX@	| -- rgb
	,TOS "mov %w,[ebp]" ,print ,cr ;

:,XYMOUSE | -- x y
	"lea esi,[esi-4]" ,ln
	"mov eax,[SYSXYM]" ,ln
	"mov ecx,eax" ,ln
	"and ecx,$ffff" ,ln
	"shr eax,16" ,ln
	"mov [esi],ecx" ,ln ;

|-- falta definir
:,CNTJOY :,GETJOY
:,SLOAD :,SPLAY :,MLOAD :,MPLAY
:,OPENURL
:,DOCINI :,DOCEND :,DOCAT :,DOCLINE :,DOCTEXT :,DOCFONT :,DOCBIT
:,DOCRES :,DOCSIZE
:,SYSTEM ;

|-----------definiciones en asmbase.txt ---------------
:,MOVE :,MOVE> :,CMOVE :,CMOVE>
:,SQRT
:,INK :,INK@ :,ALPHA :,OP :,CP :,LINE :,CURVE :,PLINE :,PCURVE
:,POLI :,FCOL :,FCEN :,FMAT :,SFILL :,LFILL :,RFILL :,TFILL ;


#nstr 0
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:,defw :,defv :,;
:,lit
:,lits
:,var
:,dwo
:,dva

:,( :,)( :,) :,[ :,]	| por ahora nada

	drop nip ;

:,wor	nro>dicn "jmp " ,s ,s ,cr nip ;

:,EXEC
	,TOS "mov ecx,%w" ,print
   	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln ;
	;

:,EXECx1 | 2 >> + @ exec
	"mov ecx,[eax*4+ebx]" ,ln
	"call ecx" ,ln ;

|---- nivel 1 - usando registros
| info adr+ valor -- adr+
#nivel1 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva
,; ,( ,)( ,) ,[ ,] ,EXEC
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones
,AND ,OR ,XOR ,NOT  								|--- logicas
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>>
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+
,MOVE ,MOVE> ,CMOVE ,CMOVE>
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE			|--- memoria bloques
,UPDATE
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY ,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

|------------------------------
0 | para salto?
#bufftok )( 4096
#buffinf )( 4096
#buff> 'bufftok

:+buff | tok info --
	buff> 4096 + !
	buff> !+ 'buff> ! ;
:-buff | --
	'bufftok 'buff> ! ;

:buffmap | exec token --
	'bufftok ( buff> <? )(
		@+ $ff and pick2 =? ( drop pick2 exec )( drop )
		) 3drop ;


|--- optimizadores
|"*v2@"		| mov r0,[r1+r2*2]
|"N<v2@"	| mov r0,[r1+r2*4(+r2)]
|"*v2!"		| mov [r1+r2*2],r0
|"N<v2!"	| mov [r1+r2*4(+r2)],r0
|"*v2"		| lea r0,[r1+r2*2]
|"N<v2"		| lea r0,[r1+r2*4(+r2)]
|"N<2@x"	| mov rx,[r1+r0*4];call rx

:calltojump | buff+4 -- buff+4
	dup 8 - @ $ff and
	8 =? ( 1 1 pick3 8 - 4096 + !+ ! ) | W; --> jmpW
	| r>; --> jmp
	| exec; -->jmp
	drop
	;

|-------------
:setctes | nro adr+ valor -- nro adr+
	$ff00 and? ( drop ; ) | cte no hace otra cosa

	drop ;

:optimiza | nro --
	nro>mov @ 24 << 24 >> neg | uso
	buff> 'bufftok rot
	vtstack

|	'setctes mapregs

	'calltojump 12 buffmap	| ;
	;

|----- compila
:niv0 | adr adri+ info -- adri+ adr+
	drop swap
	,token0 ;

:niv1 | adr adri+ info -- adri+ adr+
	rot					| adri+ info adr
	@+ dup $ff and		| adri+ info adr+ valor token
	2 << 'nivel1 + @ exec | adri+ adr+
	;

::,compword | nro --
	| carga en buffer
	-buff
	dup
	nro>toklen ( 1? )( 1- swap
		@+ 0 +buff
		swap ) 2drop
	optimiza
	| genera codigo
	'buffinf
	'bufftok ( buff> <? )(
		swap @+
		0? ( niv0 )( niv1 )
		) 2drop
	;
