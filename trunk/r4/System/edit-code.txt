| edit-code.txt
| PHREDA 2007
|---------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt
^r4/lib/codecolor.txt
^r4/lib/fontt.txt
^r4/lib/dlgfile.txt
^r4/lib/trace.txt

^r4/system/mem-ed.txt
^r4/system/mem-debug.txt

#pantaini>	| comienzo de pantalla
#pantafin>	| fin de pantalla
#prilinea	| primera linea visible

#cntlineas

#inisel 0 | inicio seleccion
#finsel 0 | fin seleccion

#helptxt 0

#fuente 0 |)( $3ffff	| 256k de fuente editable
#fuente> 'fuente	| cursor
#$fuente 'fuente	| fin de texto

#clipboard 0 |)( $3fff
#clipboard> |'clipboard

#undobuffer 0 |)( $ffff
#undobuffer> |'undobuffer

#pad )( 1024

|---- debug.err
#nrolin )( 32
#error )( 32

#mensaje )( 1024

:cursor>carlin | --
	1 fuente ( fuente> <? )( c@+ 13 =? ( rot 1+ rot rot ) drop ) | cuenta lineas
	swap 'ed.nlin !
	( dup c@ 13 <>? )( drop 1- ) drop | cuenta caracters a inicio de linea
	fuente> swap - 'ed.ncar ! ;

:sp|
	blanco " | " printx ;

:lins  | c --
	fuente> dup 1- $fuente over - 1+ cmove>
	1 '$fuente +!
:lover | c --
	fuente> c!+ dup 'fuente> !
	$fuente >? ( dup '$fuente ! ) drop
:0lin | --
	0 $fuente c! ;

#modo 'lins

:back
	fuente> fuente <=? ( drop ; )
	dup 1- c@ undobuffer> c!+ 'undobuffer> !
	dup 1- swap $fuente over - 1+ cmove
	-1 '$fuente +!
	-1 'fuente> +! ;

:del
	fuente>	$fuente >=? ( drop ; )
    1+ fuente <=? ( drop ; )
	9 over 1- c@ undobuffer> c!+ c!+ 'undobuffer> !
	dup 1- swap $fuente over - 1+ cmove
	-1 '$fuente +! ;

:<<13 | a -- a
	( fuente >=? )( dup c@
		13 =? ( drop ; )
		drop 1- ) ;

:>>13 | a -- a
	( $fuente <? )( dup c@
		13 =? ( drop 1- ; ) | quitar el 1-
		drop 1+ )
	drop $fuente 2 - ;

#1sel #2sel

:selecc	| agrega a la seleccion
	mshift 0? ( dup 'inisel ! 'finsel ! ; ) drop
	inisel 0? ( fuente> '1sel ! ) drop
	fuente> dup '2sel !
	1sel over <? ( swap )
	'finsel ! 'inisel !
	;

:khome
	selecc
	fuente> 1- <<13 1+ 'fuente> !
	selecc ;

:kend
	selecc
	fuente> >>13  1+ 'fuente> !
	selecc ;

:scrollup | 'fuente -- 'fuente
	pantaini> 1- <<13 1- <<13  1+ 'pantaini> !
	prilinea 1? ( 1- ) 'prilinea !
	selecc ;

:scrolldw
	pantaini> >>13 2 + 'pantaini> !
	pantafin> >>13 2 + 'pantafin> !
	1 'prilinea +!
	selecc ;

:colcur
	fuente> 1- <<13 swap - ;

:karriba
	fuente> fuente =? ( drop ; )
	selecc
	dup 1- <<13		| cur inili
	swap over - swap	| cnt cur
	dup 1- <<13			| cnt cur cura
	swap over - 		| cnt cura cur-cura
	rot min +
	'fuente> !
	selecc ;

:kabajo
	fuente> $fuente >=? ( drop ; )
	selecc
	dup 1- <<13 | cur inilinea
	over swap - swap | cnt cursor
	>>13 1+    | cnt cura
	dup 1+ >>13 1+ 	| cnt cura curb
	over -
	rot min +
	'fuente> !
	selecc ;

:kder
	selecc
	fuente> $fuente <?
	( 1+ 'fuente> ! selecc ; ) drop
	;

:kizq
	selecc
	fuente> fuente >?
	( 1- 'fuente> ! selecc ; ) drop
	;

:kpgup
	selecc
	cntlineas ( 1? )( 1- karriba ) drop
	selecc ;

:kpgdn
	selecc
	cntlineas ( 1? )( 1- kabajo ) drop
	selecc ;

|---------------   mover fuente
:e.clear
	fuente dup 'pantaini> ! dup 'fuente> ! '$fuente !
	0lin ;

|------------------------------------------------
:loadtxt | -- cargar texto
	mark
	here 'ed.nombre load 0 swap c!

	fuente dup 'pantaini> ! 'fuente> !

	|-- si no hay cr y si ln reemplazar
	0 here ( c@+ 1? )( 13 =? ( rot 1+ rot rot ) drop ) 2drop
	0? ( here ( c@+ 1? )( 10 =? ( 13 pick2 1- c! ) drop ) 2drop )
	drop
	|--quitar 10
	fuente here ( c@+ 1? )(
		10 =? ( drop swap fuente> <? ( -1 'fuente> +!  ) swap )( rot c!+ swap )
		) 2drop '$fuente ! 0lin

	ed.nlin 0 >? ( ( 1? )( 1- fuente> >>13 2 + 'fuente> ! ) ) drop
	ed.ncar +? ( dup 'fuente> +! ) drop
	0 'prilinea !
	empty
	;

:savetxt
	mark	| guarda texto
	fuente ( c@+ 1? )( 13 =? ( ,c 10 ) ,c ) 2drop
	'ed.nombre savemem
	empty
	"" 1 "debug.err" save
	ed.save
	;

|-------------------------------------------
:copysel
	inisel 0? ( drop ; )
	clipboard swap
	finsel over - pick2 over + 'clipboard> !
	cmove
	;

:borrasel
	inisel finsel $fuente finsel - 4+ cmove
	finsel inisel - neg '$fuente +!
	fuente> inisel >=? ( finsel <=? ( inisel 'fuente> !
		)(  finsel inisel - over swap - 'fuente> ! ) )  drop
	0 dup 'inisel ! 'finsel ! ;

:kdel
	inisel 0? ( del )( borrasel ) drop ;

:kback
	inisel 0? ( back )( borrasel ) drop ;


|-------------
| Edit CtrE
|-------------
:posfijo? | adr -- desde/0
	( c@+ 1? )(
		46 =? ( drop ; )
		drop )
	nip ;

:controle
	ed.save
	savetxt
	fuente> ( dup 1- c@ $ff and 32 >? )( drop 1- ) drop | busca comienzo
	dup c@
|	$23 <>? ( 2drop ; ) | no es #
	$5E <>? ( 2drop ; ) | no es ^
	drop
	dup fuente - 'ed.lugar !
	dup posfijo? 0? ( 2drop ; )

	dup "mem/inc-%w.mem" mprint
	pick2 1+ dup ( c@+ $ff and 32 >? )( drop ) drop | ini fin
	1- over -
	rot save

	"r4/system/inc-%w.txt" mprint run ;

|-------------
| Help CtrH
|-------------
:getword | adr -- adr car ; palabra que apunta el cursor
	( dup c@ 32 >? )( 0? ( ; ) drop 1- ) drop
    dup c@ 0? ( ; )
	33 <? ( drop 1+ dup c@ )
	;

:ayudainclude
	"include" 'mensaje strcpy
	;
:ayudadef
	"definicion" 'mensaje strcpy
	;
:ayudavar
	"variable" 'mensaje strcpy
	;
:ayudadir
	"direccion" 'mensaje strcpy
	;
:ayudanum
	"numero" 'mensaje strcpy
	;

:buscawhelp | str -- str l/0
	helptxt
	( 2dup =w 1? ( drop nip ; ) drop
		( c@+ 13 >? )( drop )
		0? ( nip nip ; )
		drop )
	2drop "imposible" ;

:buscacom
	fuente>
	( dup c@ $7f <>? )(
			32 <? ( 2drop ; )
			drop 1- ) 2drop
	"comentario" 'mensaje strcpy
	;

:buscacad
	fuente>
	( dup c@ $22 <>? )(
			32 <? ( 2drop ; )
			drop 1- ) 2drop
	"cadena" 'mensaje strcpy
	;


:helpcode
	"" 'mensaje strcpy
	fuente>
	dup c@ 33 <? ( 2drop ; ) drop
	getword 0? ( 2drop ; ) 		| -> inicio de palabra
	$5e =? ( 2drop ayudainclude ; )	| $5e ^  Include
	$3A =? ( 2drop ayudadef ; )		| $3a :  Definicion
	$23 =? ( 2drop ayudavar ; )		| $23 #  Variable
	$27 =? ( 2drop ayudadir ; )		| $27 ' direccion
	drop
|	dup ?numero  1? ( ayudanum ; ) drop | numero
|	dup ?fnumero  1? ( drop rot drop -1 'basen ! esnumero ; ) drop | numero
|	dup ?macro 1? ( rot drop esmacro ; ) drop		| macro
|	dup	?palabra  1? ( nip espalabra ; ) drop		| palabra
	buscawhelp 1? ( 'mensaje strcpyln ; ) drop	| en ayuda?
	drop
|	buscacad
|	buscacom
	;

:controlh | help
	helpcode ;

|-------------
:controlc | copy
	copysel ;

|-------------
:controlx | move
	controlc
	borrasel ;

|-------------
:controlv | paste
	clipboard clipboard> over - 0? ( 3drop ; ) | clip cnt
	fuente> dup pick2  + swap | clip cnt 'f+ 'f
	$fuente over - 1+ cmove>	| clip cnt
	fuente> rot rot | f clip cnt
	dup '$fuente +!
	cmove
	clipboard> clipboard - 'fuente> +!
	;

|-------------
:controlz | undo
	undobuffer>
	undobuffer =? ( drop ; )
	1- dup c@
	9 =? ( drop 1- dup c@ [ -1 'fuente> +! ; ] >r )
	lins 'undobuffer> ! ;

|-------------
:controlf | search word
	usogui
	show clrscr
		'exit >esc<
		cminiflecha ;

:controlg | go
	;

|-------------------- tecla control
:modocontrol
	32 gc.botton $0 gc.hfill
	fonti2 |font-vard-8-bold
	home cyan
	"CTRL E-Edit H-Help Z-Undo X-Cut C-Copy V-Paste"
	print redraw
	1 ( 1? )(
		30 update drop
		'controle 18 ?key | ctrl-E dit
		'controlh 35 ?key | ctrl-H elp
		'controlz 44 ?key | undo
		'controlx 45 ?key | cut
		'controlc 46 ?key | copy
		'controlv 47 ?key | paste
		'controlf 33 ?key | buscar palabra
		[ 0 nip ; ] >ctrl<

		) drop
	;

|----------------------------
:debugcode
	savetxt
|	"" 0 "debug.err" save
	"r4/system/debug-code.txt" run ;

:generacode
	savetxt
|	"" 0 "debug.err" save
	"r4/system/genera-code.txt" run ;

|--------------------
|--------------------
|--------------------
:tablascii
	32 ( 255 <? )(
		dup emit
		dup ")%d " print
		1+ ) drop
	;

:directrun
	savetxt
	"" 1 "debug.err" save
	'ed.nombre run  ;


:mkplain	"r4/system/r4plain.txt" run ;
:mkasm      "r4/system/r4fasm.txt" run ;
:mkbyte     "r4/system/r4js.txt" run ;

:hayanalisis
	dumpdebug
|	amarillo "%d includes " print cr
|	rinfo.cntloc rinfo.cntwor rojo "%d/%d palabras " print cr


	cyan cr
	sp 'mkplain dup <f10> "f10-Plain" btnt
	sp 'mkasm dup <f11> "f11-ASM" btnt
	sp 'mkbyte dup <f12> "f12-Bytec" btnt
	;

|----------------------------
:archivos
	savetxt
	'ed.nombre dlgfile
	'ed.nombre c@ 1? ( loadtxt ) drop
	;

|----------------------------
:!cntlineas
	scr 32 32 gc.vbetween
	fonti
    |font-vard-8
	home
	rows 'cntlineas !
	;

|||||||| Dibuja codigo
:drawcur | com -- com
	fuente> >? ( ; )
	dup	( fuente> <? )( c@+ 13 =? ( 2drop ; ) gemit )
	pick2 prilinea + 'ed.nlin !
	blink 1? ( 2drop ; ) drop
	modo 'lins =? ( gris )( rojo ) drop
	printcur drop
	;

:drawsel | com -- com
	inisel 0? ( drop ; ) drop
	finsel >? ( ; )
	dup ( inisel <? )( c@+ 13 =? ( 2drop ; ) gemit )
	sel>>
	( finsel <? )( c@+ 13 =? ( 2drop $77 ink sel<< ; ) gemit )
	drop $77 ink sel<< ;

:drawcode
	fonti |font-vard-8
    home gris
	0 ( cntlineas <? )(
		dup prilinea +
		ed.nlin =? ( blanco " %d " print gris )( " %d " print )
		cr
		1+ ) drop
	chome

	pantaini>
	0 ( cntlineas <? )(
		swap
		$fuente	<? (
			drawsel lf
			drawcur lf
			>>lineacolor>>
			) cr
		$fuente	=? ( cr )
		swap 1+ ) drop
	chome gris
	0 ( cntlineas <? )(
		" |" print
|		dup prilinea + getmsg
		cr
		1+ ) drop

	$fuente <? ( 1- ) 'pantafin> !

	fuente>
	( pantafin> >? )( scrolldw )
	( pantaini> <? )( scrollup )
	drop
	;



:editor
	usogui
    !cntlineas
	show clrscr
		32 gc.top $00000f gc.hfill
		font-vard-12-bold home cr2
		rojo sp 'exit "esc" btnt
		verde sp sp 'directrun dup <f1> "Run" btnt

		sp 'generacode dup <f2> "Debug" btnt
		sp 'debugcode dup <f3> "Xplore" btnt

		sp 'archivos dup <f3> "File" btnt

		verde dup " :R%d" print
		blanco "ED " print
|		gris [ end ; ] 'nombre btnt sp

		|font-vard-8-bold
		sp|
		modo 'lins =? ( "INS" verde )( "OVR" rojo ) nip printx sp|
		finsel 0? ( drop "0" )( fuente - inisel fuente - "%d..%d" ) print sp|
	 	clipboard> clipboard <>? ( "clip" print sp| ) drop
		verde ed.nlin 1+ "%d " print sp|
		'ed.nombre sp print

		32 gc.botton |$00000f gc.hfill
		fonti2 |font-vard-8-bold
		home blanco 'mensaje sp printx


|		32 gc.botton |$00000f gc.hfill
|		fonti2 |font-vard-8-bold
|		home blanco
|       fuente> 1- <<13 1+
|		drawsel lf
|		drawcur lf
|		>>lineacolor>> drop |printx

|		undobuffer 10 ( 1? )( 1- swap c@+ emit swap ) 2drop

|------------------------------
		32 26 gc.vbetween
		drawcode
|------------------------------
		chome
		hayanalisis
|------------------------------
		keypad
		[ key toasc modo exec ; ] <visible>
		'kback	<back>		'kdel	<del>
		'karriba <up>		'kabajo	<dn>
		'kder	<ri>		'kizq	<le>
		'khome	<home>		'kend	<end>
		'kpgup	<pgup>		'kpgdn	<pgdn>
		[ modo 'lins =? ( 'lover )( 'lins ) 'modo ! drop  ; ] <ins>
		[ 13 modo exec ; ] <enter>
		[ 9 modo exec ; ] <tab>
		'exit  >esc<
		'modocontrol 		<ctrl> | control

		cminiflecha ;

|---- Mantiene estado del editor

:cpy|
    swap ( c@+ $7c <>? )( rot c!+ swap ) drop 0 rot c! ;

|----
:ram
	here	| --- RAM
	dup 'helptxt !
	"doc/helpr4.txt" load 0 swap !+

	dup 'fuente !
	dup 'fuente> !
	dup '$fuente !
	$3ffff +			| 256kb texto
	dup 'clipboard !
	dup 'clipboard> !
	$3fff +				| 16KB
	dup 'undobuffer !
	dup 'undobuffer> !
	$ffff +         	| 64kb

	debug.here
|	loadincludes

	'here  ! | -- FREE
	;

:cargaestado
	mark
	here dup "debug.err" load
	empty
	over 4+ <? ( 2drop ed.load ; )
	0 swap !
	| -- here  ...vacia antes de usarla
	'ed.nombre cpy|
	'nrolin cpy|
	'nrolin ?numero 1? ( drop nip ) -1 =? ( drop ; ) 'ed.nlin !
	'nrolin cpy|
	'nrolin ?numero 1? ( drop nip )  'ed.ncar !
	'error swap ( c@+ 1? )( rot c!+ swap ) rot c! drop
	'error 'mensaje strcpy
	;

|----------- principal
:main
	ram
	-1  'ed.nlin ! 0 'ed.ncar !
	cargaestado
	loadtxt
	editor
	savetxt ;

: 0 paper
	mark
	4 main
	empty ;
