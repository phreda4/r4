| pilas virtuale (datos y retorno)
| para emulador y compilador
| PHREDA 2011
|------------------------------------
^r4/system/r4token.txt

#cntregs 1
#tokact

#regt	)( 1024	| tipo de registro
#regv	)( 1024	| valor de registro
#regi	)( 1024 | info+ de registro
#regini )( 1024 | inicio de vida
#reglen )( 1024 | largo de vida

| 1024 tokens por palabra.. si modifica cambiar inf! y tok!
#buffreg	)( 4096
#:bufftok	)( 4096 | tokens
#:buffinf	)( 4096 | info del buffer de codigo
|---- indice de dib pilas
#tostr	)( 4096
#tostr> 'tostr

|---- string de pilas
#memp )( 4096
#memp> 'memp
|---- pila de pilas
#sst )( 1024
#sst> 'sst

#prot 0 0 0 0
|--- PILA DATOS
#:dpila )( 1024 | 8bits
#:dpila> 'dpila
|--- PILA R
#:rpila )( 1024
#:rpila> 'rpila

:cntinstr tostr> 'tostr - 2 >> ;

:+memp | c --
	memp> c!+ 'memp> ! ;

:sst!	sst> !+ 'sst> ! ;
:sst@   -4 'sst> +! sst> @ ;

::d.cnt dpila dpila> - 2 >> ;
::d.pop -4 'dpila> +! dpila> @ ;
::d.pop2 -8 'dpila> +! dpila> @+ swap @ ;
::d.pop3 -12 'dpila> +! dpila> @+ swap @+ swap @ ;
::d.push dpila> !+ 'dpila> ! ;
::d.TOS dpila> 4 - @ ;
::d.NOS dpila> 8 - @ ;
::d.PK2 dpila> 12 - @ ;
::d.PK3 dpila> 16 - @ ;
::d.PK4 dpila> 20 - @ ;
::d.PK5 dpila> 24 - @ ;

|--- pila de direccion
::r.pop	-4 'rpila> +! rpila> @ ;
::r.push rpila> !+ 'rpila> ! ;
::r.cnt	rpila> 'rpila - 2 >> ;
::r.tos rpila> 4 - @ ;

:d.pushNew | valor tipo --
	cntregs dup d.push
	2 << dup >r
	'regt + !
	r 'regv + !
	tokact r 'regini + !
	0 r> 'reglen + !
	1 'cntregs +!
	;

:r.pushNew | valor tipo --
	cntregs dup r.push
	2 << dup >r
	'regt + !
	r 'regv + !
	tokact r 'regini + !
	0 r> 'reglen + !
	1 'cntregs +! ;

|--- registros
| |par|costo|flags|Tipo|
|   8    8    12    4
| tipos-- optimizables
| flags
|	$20 | es dir codigo
|	$40 | temino uso
|	$80 | es dir dato (indirecciona)
|  $100 | usa eax,edx (si no son ctes)
|  $200 | usa ecx (si no es cte)
| $8000 | es cte optimizable  **
| $4000 | es reg asignado???
| costo: cantidad de operaciones(lecturas no se cuentan)
| par: cuando es copia, accede al registro origen
|-----------

:d.pushCTE	0 d.pushNew ;	|	0 cte 			33
:d.pushCTEN	1 d.pushNew ;	|   1 cteNombre     RESX
:d.pushCPY	2 d.pushNew ;	|	2 cpy           dup
:d.pushSTR	3 d.pushNew ;	|	3 str           "hola"
:d.pushDCOD	4 d.pushNew ;	|	4 'cod          'func
:d.pushDVAR	5 d.pushNew ;	|	5 'dat          'var
:d.pushVAR	6 d.pushNew ;	|	6 dat           var
|--no optimizables
:d.pushVNUM	7 d.pushNew ;	|	7 varnum        ---all
:d.pushVSTR	8 d.pushNew ;	|	8 varstr        ""+
:d.pushVCOD	9 d.pushNew ;	|	9 varcod        'cod+
:d.pushVDAT	10 d.pushNew ;	|  10 vardat        'dat+
:d.pushSTACK 11 d.pushNew ;	|  11 stack         [esi+] .. eax


|-----------------------------------------
|--- buffinf
| | TOS | NOS | NOS2 | Tipo | Compila |
|    8     8     8      4       4
| tipo
|	1 usa tos
|	2 usa tos+nos
|	3 usa tos+nos+nos2
|	4 usa tos+pk2
|	5 usa tos+pk3
|	6 usa tos+pk4
|	7 usa tos+pk5
|	8 usa tos+rtos
|	9 usa rtos
|   d ;
|	e call
| 	f lit, lits
| compila
| 	f NO GENERA CODIGO
|	7 tos+nos+nos2 se optimiza
| 	3 tos+nos se optimiza
|	1 tos se optimiza
|	0 NO OPTIMIZADO

|--- llena buffinf
:inf! tostr> 4096 - ! ; | OJO ctes para otros buff
:tok! tostr> 8192 - ! ;
:bre! tostr> 12288 - ! ;

:usot	d.tos 24 << $10 or inf! ;
:usotn  d.tos 24 << d.nos 16 << or $20 or inf! ;
:usotn2 d.tos 24 << d.nos 16 << or d.pk2 8 << or $30 or inf! ;
:uso2   d.tos 24 << d.pk2 8 << or $40 or inf! ;
:uso3   d.tos 24 << d.pk3 8 << or $50 or inf! ;
:uso4   d.tos 24 << d.pk4 8 << or $60 or inf! ;
:uso5   d.tos 24 << d.pk5 8 << or $70 or inf! ;
:usort  d.tos 24 << r.tos 8 << or $80 or inf! ;
:usorv	r.tos 8 << $90 or inf! ;
:opt;	$d0 inf! ;
:optwor 8 << $e0 or inf! ;
:opti	d.tos 24 << $f0 or inf! ;

|---- marcas de registros
:reg+1 | --
	d.TOS 2 << 'regt + dup
	@ dup $ff00ffff and swap
	$ff0000 and $10000 + or
	swap ! ;

:regr+1
	d.TOS 2 << 'regt + dup
	@ dup $ffffff and swap
	$ff000000 and $1000000 + or
	swap ! ;

:memreg | es dir dato
	d.TOS 2 << 'regt + dup @ $80 or swap ! ;
:codreg | es dir codigo
	d.TOS 2 << 'regt + dup @ $20 or swap ! ;
:usoadx | usa eax,edx
	d.TOS 2 << 'regt + dup @ $100 or swap ! ;
:usoecx | usa ecx
	d.TOS 2 << 'regt + dup @ $200 or swap ! ;

:endreg | temino uso
	d.TOS 2 << dup
	'regt + dup @ $40 or swap !
	tokact swap 'reglen + !
	;


|--- pila D
:vdrop	endreg -4 'dpila> +! ;
:v4drop vdrop
:v3drop vdrop
:v2drop vdrop vdrop ;
:vswap	usotn dpila> 8 - >r r@+ r@+ r> 8 - !+ ! ;
:vnip	vswap vdrop ;
:vrot	usotn2 dpila> 12 - >r r@+ r@+ r@+ swap r> 12 - !+ !+ ! ;
:v2swap	dpila> 16 - >r r@+ r@+ swap r@+ r@+ swap r> 32 - !+ !+ !+ ! ;
:vdup	d.TOS d.pushCPY usotn ;
:vover	d.NOS d.pushCPY uso2 ;
:vpk2	d.PK2 d.pushCPY uso3 ; |PICK2  abc -- abca
:vpk3	d.PK3 d.pushCPY uso4 ; |PICK3  abcd -- abcda
:vpk4	d.PK4 d.pushCPY uso5 ; |PICK4  abcde -- abcdea
:v2dup	vover vover ;	|2DUP   ab -- abab
:v2over	vpk3 vpk3 ; |2OVER  abcd -- abcdab

|--- aritmeticas y logicas
:op1a1	usot reg+1 ; | neg not 1+ 4+ 1- 2/ ..
:vop1a1	usot reg+1 usoadx ; | abs  clz  ..
:op2a1	usotn regr+1 vdrop reg+1 ; | + - * and or xor ..
:vop2a1	usotn regr+1 vdrop reg+1 usoadx ; | / mod
:xop2a1	usotn usoecx regr+1 vdrop reg+1 ; | << >>
:op3a1	usotn2 regr+1 vdrop regr+1 vdrop reg+1 usoadx ; | */
:vop3a1	usotn2 regr+1 vdrop regr+1 vdrop reg+1 usoadx usoecx ; | *>> /<<
:op2a2	usotn reg+1 vswap reg+1 vswap usoadx ; | mod/

|--- pila R
:v>r	d.pop r.push usort ;
:vr>	usort r.pop d.push ;
:vr		r.tos d.pushCPY usort ; |R      -- a R: a -- a
:vr+	usort vr> reg+1 v>r regr+1 vdrop ; |R+    a -- R: b -- c
:vr@+	vr> memreg reg+1 dup v>r d.pushVar usort ; |R@+    -- a R: b -- c
:vr!+	usort vr> memreg reg+1 v>r regr+1 vdrop ; |R!+   a -- R: b -- c
:vrdrop	r.pop drop usorv ;

|-------------------------------
::mappila | exe --
	'dpila ( dpila> <? )( @+ pick2 exec ) 2drop ;

::mappilar | exe --
	'rpila ( rpila> <? )( @+ pick2 exec ) 2drop ;

:stacks>str | --
	memp> tostr> !+ 'tostr> ! | suma a los buffer
	[ +memp ; ] mappila 0 +memp
	[ +memp ; ] mappilar 0 +memp
	;

:str>stacks | "" --
	'dpila 'dpila> !
	( c@+ 1? )( d.push ) drop
	'rpila 'rpila> !
	( c@+ 1? )( r.push ) 2drop
	;

:stacknow | -- now
	tostr> 4 - @ ; | stack actual

|----------------------------
:value
	dup 4 - @ 8 >> ;

:litN	| 12
	value cte + @
	d.pushCTE
	opti
	;
:litS	| "kk"
	value cte + strusestack ( 1? )( 1- vdrop ) 2drop | correccion por "%d"
	value d.pushSTR opti ;

:litV	| vv
	value d.pushVAR opti ;
:litAV	| 'v
	value d.pushDVAR opti ;
:litAW	| 'w
	value d.pushDCOD opti ;

:callW	| ww
	dup 4 - @ 8 >> nro>mov @

|
|	dup 24 >> | no se propaga es flujo de ejecucion
|	-? ( ( 1? )( 1+ vrdrop ) drop )( ( 1? )( 1- newRegR ) drop ) 	|	'deltaR +!
|

	8 << 24 >> |dD
	dup optwor	| ****
	0? ( drop ; )
	| control de tipos
	-? ( ( 1? )( 1+ vdrop ) drop )( ( 1? )( 1- 0 d.pushVNUM ) drop ) 	|'deltaD +!
	;

|------------------------------------


:exexec 	| exec
	usot codreg vdrop


|**** MAL
	dup 4 - @ 8 >> | NO

|******| averiguar palabra en pila !!!
	d.TOS 2 <<
	dup 'regt + @ 4 <>? ( trace "exec sin direccion de codigo" ) drop
	'regv + @
|******

	nro>mov @ 8 << 24 >> | dD
	0? ( drop ; )
	-? ( ( 1? )( 1+ vdrop ) drop )( ( 1? )( 1- 0 d.pushVNUM ) drop )
	;

:c0 | 0? 1? ..
	regr+1 usot ;
:c1 | =? <? ..
	usotn regr+1 vdrop regr+1 ;
:1@	| @ c@ w@
	usot memreg reg+1 ;
:1!	| ! c! w!
	usotn memreg regr+1 vdrop regr+1 vdrop ;
:2@	| @+ c@+ w@+
	memreg reg+1
	d.tos d.pushVNUM usotn ;
:2!	| !+ c!+ w!+
	usotn memreg reg+1 vnip ;
:2+! | +! c+! w+!
	usotn memreg regr+1 vdrop regr+1 vdrop ;

:+mem 	0 d.pushVNUM ;

:v3v 0 0 d.pushNew
:v2v 0 0 d.pushNew
:v1v 0 0 d.pushNew  ;

|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(	|(
	stacknow sst!
	salto? sst!
	;

:es)(	|)(
	salto? 1? ( sst@ 2drop stacknow sst! 3 sst! ; ) | while
	sst@ 2drop
	sst@ dup sst!
	stacknow sst! 2 sst!
	str>stacks
	;

:tipo0 | (  ? ) o (    ) ; UNTIL REPEAT
	sst@ drop ;

:tipo1 | ?( )	; IF
	;? 1? ( sst@ str>stacks drop ; )
	sst@ 2drop ;

:tipo2 | ?( )( ) ; IFELSE
	;? 1? ( sst@ sst@ str>stacks 2drop ; )
	sst@ str>stacks sst@ 2drop ;

:es)	|)
	sst@
	0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	sst@ str>stacks	| ( ? )(  ) ; WHILE
	sst@ 2drop
	;

|--- anonimas
:es[	|[
	stacknow sst! ;

:es]	|]
	sst@ str>stacks
	0 d.pushDCod ;

:es;
	opt; ;

#acctoken
0 0 0	|0 1 :,,defc 2 :,,defv
litN	|3 :,,litd | --	n numero decimal
litN	|4 :,,lith | --	n numero hexa
litN	|5 :,,litb | -- n numero binario
litN	|6 :,,litf | --	n numero punto fijo
litS	|7 :,,lits | --	s string
callW	|8 :,,word 	| ..--..  word <---- debe ser calculado
litV	|9 :,,var 	| -- v var
litAW	|10:,,dword | -- dw dir word
litAV	|11:,,dvar 	| -- dv dir var
es;		|; | fin de palabra (12)
es(		|(
es)(	|)(
es)		|)
es[		|[
es]		|]
exexec	|EXEC  x/0 --    TOS es dcod (18)
c0		|0? a -- a
c0		|+? a -- a
c0		|-? a -- a
c0		|1? a -- a
c1		|=?  ab -- a
c1		|<?  ab -- a
c1		|>?  ab -- a
c1		|<=? ab -- a
c1		|>=? ab -- a
c1		|<>? ab -- a
c1		|AND?  ab -- a
c1		|NAND? ab -- a
vdup	|DUP    a -- aa
vdrop 	|DROP  a --
vover 	|OVER   ab -- aba
vpk2 	|PICK2  abc -- abca
vpk3 	|PICK3  abcd -- abcda
vpk4 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
v2dup	|2DUP   ab -- abab
v2drop	|2DROP ab --
v3drop	|3DROP abc --
v4drop	|4DROP abcd --
v2over	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab

v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
vrdrop	|RDROP	R: a --

op2a1	|53 AND	ab -- c
op2a1	|OR    ab -- c
op2a1	|XOR   ab -- c
op1a1	|NOT    a -- b
op2a1	|+		ab -- c
op2a1	|-     ab -- c
op2a1	|*     ab -- c
vop2a1	|/     ab -- c		usa eax,edx
op3a1	|*/    abc -- d     usa eax,edx
vop3a1	|*>>   abc -- d     usa eax,edx, ecx
op2a2	|/MOD   ab -- cd    usa eax,edx
vop2a1	|MOD    ab -- c     usa eax,edx
vop1a1	|ABS    a -- b      usa eax,edx
op1a1	|SQRT	a -- b
vop1a1	|CLZ	a -- b     usa eax,edx
vop3a1	|<</	abc -- d   usa eax,edx, ecx
op1a1	|NEG    a -- b
op1a1	|1+     a -- b
op1a1	|4+     a -- b
op1a1	|1-     a -- b
op1a1	|2/     a -- b
op1a1	|2*     a -- b
xop2a1	|<<    ab -- c     usa ecx
xop2a1	|76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v3drop	|MOVE  abc --       a,b es ddat
v3drop	|MOVE> abc --		a,b es ddat
v3drop	|CMOVE abc --		a,b es ddat
v3drop	|CMOVE> abc --		a,b es ddat

+mem |MEM	-- a		a es ddat
vdrop	|DIR    a --
0	|FILE   a -- b
0	|FSIZE  a -- b
0	|VOL    a -- b
vdrop	|LOAD   ab -- c
v3drop	|SAVE   abc --
v3drop	|APPEND   abc --

0	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vdrop	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vdrop	|RUN    a --
v1v	|SW      -- a
v1v	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
v2drop	|SETXY  ab --
vdrop	|PX+!   a --
vdrop	|PX!+   a --
v1v	|PX@     -- a                                         

v1v	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vdrop	|PAPER  a --
vdrop	|INK    a --
v1v		|INK@    -- a
vdrop	|ALPHA  a --
v2drop	|OP     ab --
v2drop	|CP     ab --
v2drop	|LINE   ab --
v2drop	|CURVE  ab --
v2drop	|PLINE  ab --
v2drop	|PCURVE ab --
0		|POLI    --
v2drop	|FCOL   ab --
v2drop	|FCEN   ab --
v2drop	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vdrop	|TFILL  a --

0	|SLOAD   a -- a
vdrop	|SPLAY  a --
0	|MLOAD   a -- a
vdrop	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM

|----------------- para generar codigo
:value	over 1024 + @ ;

|--	0 cte 			33
:mt0 value 99 >? ( "$%h" )( -9999999 <? ( "$%h" )( "%d" ) )  mprint ;
|--	1 cteNombre     RESX
:mt1 ;
|--	2 cpy           dup
:mt2 value "cpy(%h)" mprint ;
|--	3 str           "hola"
:mt3 value cte + "s%h" mprint ;
|--	4 'cod          'func
:mt4 value "w%h" mprint ;
|--	5 'dat          'var
:mt5 value "w%h" mprint ;
|--	6 dat           var
:mt6 value "[w%h]" mprint ;

#ra "eax" #rb "ebx" #rc "ecx" #rd "edx" #re "edi" #rf "ebp"
#reg 'ra 'rb 'rc 'rd 're 'rf

:espila
	neg 1- "[esi+%d*4]" mprint ;
:mt7 | Reg
	value -? ( espila ; )
	2 << 'reg + @ ;

#tiposrm mt0 mt1 mt2 mt3 mt4 mt5 mt6 mt7

::reg>str | nro -- ""
	2 << 'regt + dup @
	dup $7 and 2 << 'tiposrm + @ exec
	nip nip ;

#tiposrb mt0 mt1 mt2 mt3 mt4 mt5 mt6 mt7

::reg>strb | nro -- ""
	2 << 'regt + dup @
	dup $7 and 2 << 'tiposrb + @ exec
	nip nip ;

#tiposrw mt0 mt1 mt2 mt3 mt4 mt5 mt6 mt7

::reg>strw | nro -- ""
	2 << 'regt + dup @
	dup $7 and 2 << 'tiposrw + @ exec
	nip nip ;


|------------
:gettok | buff -- tok
	'buffinf - 'bufftok + @ $ff and ;
:getinf | atok -- buffinf
	'bufftok - 'buffinf + @ ;

:,printcnt | "" cnt -
	( swap c@+ 1? )( ,c swap 1- 0? ( 2drop ; ) ) 2drop
	( 1? )( 1- ,sp ) drop ;


:u0
	drop ;
:u1
	24 >> $ff and " T=" ,s reg>str ,s ;
:u2
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " N=" ,s reg>str ,s ;
:u3
	dup 24 >> $ff and " T=" ,s reg>str ,s
	dup 16 >> $ff and " N=" ,s reg>str ,s
	8 >> $ff and " S=" ,s reg>str ,s  ;
:u4
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " P2=" ,s reg>str ,s ;
:u5
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " P3=" ,s reg>str ,s ;
:u6
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " P4=" ,s reg>str ,s ;
:u7
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " P5=" ,s reg>str ,s ;
:u8
	dup 24 >> $ff and " T=" ,s reg>str ,s
	16 >> $ff and " R=" ,s reg>str ,s ;
:u9
	24 >> $ff and " R=" ,s reg>str ,s ;
:ua
:ub
:uc
:ud
:ue
	24 >> $ff and " ** T=" ,s reg>str ,s ;
:uf drop ;

#tiposu u0 u1 u2 u3 u4 u5 u6 u7 u8 u9 ua ub uc ud ue uf
:,printuso
	dup 4 - getinf dup " %h " mprint 8 ,printcnt
	dup $f and 0? ( 2drop ; ) drop
	dup 4 >> $f and 2 << 'tiposu + @ exec ;

:,printstack | "" --
	( c@+ 1? )( 64 + ,c ) drop
	c@+ 0? ( 2drop ; )
	":" ,s ( 64 + ,c c@+ 0? )
	2drop ;

:,print1tok
	dup $ff and 3 <? ( 2drop ; ) drop	| quita :#
	tokenstr 16 ,printcnt
	"| " ,s swap @+ ,printstack swap
	" ; " ,s
	,printuso
	,cr ;

::,printAnaSTACK
	'tostr 4+ 'bufftok cntinstr
	( 1? )( >r @+ ,print1tok r> 1- )
	3drop ;

::oregdumpi | nro --
	1+ 2 <<
	dup 'buffinf +
	swap 'tostr +
	( tostr> <? )(
		4+ swap @+ "%h " print
		dup 4 - gettok "%h " print
		swap
		cr )
	2drop ;

|--- registros
:t0 "Cte " print ;
:t1 "Str " print value cte + "%s" print ;
:t2 "Var " print value nro>nom "%w" print ;
:t3 "'Va " print value nro>nom "'%w" print ;
:t4 "'Co " print value nro>nom "'%w" print ;
:t5 "Cpy " print ; |value 64 + "%k" print ;
:t6 "Ext " print value "%d" print ;
:t7 "Reg " print value "%d" print ;
:t8 "Reg " print value "%d" print ;
:t9 "Reg " print value "%d" print ;
:t10 "Reg " print value "%d" print ;

#tiposr t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10

#tiponm "cte" "cteN" "cpy" "str" "'cod" "'var" "var" "any+" "str+" "cod+" "dat+" "stack"

:,cadaregistro
	| estado del registro
	| 0 -- en pila
	| 1 -- es cte
	| 2 -- es registro
	| 3 -- es memoria
|	over 2044 + @ " %d " ,print

	pick2 64 + "| %k =" ,print
	'tiponm over $f and ( 1? )( 1- swap >>0 swap ) drop
	,s ,sp
	$8000 and? ( "**" ,print ) | flag cte
	$4000 and? ( "RR" ,print ) | flag cte
	$80 and? ( "M" ,print ) | como memoria
	$40 nand? ( "S" ,print ) | no endreg (es salida)
	$20 and? ( "C" ,print ) | codreg

	$100 and? ( " eaxedx" ,print ) | usoadx
	$200 and? ( " ecx" ,print ) | usoecx | si no es cte

	dup 16 >> $ff and 1? ( "<%d>" ,print )( drop ) | cnt de escrituras
	dup 24 >> $ff and 1? ( "[%d]" ,print )( drop ) | cnt de lecturas
|	24 >> " %h" ,print
	drop
	dup 3068 + @ " %d-" ,print
	dup 4092 + @ "%d " ,print
	,cr ;

::,printAnaREGS
	cntregs 1- "|-- %d Registros --" ,print ,cr
	'regt 4+
	1 ( cntregs <? )(
		swap @+ ,cadaregistro
		swap 1+ ) 2drop
	"|-----------------" ,s ,cr ;

|--------- registros
:mapregs | 'v --
	'regt 4+ 1 ( cntregs <? )(
		swap
		@+ pick3 exec
		swap 1+ )
	3drop ;

:cadaregistro
	blanco
	pick2 dup 64 + swap "%d.%k=" print

	'tiponm over $f and ( 1? )( 1- swap >>0 swap ) drop
	print sp

|	dup $7 and 2 << 'tiposr + @ exec
|	dup " %h " print
	sp
	$8000 and? ( "**" print ) | flag cte
	$4000 and? ( "RR" print ) | flag cte
	$80 and? ( "M" print ) | como memoria
	$40 nand? ( "S" print ) | no endreg (es salida)
	$20 and? ( "C" print ) | codreg
	$100 and? ( "a" print ) | usoadx
	$200 and? ( "c" print ) | usoecx | si no es cte
	dup 16 >> $ff and 1? ( "<%d>" print )( drop )

|	24 >> " %h" print
	drop
	gris
|	over reg>str sp print

|	dup 2044 + @ " %h" print
	cr
	allowchome ;

::dumpregs | --
	'cadaregistro mapregs ;

|----- pirnt pilas
:printstackolor | "" --
	( c@+ 1? )(
		dup 2 << 'regt + @ | info reg
		$8000 and? ( verde )( rojo )
		$4000 and? ( blanco ) drop
		64 + emit
		) drop
	c@+ 0? ( 2drop ; )
	blanco ":" print
	( 	dup 2 << 'regt + @ | info reg
		$8000 and? ( verde )( rojo )
		$4000 and? ( blanco ) drop
		64 + emit
		c@+ 0? )
	2drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr +
	( tostr> <? )(
		@+ sp printstackolor sp
		cr )
	drop ;

|--------- analisis del buffer
#usoreg
#regactual

:clearinforegs
	drop 0 over 2044 + ! ;

:ctessincosto | nro reg -- nro
	dup 16 >> $ff and
	1? ( 2drop ; ) | tiene costo
	drop
	dup $f and
|	5 =? ( 2drop ; ) | cpy
	7 =? ( 2drop ; )  | reg
	drop
	$40 nand? ( drop ; ) | no termino
	$8000 or over 4 - ! | marca como cte

	7 over 2044 + !	| marca
	;

:ctessincosto | nro reg -- nro
	dup 16 >> $ff and
	1? ( 2drop ; ) | tiene costo
	drop
	-2 pick2 2044 + !
	$40 nand? ( drop ; ) | no termino

	$8000 or over 4 - ! | marca como cte
	over 2 << 'reglen + @
	pick2 2 << 'regini + @ -
	1 =? ( 1 )( -1 ) nip
	over 2044 + !	| marca
	;

:eaxobligatorio | dir reg -- dir
	drop
	;
:ecxobligatorio | dir reg -- dir
	drop
	;

:asignoregistron | dir reg -- dir
	drop
	;

:AsignoReg
	0 'usoreg !
	'clearinforegs mapregs
	'ctessincosto mapregs
	'eaxobligatorio mapregs
	'ecxobligatorio mapregs


	1 'regactual !

	'asignoregistron mapregs

	;

|-----------------------
:setOPT1 | adr --
	dup @ $fffffff0 and 1 or swap !	;
:setOPT2 | adr --
	dup @ $fffffff0 and 2 or swap !	;

:setNO | adr --
	dup @ $fffffff0 and $f or swap ! ;

|--- tail call
:anteriorescall=>jump | 'i+ info -- 'i+
	over 8 - @ $ff and	| anterior
	$e0 <>? ( 2drop ; ) | no es call
	2drop
	dup 8 - setOPT1
	dup 4 - setNO
	;

|--- uso cte imm
:reg>cte
	2 << 'regt + @ | info reg
	$8000 and ;

:cteusoinm | *** cambiar por 1 uso de lectura
	over gettok | siguiente token
	18 <? ( 2drop ; ) | condicionales
	30 >? ( 53 <? ( 2drop ; ) ) | mov pila y r
	92 >? ( 2drop ; )
	2drop
	dup 4 - setNO
	dup setOPT1
	;

:marcatoken | 'info -- 'info+
	@+ $ff and
	$d0 =? ( anteriorescall=>jump ; )	| es call+;
|	$f0 =? ( cteusoinm ; )				| es LIT+op
	drop
	;

|----- recorre 1
:vtini
	'dpila 'dpila> !
	'rpila 'rpila> !
	'tostr 'tostr> !
	'memp 'memp> !
	'sst 'sst> !
	1 'cntregs !
	-1 'tokact !
	;

::sregtok | adr -- adr+
	@+ dup tok!	| guarda token
	0 inf!	| limpia info
	0 bre!	| limpia uso reg
	$ff and
	3 <? ( drop ; )	| quita :#
	2 << 'acctoken + @ exec
	1 'tokact +!
	stacks>str
	;

|-------- analizadores

::makeanawordex | nro --
	vtini
	dup nro>udr 2drop |usadas
	neg ( 1? )( 1- dup neg d.pushSTACK ) drop | como inicio
	0 'tokact !
	stacks>str
| PARTE 1 - Crea registros
	dup nro>toklen
	( 1? )( 1- swap sregtok swap  )
	2drop
| PARTE 2 - Asignacion de registros
	AsignoReg
| PARTE 3 - Marca
	'buffinf cntinstr
	( 1? )( 1- >r marcatoken r> )
	3drop
	;

::analisabuf | fin ini used --
	vtini
	( 1? )( 1- dup neg d.pushSTACK ) drop |usadas
	stacks>str
| PARTE 1 - Crea registros
	( over <? )( sregtok ) 2drop
| PARTE 2 - Asignacion de registros
	AsignoReg
| PARTE 3 - Marca
	'buffinf cntinstr
	( 1? )( 1- >r marcatoken r> )
	2drop ;

