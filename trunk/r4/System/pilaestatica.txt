| pilas virtuale (datos y retorno)
| para emulador y compilador
| PHREDA 2011
|------------------------------------
^r4/system/r4token.txt
|^r4/system/vstack2.txt

#cntregs 1
#tokact
#usedreg | cantidad de registros usados por palabra
#lastp | p/calcular registros disjuntos

#regt	)( 1024	| tipo de registro
#regv	)( 1024	| valor de registro
#regi	)( 1024 | info+ de registro
#regini )( 1024 | inicio de vida
#reglen )( 1024 | largo de vida
#regagr )( 1024 | grupo ( 0 solo.. 1..nro grupo)

| 1024 tokens por palabra.. si modifica cambiar inf! y tok!
#:bufftok	)( 4096 | tokens
#:buffinf	)( 4096 | info del buffer de codigo
|---- indice de dib pilas
#tostr	)( 4096
#tostr> 'tostr

|---- string de pilas
#memp )( 4096
#memp> 'memp
|---- pila de pilas
#sst )( 1024
#sst> 'sst

#prot 0 0 0 0
|--- PILA DATOS
#:dpila )( 1024 | 8bits
#:dpila> 'dpila
|--- PILA R
#:rpila )( 1024
#:rpila> 'rpila

:cntinstr tostr> 'tostr - 2 >> ;

:+memp | c --
	memp> c!+ 'memp> ! ;

:sst!	sst> !+ 'sst> ! ;
:sst@   -4 'sst> +! sst> @ ;

::d.cnt dpila dpila> - 2 >> ;
::d.pop -4 'dpila> +! dpila> @ ;
::d.pop2 -8 'dpila> +! dpila> @+ swap @ ;
::d.pop3 -12 'dpila> +! dpila> @+ swap @+ swap @ ;
::d.push dpila> !+ 'dpila> ! ;
::d.TOS dpila> 4 - @ ;
::d.NOS dpila> 8 - @ ;
::d.PK2 dpila> 12 - @ ;
::d.PK3 dpila> 16 - @ ;
::d.PK4 dpila> 20 - @ ;
::d.PK5 dpila> 24 - @ ;

|--- pila de direccion
::r.pop	-4 'rpila> +! rpila> @ ;
::r.push rpila> !+ 'rpila> ! ;
::r.cnt	rpila> 'rpila - 2 >> ;
::r.tos rpila> 4 - @ ;

:d.pushNew | valor tipo --
	cntregs dup d.push
	2 << dup >r
	'regt + !
	r 'regv + !
	tokact r 'regini + !
	0 r 'reglen + !
	0 r> 'regagr + !
	1 'cntregs +! ;

:r.pushNew | valor tipo --
	cntregs dup r.push
	2 << dup >r
	'regt + !
	r 'regv + !
	tokact r 'regini + !
	0 r 'reglen + !
	0 r> 'regagr + !
	1 'cntregs +! ;

|--- registros
| |par|costo|flags
|   8    8    16
| tipos-- optimizables
| flags
|	$20 | es dir codigo
|	$40 | temino uso
|	$80 | es dir dato (indirecciona)
|  $100 | usa eax,edx (si no son ctes)
|  $200 | usa ecx (si no es cte)
| $8000 | es cte optimizable  **
| $4000 | es reg asignado???
| costo: cantidad de operaciones(lecturas no se cuentan)
| par: cuando es copia, accede al registro origen
|-----------

:d.pushCTE	0 d.pushNew ;	|	0 cte 			33
:d.pushCTEN	1 d.pushNew ;	|   1 cteNombre     RESX
:d.pushCPY	2 d.pushNew ;	|	2 cpy           dup
:d.pushSTR	3 d.pushNew ;	|	3 str           "hola"
:d.pushDCOD	4 d.pushNew ;	|	4 'cod          'func
:d.pushDVAR	5 d.pushNew ;	|	5 'dat          'var
:d.pushVAR	6 d.pushNew ;	|	6 dat           var
|--no optimizables
:d.pushVNUM	7 d.pushNew ;	|	7 varnum        ---all
:d.pushVSTR	8 d.pushNew ;	|	8 varstr        ""+
:d.pushVCOD	9 d.pushNew ;	|	9 varcod        'cod+
:d.pushVDAT	10 d.pushNew ;	|  10 vardat        'dat+
:d.pushSTACK 11 d.pushNew ;	|  11 stack         [esi+] .. eax

|--- llena buffinf
|:inf! tostr> 4096 - ! ; | OJO ctes para otros buff
:tok! tostr> 8192 - ! ;

|---- marcas de registros
:reg+1 | -- ; celda que se escribio
	d.TOS 2 << 'regt + dup
	@ dup $ff00ffff and swap
	$ff0000 and $10000 + or
	swap ! ;

:regr+1 | -- ; celda que se leyo
	d.TOS 2 << 'regt + dup
	@ dup $ffffff and swap
	$ff000000 and $1000000 + or
	swap ! ;

:regrr+1 | -- ; celda que se leyo en R
	r.TOS 2 << 'regt + dup
	@ dup $ffffff and swap
	$ff000000 and $1000000 + or
	swap ! ;

:regst | -- ; tos es pila obligada
	d.TOS 2 << 'regt + dup @ $10 or swap ! ;

:memreg | es dir dato
	d.TOS 2 << 'regt + dup @ $80 or swap ! ;
:codreg | es dir codigo
	d.TOS 2 << 'regt + dup @ $20 or swap ! ;
:usoadx | usa eax,edx
	d.TOS 2 << 'regt + dup @ $100 or swap ! ;
:usoecx | usa ecx
	d.TOS 2 << 'regt + dup @ $200 or swap ! ;

:rregl | lectura de R
	r.TOS 2 << 'regt + dup @ $400 or swap ! ;

:rregr | escritura en R
	r.TOS 2 << 'regt + dup @ $800 or swap ! ;

:endreg | temino uso
	d.TOS 2 << dup
	'regt + dup @ $40 or swap !
	tokact swap 'reglen + !
	;

|--- pila D
:vdrop	endreg -4 'dpila> +! ;
:v4drop vdrop
:v3drop vdrop
:v2drop vdrop vdrop ;
:vswap	dpila> 8 - >r r@+ r@+ r> 8 - !+ ! ;
:vnip	vswap vdrop ;
:vrot	dpila> 12 - >r r@+ r@+ r@+ swap r> 12 - !+ !+ ! ;
:v2swap	dpila> 16 - >r r@+ r@+ swap r@+ r@+ swap r> 32 - !+ !+ !+ ! ;
:vdup	d.TOS d.pushCPY ;
:vover	d.NOS d.pushCPY ;
:vpk2	d.PK2 d.pushCPY ; |PICK2  abc -- abca
:vpk3	d.PK3 d.pushCPY ; |PICK3  abcd -- abcda
:vpk4	d.PK4 d.pushCPY ; |PICK4  abcde -- abcdea
:v2dup	vover vover ;	|2DUP   ab -- abab
:v2over	vpk3 vpk3 ; |2OVER  abcd -- abcdab

:vuso3 regr+1 vdrop
:vuso2 regr+1 vdrop
:vuso1 regr+1 vdrop ;

:vuso11 regr+1 ;
:vuso21 regr+1 vdrop regr+1 ;


|--- aritmeticas y logicas
:op1a1	reg+1 ; | neg not 1+ 4+ 1- 2/ ..
:vop1a1 reg+1 usoadx ; | abs  clz  ..
:op2a1	regr+1 vdrop reg+1 ; | + - * and or xor ..
:vop2a1 regr+1 vdrop reg+1 usoadx ; | / mod
:xop2a1	usoecx regr+1 vdrop reg+1 ; | << >>
:op3a1	regr+1 vdrop regr+1 vdrop reg+1 usoadx ; | */
:vop3a1	regr+1 vdrop regr+1 vdrop reg+1 usoadx usoecx ; | *>> /<<

:op2a2	reg+1 vdrop reg+1 0 d.pushSTACK usoadx ; | mod/

|--- pila R
:v>r	d.pop r.push rregl ;
:vr>	rregl r.pop d.push ;
:vr		regrr+1 rregl r.tos d.pushCPY ; |R      -- a R: a -- a
:vr+	rregr vr> reg+1 v>r regr+1 vdrop ; |R+    a -- R: b -- c
:vr@+	rregr vr> memreg reg+1 dup v>r d.pushVar ; |R@+    -- a R: b -- c
:vr!+	rregr vr> memreg reg+1 v>r regr+1 vdrop ; |R!+   a -- R: b -- c
:vrdrop	r.pop drop ;

|-------------------------------
::mappila | exe --
	'dpila ( dpila> <? )( @+ pick2 exec ) 2drop ;

::mappilar | exe --
	'rpila ( rpila> <? )( @+ pick2 exec ) 2drop ;

:stacks>str | --
	memp> tostr> !+ 'tostr> ! | suma a los buffer
	[ +memp ; ] mappila 0 +memp
	[ +memp ; ] mappilar 0 +memp
	;

:str>stacks | "" --
	'dpila 'dpila> !
	( c@+ 1? )( d.push ) drop
	'rpila 'rpila> !
	( c@+ 1? )( r.push ) 2drop
	;

:stacknow | -- now
	tostr> 4 - @ ; | stack actual

|----------------------------
:value
	dup 4 - @ 8 >> ;

:litN	| 12
	value cte + @
	d.pushCTE
	;
:litS	| "kk"
	value cte + strusestack ( 1? )( 1- regr+1 regst vdrop ) 2drop | correccion por "%d"
	value d.pushSTR  ;

#lastdircode

:litV	| vv
	value dup 'lastdircode ! | no agregar si no tiene mov de pila
	d.pushVAR ;
:litAV	| 'v
	value dup 'lastdircode !
	d.pushDVAR ;
:litAW	| 'w
	value dup 'lastdircode !
	d.pushDCOD  ;

:callW	| ww
	dup 4 - @ 8 >> nro>mov @

|
|	dup 24 >> | no se propaga es flujo de ejecucion
|	-? ( ( 1? )( 1+ vrdrop ) drop )( ( 1? )( 1- newRegR ) drop ) 	|	'deltaR +!
|
	dup 24 << 24 >> |duso
	dup ( 1? )( 1+ regr+1 vdrop ) drop
	swap 8 << 24 >>
	- abs
	( 1? )( 1- 0 d.pushVNUM ) drop
	;

:exexec 	| exec
    regr+1
	codreg vdrop
	lastdircode nro>mov @
	dup 24 << 24 >> |duso
	dup ( 1? )( 1+ regr+1 vdrop ) drop
	swap 8 << 24 >>
	- abs
	( 1? )( 1- 0 d.pushVNUM ) drop
	;

:c0 | 0? 1? ..
	regr+1 ;
:c1 | =? <? ..
	regr+1 vdrop regr+1 ;
:1@	| @ c@ w@
	memreg reg+1 ;
:1!	| ! c! w!
	memreg regr+1 vdrop regr+1 vdrop ;
:2@	| @+ c@+ w@+
	memreg reg+1
	d.tos d.pushVNUM  ;
:2!	| !+ c!+ w!+
	vswap regr+1 vswap memreg reg+1 vnip ;
:2+! | +! c+! w+!
	memreg regr+1 vdrop regr+1 vdrop ;


:v3v 0 0 d.pushNew
:v2v 0 0 d.pushNew
:v1v 0 0 d.pushNew  ;

:v1cte 0 d.pushCTE ;

|--- condicionales
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(	|(
	stacknow sst!
	salto? sst!
	;

:es)(	|)(
	salto? 1? ( sst@ 2drop stacknow sst! 3 sst! ; ) | while
	sst@ 2drop
	sst@ dup sst!
	stacknow sst! 2 sst!
	str>stacks
	;

:tipo0 | (  ? ) o (    ) ; UNTIL REPEAT
	sst@ drop ;

:tipo1 | ?( )	; IF
	sst@ str>stacks
|	;? 1? ( sst@ str>stacks drop ; )
|	sst@ 2drop
	;

:tipo2 | ?( )( ) ; IFELSE
	;? 1? ( sst@ sst@ str>stacks 2drop ; )
	sst@ str>stacks sst@ 2drop ;

:es)	|)
	sst@
	0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	sst@ str>stacks	| ( ? )(  ) ; WHILE
	sst@ 2drop
	;

|---	 anonimas
:es[	|[
	stacknow sst! ;

:es]	|]
	sst@ str>stacks
	0 d.pushDCod ;

:es;
	 ;

#acctoken
0 0 0	|0 1 :,,defc 2 :,,defv
litN	|3 :,,litd | --	n numero decimal
litN	|4 :,,lith | --	n numero hexa
litN	|5 :,,litb | -- n numero binario
litN	|6 :,,litf | --	n numero punto fijo
litS	|7 :,,lits | --	s string
callW	|8 :,,word 	| ..--..  word <---- debe ser calculado
litV	|9 :,,var 	| -- v var
litAW	|10:,,dword | -- dw dir word
litAV	|11:,,dvar 	| -- dv dir var
es;		|; | fin de palabra (12)
es(		|(
es)(	|)(
es)		|)
es[		|[
es]		|]
exexec	|EXEC  x/0 --    TOS es dcod (18)
c0		|0? a -- a
c0		|+? a -- a
c0		|-? a -- a
c0		|1? a -- a
c1		|=?  ab -- a
c1		|<?  ab -- a
c1		|>?  ab -- a
c1		|<=? ab -- a
c1		|>=? ab -- a
c1		|<>? ab -- a
c1		|AND?  ab -- a
c1		|NAND? ab -- a
vdup	|DUP    a -- aa
vdrop 	|DROP  a --
vover 	|OVER   ab -- aba
vpk2 	|PICK2  abc -- abca
vpk3 	|PICK3  abcd -- abcda
vpk4 	|PICK4  abcde -- abcdea
vswap 	|SWAP   ab -- ba
vnip	|NIP   ab -- b
vrot	|ROT	abc -- bca
v2dup	|2DUP   ab -- abab
v2drop	|2DROP ab --
v3drop	|3DROP abc --
v4drop	|4DROP abcd --
v2over	|2OVER  abcd -- abcdab
v2swap	|2SWAP  abcd -- cdab

v>R		|>R    a -- R: -- a
vR>		|R>    -- a R: a --
vr		|R      -- a R: a -- a
vr+		|R+    a -- R: b -- c
vr@+	|R@+    -- a R: b -- c
vr!+	|R!+   a -- R: b -- c
vrdrop	|RDROP	R: a --

op2a1	|53 AND	ab -- c
op2a1	|OR    ab -- c
op2a1	|XOR   ab -- c
op1a1	|NOT    a -- b
op2a1	|+		ab -- c
op2a1	|-     ab -- c
op2a1	|*     ab -- c
vop2a1	|/     ab -- c		usa eax,edx
op3a1	|*/    abc -- d     usa eax,edx
vop3a1	|*>>   abc -- d     usa eax,edx, ecx
op2a2	|/MOD   ab -- cd    usa eax,edx
vop2a1	|MOD    ab -- c     usa eax,edx
vop1a1	|ABS    a -- b      usa eax,edx
op1a1	|SQRT	a -- b
vop1a1	|CLZ	a -- b     usa eax,edx
vop3a1	|<</	abc -- d   usa eax,edx, ecx
op1a1	|NEG    a -- b
op1a1	|1+     a -- b
op1a1	|4+     a -- b
op1a1	|1-     a -- b
op1a1	|2/     a -- b
op1a1	|2*     a -- b
xop2a1	|<<    ab -- c     usa ecx
xop2a1	|76 >>    ab -- c  usa ecx
1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

vuso3	|MOVE  abc --       a,b es ddat
vuso3	|MOVE> abc --		a,b es ddat
vuso3	|CMOVE abc --		a,b es ddat
vuso3	|CMOVE> abc --		a,b es ddat
v1cte |MEM	-- a		a es ddat
vuso11	|FFIRST    a -- b
v1v		|FNEXT  -- a
vuso21	|LOAD   ab -- c
vuso3	|SAVE   abc --
vuso3	|APPEND   abc --
vuso11	|UPDATE  a -- a
v2v	|XYMOUSE -- ab
v1v	|BMOUSE  -- a
vuso1	|IKEY!  a --
v1v	|KEY     -- a
v1v	|CNTJOY  -- a
v1v	|GETJOY  -- a

v1v	|MSEC    -- a
v3v	|TIME    -- abc
v3v	|DATE    -- abc
0	|END     --
vuso1	|RUN    a --
v1cte	|SW      -- a
v1cte	|SH      -- a
0	|CLS     --
0	|REDRAW  --
v1v	|FRAMEV  -- a
vuso2	|SETXY  ab --
vuso1	|PX+!   a --
vuso1	|PX!+   a --
v1v	|PX@     -- a

v1cte	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

vuso1	|PAPER  a --
vuso1	|INK    a --
v1v		|INK@    -- a
vuso1	|ALPHA  a --
vuso2	|OP     ab --
vuso2	|CP     ab --
vuso2	|LINE   ab --
vuso2	|CURVE  ab --
vuso2	|PLINE  ab --
vuso2	|PCURVE ab --
0		|POLI    --
vuso2	|FCOL   ab --
vuso2	|FCEN   ab --
vuso2	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
vuso1	|TFILL  a --

vuso11	|SLOAD   a -- a
vuso1	|SPLAY  a --
vuso11	|MLOAD   a -- a
vuso1	|MPLAY  a --

|---- falta
0	|OPENURL

0	|DOCINI
0	|DOCEND
0	|DOCAT
0	|DOCLINE
0	|DOCTEXT
0	|DOCFONT
0	|DOCBIT
0	|DOCRES
0	|DOCSIZE
0	|SYSTEM


|------------
|:gettok | buff -- tok
|	'buffinf - 'bufftok + @ $ff and ;
:getinf | atok -- buffinf
	'bufftok - 'buffinf + @ ;

:,printcnt | "" cnt -
	( swap c@+ 1? )( ,c swap 1- 0? ( 2drop ; ) ) 2drop
	( 1? )( 1- ,sp ) drop ;

:,printstack | "" --
	( c@+ 1? )( 64 + ,c ) drop
	c@+ 0? ( 2drop ; )
	":" ,s ( 64 + ,c c@+ 0? )
	2drop ;

:,primm | n --
	dup 2 << 'regt + @
	$8000 and? ( drop 64 + ,c ; ) |2drop "*" ,s ; )
	drop
	64 + ,c
	;
:,printstacki
	( c@+ 1? )( ,primm ) drop
	c@+ 0? ( 2drop ; )
	":" ,s ( ,primm c@+ 0? )
	2drop ;

:,print1tok
	dup $ff and 3 <? ( 2drop ; ) drop	| quita :#
	tokenstr 16 ,printcnt
	"| " ,s swap @+
|	,printstack
	,printstacki
	swap
	,cr ;

::,printAnaSTACK
	'tostr 4+ 'bufftok cntinstr
	( 1? )( >r @+ ,print1tok r> 1- )
	3drop ;

::oregdumpi | nro --
	1+ 2 <<
	dup 'bufftok +
	swap 'tostr +
	( tostr> <? )(
		4+ swap @+ "%h " print

		swap cr )
	2drop ;

|--- registros

#tiponm "cte" "cteN" "cpy" "str" "'cod" "'var" "var" "any+" "str+" "cod+" "dat+" "stack"

:,cadaregistro
	pick2 64 + "| %k =" ,print
	'tiponm over $f and ( 1? )( 1- swap >>0 swap ) drop
	,s ,sp
	$8000 and? ( "*" ,print ) | flag cte
	$4000 and? ( "Reg" ,print ) | flag reg

	$80 and? ( "M" ,print ) | como memoria
	$40 nand? ( "S" ,print ) | no endreg (es salida)
	$20 and? ( "C" ,print ) | codreg
	$10 and? ( "." ,print ) | pila obligada

	$100 and? ( " eaxedx" ,print ) | usoadx
	$200 and? ( " ecx" ,print ) | usoecx | si no es cte

	$400 and? ( "[R]" ,print ) | lee de r
	$800 and? ( "<R>" ,print ) | escribe en r

	dup 16 >> $ff and 1? ( " %dW" ,print )( drop ) | cnt de escrituras
	dup 24 >> $ff and 1? ( " %dR" ,print )( drop ) | cnt de lecturas
	dup 16 >> $ff and over 24 >> $ff and or 0? ( "<vacia>" ,s ) drop
	drop
	dup 3068 + @ " %d-" ,print
	dup 4092 + @ "%d " ,print
	dup 5116 + @ " %d" ,print
	,cr ;

::,printAnaREGS
	usedreg cntregs 1- "|-- %d Registros -- %d Usados" ,print ,cr
	'regt 4+
	1 ( cntregs <? )(
		swap @+ ,cadaregistro
		swap 1+ ) 2drop
	"|-----------------" ,s ,cr ;

|--------- registros
:mapregs | 'v --
	'regt 4+ 1 ( cntregs <? )(
		swap
		@+ pick3 exec
		swap 1+ )
	3drop ;

:cadaregistro
	blanco
	pick2 dup 64 + swap "%d.%k=" print

	'tiponm over $f and ( 1? )( 1- swap >>0 swap ) drop
	print sp sp
	$8000 and? ( "*" print ) | flag cte
	$4000 and? ( "Reg" print ) | flag reg
	$80 and? ( "M" print ) | como memoria
	$40 nand? ( "S" print ) | no endreg (es salida)
	$20 and? ( "C" print ) | codreg
	$10 and? ( "." print ) | pila obligada

	$100 and? ( "a" print ) | usoadx
	$200 and? ( "c" print ) | usoecx | si no es cte
	$400 and? ( "[R]" print ) | lee en r
	$800 and? ( "<R>" print ) | escribe en r

	dup 16 >> $ff and 1? ( " %dW" print )( drop ) | cnt de escrituras
	dup 24 >> $ff and 1? ( " %dR" print )( drop ) | cnt de lecturas
	dup 16 >> $ff and over 24 >> $ff and or 0? ( "<vacia>" print ) drop

	drop
	gris
	dup 3068 + @ " %d-" print
	dup 4092 + @ "%d " print
	dup 5116 + @ " %d" print
	cr allowchome ;

::dumpregs | --
	'cadaregistro mapregs
	usedreg "| reales: %d" print cr
;

|----- pirnt pilas
:printstackolor | "" --
	( c@+ 1? )(
		dup 2 << 'regt + @ | info reg
		$8000 and? ( verde )( rojo )
		$4000 and? ( blanco ) drop
		64 + emit
		) drop
	c@+ 0? ( 2drop ; )
	blanco ":" print
	( 	dup 2 << 'regt + @ | info reg
		$8000 and? ( verde )( rojo )
		$4000 and? ( blanco ) drop
		64 + emit
		c@+ 0? )
	2drop
	;

::sregdumpi | nro --
	1+ 2 << 'tostr +
	( tostr> <? )(
		@+ sp printstackolor sp
		cr )
	drop ;

|--------- analisis del buffer
::reg.t@ | n -- val
	2 << 'regt + @ ;
:reg.i@ | n -- val
	2 << 'regini + @ ;
:reg.l@ | n -- val
	2 << 'reglen + @ ;
:reg.g | n -- dir
	2 << 'regagr + ;
:reg.in | n -- dir
	2 << 'regi + ;

:ctessincosto | nro reg -- nro
	dup 16 >> $ff and
	1? ( 2drop ; ) | fue escrito
	drop
	dup 24 >> $ff and
	1 >? ( 2drop ; ) | fue leido +de 1
	drop
	dup $f and 7 =? ( 2drop ; ) | any+ no es cte
	drop
	$40 nand? ( drop ; ) | no termino
	$8000 or over 4 - ! | marca como cte
	;

|---- grupos de registros
| busco los registros que son disjuntos

:candidato | n t i t -- n t i t
	over reg.g @ 1? ( drop ; ) drop
	over reg.i@
	lastp
	<? ( drop ; ) drop | se superponen
	usedreg pick2 reg.g ! | marca grupo
	over reg.l@ 'lastp !
	;

:buscagrupo | n t -- n t
	over reg.g @ 1? ( drop ; ) drop | ya fue asignado
	over reg.l@ 0? ( drop ; ) 'lastp ! | es de salida
	over 1+ ( cntregs <? )( | n t i
		dup reg.t@
		$8000 nand? ( candidato ) drop
		1+ ) drop
	usedreg pick2 reg.g ! | marca grupo
	1 'usedreg +!
	;

:armogrupos
	1 'usedreg !
	1 ( cntregs <? )(
		dup reg.t@
		$8000 nand? ( buscagrupo )
		drop
		1+ ) drop ;

:AsignoReg
	'ctessincosto mapregs
	armogrupos
	;

|----- recorre 1
:vtini
	'dpila 'dpila> !
	'rpila 'rpila> !
	'tostr 'tostr> !
	'memp 'memp> !
	'sst 'sst> !
	1 'cntregs !
	-1 'tokact !
	;

::sregtok | adr -- adr+
	@+ dup tok!	| guarda token
	$ff and
	3 <? ( drop ; )	| quita :#
|	dup "%d " mprint count "log.txt" append

	2 << 'acctoken + @ exec
	1 'tokact +!
	stacks>str
	;

|-------- analizadores

::makeanawordex | nro --
	vtini
	dup nro>udr 2drop |usadas
	neg ( 1? )( 1- dup neg d.pushSTACK ) drop | como inicio
	0 'tokact !
	stacks>str
| PARTE 1 - Crea registros
	dup nro>toklen
	( 1? )( 1- swap sregtok swap  )
	3drop

| PARTE 2 - Asignacion de registros
	AsignoReg ;

::analisabuf | fin ini used --
	vtini
	( 1? )( 1- dup neg d.pushSTACK ) drop |usadas
	stacks>str
| PARTE 1 - Crea registros
	( over <? )( sregtok ) 2drop
| PARTE 2 - Asignacion de registros
	AsignoReg ;

