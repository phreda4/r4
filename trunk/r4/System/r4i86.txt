| R4i86.txt - PHREDA 2009
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt
^r4/lib/trace.txt

|----- nro de str y label
#nstr | nro de string
#nlabel | nro de etiqueta

::ini.compila
	0 'nstr ! 0 'nlabel ! ;

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

:>pilac pilac> ! 4 'pilac> +! ;
:<pilac -4 'pilac> +! pilac> @ ;
:pilac! 'pilac 'pilac> ! ;

|------ optimizador
:label	"_" ,s ,h 	;
:jmp,	"jmp " ,s label ,cr ;

:,DUP
	"lea esi,[esi-4]" ,ln
	"mov [esi],eax" ,ln ;

:,DROP
	"lodsd" ,ln ;

:,NIP
	"lea esi,[esi+4]" ,ln ;

:,2DROP
	,NIP ,DROP ;

:,3DROP
	"lea esi,[esi+8]" ,ln
	,DROP ;

:,4DROP
	"lea esi,[esi+12]" ,ln
	,DROP ;

:,OVER
	,DUP "mov eax,[esi+4]" ,ln ;
:,PICK2
	,DUP "mov eax,[esi+4*2]" ,ln ;
:,PICK3
	,DUP "mov eax,[esi+4*3]" ,ln ;
:,PICK4
	,DUP "mov eax,[esi+4*4]" ,ln ;
:,SWAP
|	"mov edx,eax" ,ln |"xchg eax,[esi]" ,ln ;|ggrr
|	"mov eax,[esi]" ,ln
|	"mov [esi],edx" ,ln ;
	"push eax" ,ln	| otra version (sin dx)
	"mov eax,[esi]" ,ln
	"popd [esi]" ,ln ;
:,ROT
|	"mov ecx,[esi+4]" ,ln
|	"mov edx,[esi]" ,ln
|	"mov [esi],eax" ,ln
|	"mov [esi+4],edx" ,ln
|	"mov eax,ecx" ,ln ;
	"pushd [esi+4]" ,ln	| otra version (sin dx,cx)
	"pushd [esi]" ,ln
	"popd [esi+4]" ,ln
	"mov [esi],eax" ,ln
	"pop eax" ,ln ;
:,2DUP
	,OVER ,OVER ;
:,2OVER
	"mov [esi-4],eax" ,ln
	"lea esi,[esi-8]" ,ln
|	"mov edx,[esi+16]" ,ln
|	"mov [esi],edx" ,ln
	"pushd [esi+16]" ,ln
	"popd [esi]" ,ln
	"mov eax,[esi+12]" ,ln ;
:,2SWAP
|	"mov ecx,[esi+4]" ,ln
	"pushd [esi+4]" ,ln
	"mov [esi+4],eax" ,ln
|	"mov edx,[esi+8]" ,ln
	"pushd [esi+8]" ,ln
	"mov eax,[esi]" ,ln
	"mov [esi+8],eax" ,ln
|	"mov [esi],edx" ,ln
|	"mov eax,ecx" ,ln
	"popd [esi]" ,ln
	"pop eax" ,ln ;


:,EXEC
	"mov ecx,eax" ,ln
	,DROP
	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln ;

:,>R
	"push eax" ,ln
	,DROP ;

:,R>
	,DUP "pop eax" ,ln ;

:,R
	,DUP "mov eax,[esp]" ,ln ;

:,RDROP
	"lea esp,[esp+4]" ,ln ;

:,R+
	"add [esp],eax" ,ln
	,DROP ;

:,R!+
	"pop edx" ,ln
	"mov [edx],eax" ,ln
	"add edx,4" ,ln
	"push edx" ,ln
	,DROP ;

:,R@+
	,DUP
	"mov eax,[esp]" ,ln
	"mov eax,[eax]" ,ln
	"add dword [esp],4" ,ln ;
|	"pop edx" ,ln
|	"mov eax,[edx]" ,ln
|	"add edx,4" ,ln
|	"push edx" ,ln ;

:,AND
	"and eax,[esi]" ,ln ,NIP ;

:,OR
	"or eax,[esi]" ,ln ,NIP ;

:,XOR
	"xor eax,[esi]" ,ln ,NIP ;

:,NOT
	"not eax" ,ln ;

:,+
	"add eax,[esi]" ,ln ,NIP ;

:,-
	"neg eax" ,ln
	"add eax,[esi]" ,ln
	,NIP ;

:,*
	"imul eax,dword [esi]" ,ln
	,NIP ;

:,/
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln ;

:,*/
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"idiv ecx" ,ln
	,NIP ;

:,*>>
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"shrd eax,edx,cl" ,ln
	,NIP ;

:,<</
	"mov ecx,eax" ,ln
	"mov ebx,[esi]" ,ln
	,2DROP
	"cdq" ,ln
    "shld eax,edx,cl" ,ln
	"idiv ebx" ,ln ;

:,/MOD
	"mov ecx,eax" ,ln
	"mov eax,[esi]" ,ln
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov [esi],eax" ,ln
	"mov eax,edx" ,ln ;

:,MOD
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov eax,edx" ,ln ;

:,<<
	"mov ecx,eax" ,ln ,DROP
	"sal eax,cl" ,ln ;

:,>>
	"mov ecx,eax" ,ln ,DROP
	"sar eax,cl" ,ln ;

:,ABS
	"cdq" ,ln
	"add eax,edx" ,ln
	"xor eax,edx" ,ln ;

:,SQRT
	;

:,CLZ
|	"mov ecx,eax" ,ln
	"bsr eax,eax" ,ln
	"xor eax,31" ,ln
|	"or ecx,ecx" ,ln
|	"jnz @f" ,ln
|	"mov eax,32" ,ln
|	"@@:" ,ln
	;

:,NEG
	"neg eax" ,ln ;

:,1+
	"inc eax" ,ln ;

:,4+
	"add eax,4" ,ln ;

:,1-
	"dec eax" ,ln ;

:,2/
	"sar eax,1" ,ln ;

:,2*
	"sal eax,1" ,ln ; | "add eax,eax" ,ln

:,@
	"mov eax,dword [eax]" ,ln ;

:,C@
	"movsx eax,byte [eax]" ,ln ;

:,W@
	"movsx eax,word [eax]" ,ln ;

:,!
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	,2DROP ;

:,C!
	"mov ecx,[esi]" ,ln
	"mov byte [eax],cl" ,ln
	,2DROP ;

:,W!
	"mov ecx,[esi]" ,ln
	"mov word [eax],cx" ,ln
	,2DROP ;

:,+!
	"mov ecx,[esi]" ,ln
	"add [eax],ecx" ,ln
	,2DROP ;

:,W+!
	"mov ecx,[esi]" ,ln
	"add word [eax],cx" ,ln
	,2DROP ;

:,C+!
	"mov ecx,[esi]" ,ln
	"add byte [eax],cl" ,ln
	,2DROP ;

:,!+
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	"add eax,4" ,ln
	,NIP ;

:,W!+
	"movsx ecx,word [esi]" ,ln
	"mov [eax],cx" ,ln
	"add eax,2" ,ln
	,NIP ;

:,C!+
	"movsx ecx,byte [esi]" ,ln
	"mov [eax],cl" ,ln
	"inc eax" ,ln
	,NIP ;

:,@+
	"mov ecx,[eax]" ,ln
	"add eax,4" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;

:,W@+
	"movsx ecx,word [eax]" ,ln
	"add eax,2" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;

:,C@+
	"movsx ecx,byte [eax]" ,ln
	"inc eax" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;


:,0?
	"or eax,eax" ,ln
	"jnz " ,s ;

:,+?
	"or eax,eax" ,ln
	"js " ,s ;

:,-?
	"or eax,eax" ,ln
	"jns " ,s ;

:,1?
	"or eax,eax" ,ln
	"jz " ,s ;

:,=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jnz " ,s ;

:,<?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jge " ,s ;

:,>?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jle " ,s ;

:,<=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jg " ,s ;

:,>=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jl " ,s ;

:,<>?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jz " ,s ;

:,and?
	"mov ecx,eax" ,ln ,DROP
	"test eax,ecx" ,ln
	"jz " ,s ;

:,nand?
	"mov ecx,eax" ,ln ,DROP
	"test eax,ecx" ,ln
	"jnz " ,s ;

|--------- Sistema
:,DIR
	"call SYSDIR" ,ln ;
:,FILE
	"call SYSFILE" ,ln ;
:,FSIZE
	"call SYSFSIZE" ,ln ;
:,VOL
	"call SYSVOL" ,ln ;
:,LOAD
	"call SYSLOAD" ,ln ;
:,SAVE
	"call SYSSAVE" ,ln ;
:,UPDATE
	"call SYSUPDATE" ,ln ;
:,MSEC
	"call SYSMSEC" ,ln ;
:,TIME
	"call SYSTIME" ,ln ;
:,DATE
	"call SYSDATE" ,ln ;
:,END
	"jmp SYSEND" ,ln ;
:,RUN
	"call SYSRUN" ,ln ;
:,SW
	,DUP  "mov eax,[SYSW]" ,ln ;
:,SH
	,DUP  "mov eax,[SYSH]" ,ln ;
:,MEM
	,DUP  "mov eax,FREE_MEM" ,ln ;

:,PAPER
	"mov [SYSPAPER],eax" ,ln ,DROP ;

:,CLS
	"call SYSCLS" ,ln ;

:,REDRAW
	"call SYSREDRAW" ,ln ;
:,FRAMEV
	,DUP  "mov eax,SYSFRAME" ,ln ;

:,XFB
	,DUP  "mov eax,XFB" ,ln ;
:,>XFB
	"call SYSTOXFB" ,ln ;
:,XFB>
	"call SYSXFBTO" ,ln ;

:,SETXY | x y --
	"imul eax,dword [SYSW]" ,ln
	"add eax,[esi]" ,ln
	"lea ebp,[SYSFRAME+eax*4]" ,ln
	,2DROP ;

:,PX+!	| s --
	"lea ebp,[ebp+eax*4]" ,ln
	,DROP ;
:,PX!+	| rgb --
	"mov [ebp],eax" ,ln
	"add ebp,4" ,ln
	,DROP ;
:,PX@	| -- rgb
	,DUP "mov eax,[ebp]" ,ln ;

:,iPEN! | v --
	"mov [SYSiPEN],eax" ,ln
	,DROP ;

|:,TPEN | --
|	,DUP
|	"mov eax,[MCNT]" ,ln
|	"dec eax" ,ln
|	"mov [MBUFF],eax" ,ln
|	"xor eax,eax" ,ln
|	"inc eax" ,ln
|	"mov [MCNT],eax" ,ln
|	"mov eax,MBUFF" ,ln ;

:,XYMOUSE | -- x y
	,DUP
	"lea esi,[esi-4]" ,ln
	"mov eax,[SYSXYM]" ,ln
	"mov ecx,eax" ,ln
	"and ecx,$ffff" ,ln
	"shr eax,16" ,ln
	"mov [esi],ecx" ,ln ;

:,BMOUSE | -- c
	,DUP "mov eax,[SYSBM]" ,ln ;

:,KEY! | v --
	"mov [SYSKEY],eax" ,ln
	,DROP ;

:,KEY	| -- c
	,DUP "mov eax,[SYSKEY]" ,ln ;

|-----------
:,MOVE
:,MOVE>
:,CMOVE
:,CMOVE>
:,INK
:,INK@
:,ALPHA
:,OP
:,CP
:,LINE
:,CURVE
:,PLINE
:,PCURVE
:,POLI
:,FCOL
:,FCEN
:,FMAT
:,SFILL
:,LFILL
:,RFILL
:,TFILL

:,CNTJOY
:,GETJOY
:,SLOAD
:,SPLAY
:,MLOAD
:,MPLAY

:,OPENURL

:,DOCINI
:,DOCEND
:,DOCAT
:,DOCLINE
:,DOCTEXT
:,DOCFONT
:,DOCBIT
:,DOCRES
:,DOCSIZE

:,SYSTEM
	;

|------------ compila CODIGO
|:nro>dicn2   8 >> 5 << 'indicepal + @ ; | nombre
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:+etiqueta	| -- nueva   // y agrega a pila
	nlabel 1+ dup 'nlabel ! dup >pilac ;

:cpycad | adr --
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop ; ) ) ,c ) 2drop ;

:salto? | adr++ xx xx -- adr++ xx xx 0/1
	pick2 8 - @ $ff and
	18 >? ( 31 <? ( 1 nip ; ) ) 0 nip ;

:,defw
:,defv ;

:,lit
	dup tok>cte ,DUP "mov eax," ,s ,d ,cr ;
:,lits
	,DUP "mov eax,s" ,s nstr ,h ,cr 1 'nstr +! ;
:,wor
	dup nro>dicn "call " ,s ,s ,cr ;
:,var
	dup nro>dicn ,DUP "mov eax,[" ,s ,s "]" ,s ,cr ;
:,dwo
	dup nro>dicn ,DUP "mov eax," ,s ,s ,cr ;
:,dva
	dup nro>dicn ,DUP "mov eax," ,s ,s ,cr ;

:,;
	"ret" ,ln ;
:,(
	+etiqueta salto? 1? ( swap label ,cr 1 )( swap label ":" ,ln 2 ) >pilac drop ;
:,)(
	<pilac salto? 0? ( drop
			1 =? ( <pilac +etiqueta jmp, label ":" ,ln 1 >pilac drop ; )
			)( drop
			2 =? ( <pilac +etiqueta label ,cr >pilac 3 >pilac drop ; ) )
	drop ;
:,)
	<pilac salto? 0? ( drop
			1 =? ( <pilac label ":" ,ln drop ; )
			2 =? ( <pilac jmp, drop ; )
			3 =? ( <pilac jmp, <pilac label ":" ,ln drop ; )
		)( drop
			2 =? ( <pilac label ,cr drop ; ) )
	drop ;
:,[
	,DUP +etiqueta +etiqueta "mov eax," ,s label ,cr jmp, <pilac label ":" ,ln ;
:,]
	<pilac label ":" ,ln ;

|---- nivel 0 - sin desordenar la pila
#nivel0 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva
,; ,( ,)( ,) ,[ ,] ,EXEC
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND? | 30
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones
,AND ,OR ,XOR ,NOT  								|--- logicas
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas | 65
,SQRT ,CLZ ,<</ ,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>>
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+
,MOVE ,MOVE> ,CMOVE ,CMOVE>
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE			|--- memoria bloques
,UPDATE
|,TPEN
,XYMOUSE ,BMOUSE
,KEY! ,KEY
,CNTJOY ,GETJOY
,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,SLOAD ,SPLAY	,MLOAD ,MPLAY					|--- Sonido
,OPENURL
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

| compila nivel 0 de palabras
:,token0 | a -- a.
	@+ dup
	$ff and 2 << 'nivel0 + @ exec
	drop ;

::,compword | nro --
	nro>toklen
	( 1? )( 1- swap	,token0 swap )
	2drop ;

