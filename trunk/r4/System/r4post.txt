| r4post.txt
| analisis profundo de cada palabra usada
| PHREDA 2010
| 01 0 accion 1 dato
| 02 0 local 1 exportado
| 04 0 un ; 1 varios ;
| 10 0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
|---------------------------------------------------------------
^r4/system/r4token.txt

#nivel	0
#usoD	0
#deltaD	0	| pila de datos
#deltaR	0	| pila de retorno
#flags	0
#cntfin
#pano
#cano

| uso dD dR tipo
#deltainternos (
0 0 0 0 | 0
0 0 0 0 |1 :,,defc | n --  define codigo
0 0 0 0 |2 :,,defv | n --  define variable
0 1 0 0 |3 :,,litd | n --	numero decimal
0 1 0 0 |4 :,,lith | n --	numero hexa
0 1 0 0 |5 :,,litb | n --	numero binario
0 1 0 0 |6 :,,litf | n --	numero punto fijo
0 1 0 9 |7 :,,lits | n --	string
0 0 0 1 |8 :,,word | n --  word <---- debe ser calculado
0 1 0 0 |9 :,,var | n --  var
0 1 0 0 |10:,,dword | n --  dir word
0 1 0 0 |11:,,dvar | n --  dir var
)
#deltamacros (
0 0 0 7		|; | fin de palabra (12)
0 0 0 2		|13 (
0 0 0 3		|14 )(
0 0 0 4		|15 )
0 1 0 5		|16 [
0 0 0 6		|17 ]
1 -1 0 10	|18 EXEC  x/0 --
1 0 0 0		|0? a -- a
1 0 0 0		|+? a -- a
1 0 0 0		|-? a -- a
1 0 0 0		|1? a -- a
2 -1 0 0	|=?  ab -- a
2 -1 0 0	|<?  ab -- a
2 -1 0 0	|>?  ab -- a
2 -1 0 0	|<=? ab -- a
2 -1 0 0	|>=? ab -- a
2 -1 0 0	|<>? ab -- a
2 -1 0 0	|AND?  ab -- a
2 -1 0 0	|NAND? ab -- a
1  1 0 0	|DUP    a -- aa
1 -1 0 0	|DROP  a --
2 1 0 0		|OVER   ab -- aba
3 1 0 0		|PICK2  abc -- abca
4 1 0 0		|PICK3  abcd -- abcda
5 1 0 0		|PICK4  abcde -- abcdea
2 0 0 0		|SWAP   ab -- ba
2 -1 0 0	|NIP   ab -- b
3 0 0 0		|ROT	abc -- bca
2 2 0 0		|2DUP   ab -- abab
2 -2 0 0	|2DROP ab --
3 -3 0 0	|3DROP abc --
4 -4 0 0	|4DROP abcd --
4 2 0 0		|2OVER  abcd -- abcdab
4 0 0 0		|2SWAP  abcd -- cdab
1 -1 1 8	|>R    a -- R: -- a
0 1 -1 8	|R>    -- a R: a --
0 1 0 8		|R      -- a R: a -- a
1 -1 0 8	|R+    a -- R: b -- c
0 1 0 8		|R@+    -- a R: b -- c
1 -1 0 8	|R!+   a -- R: b -- c
0 0 -1 8	|RDROP	R: a --
2 -1 0 0	|53 AND	ab -- c
2 -1 0 0	|OR    ab -- c
2 -1 0 0	|XOR   ab -- c
1 0 0 0		|NOT    a -- b
2 -1 0 0	|+		ab -- c
2 -1 0 0	|-     ab -- c
2 -1 0 0	|*     ab -- c
2 -1 0 0	|/     ab -- c
3 -2 0 0	|*/    abc -- d
3 -2 0 0	|*>>   abc -- d
2 0 0 0		|/MOD   ab -- cd
2 -1 0 0	|MOD    ab -- c
1 0 0 0		|ABS    a -- b
1 0 0 0		|SQRT	a -- b
1 0 0 0		|CLZ	a -- b
3 -2 0 0	|<</	abc -- d
1 0 0 0		|NEG    a -- b
1 0 0 0		|1+     a -- b
1 0 0 0		|4+     a -- b
1 0 0 0		|1-     a -- b
1 0 0 0		|2/     a -- b
1 0 0 0		|2*     a -- b
2 -1 0 0	|<<    ab -- c
2 -1 0 0	|76 >>    ab -- c
1 0 0 0		|@      a -- b
1 0 0 0		|C@     a -- b
1 0 0 0		|W@     a -- b
2 -2 0 0	|!     ab --
2 -2 0 0	|C!    ab --
2 -2 0 0	|W!    ab --
2 -2 0 0	|+!    ab --
2 -2 0 0	|C+!   ab --
2 -2 0 0	|W+!   ab --
1 1 0 0		|@+     a -- bc
2 -1 0 0	|!+    ab -- c
1 1 0 0		|C@+    a -- bc
2 -1 0 0	|C!+   ab -- c
1 1 0 0		|W@+    a -- bc
2 -1 0 0	|W!+   ab -- c
3 -3 0 0	|MOVE  abc --
3 -3 0 0	|MOVE> abc --
3 -3 0 0	|CMOVE abc --
3 -3 0 0	|CMOVE> abc --

0 1 0 0		|MEM	-- a
1 -1 0 0	|DIR    a --
1 0 1 0		|FILE   a -- b
1 0 1 0		|FSIZE  a -- b
1 0 1 0		|VOL    a -- b
2 -1 0 0	|LOAD   ab -- c
3 -3 0 0	|SAVE   abc --
3 -3 0 0	|APPEND   abc --

1 0 0 0		|UPDATE  a -- a
0 2 0 0		|XYMOUSE -- ab
0 1 0 0		|BMOUSE  -- a
1 -1 0 0	|IKEY!  a --
0 1 0 0		|KEY     -- a
0 1 0 0		|CNTJOY  -- a
0 1 0 0		|GETJOY  -- a

0 1 0 0		|MSEC    -- a
0 3 0 0		|TIME    -- abc
0 3 0 0		|DATE    -- abc
0 0 0 0		|END     --
1 -1 0 0	|RUN    a --
0 1 0 0		|SW      -- a
0 1 0 0		|SH      -- a
0 0 0 0		|CLS     --
0 0 0 0		|REDRAW  --
0 1 0 0		|FRAMEV  -- a
2 -2 0 0	|SETXY  ab --
1 -1 0 0	|PX+!   a --
1 -1 0 0	|PX!+   a --
0 1 0 0		|PX@     -- a

0 1 0 0		|XFB     -- a
0 0 0 0		|>XFB    --
0 0 0 0		|XFB>    --

1 -1 0 0	|PAPER  a --
1 -1 0 0	|INK    a --
0 1 0 0		|INK@    -- a
1 -1 0 0	|ALPHA  a --
2 -2 0 0	|OP     ab --
2 -2 0 0	|CP     ab --
2 -2 0 0	|LINE   ab --
2 -2 0 0	|CURVE  ab --
2 -2 0 0	|PLINE  ab --
2 -2 0 0	|PCURVE ab --
0 0 0 0		|POLI    --
2 -2 0 0	|FCOL   ab --
2 -2 0 0	|FCEN   ab --
2 -2 0 0	|FMAT   ab --
0 0 0 0		|SFILL   --
0 0 0 0		|LFILL   --
0 0 0 0		|RFILL   --
1 -1 0 0	|TFILL  a --

1 0 0 0		|SLOAD   a -- a
1 -1 0 0	|SPLAY  a --
1 0 0 0		|MLOAD   a -- a
1 -1 0 0	|MPLAY  a --

|---- falta
0 0 0 0		|OPENURL

0 0 0 0		|DOCINI
0 0 0 0		|DOCEND
0 0 0 0		|DOCAT
0 0 0 0		|DOCLINE
0 0 0 0		|DOCTEXT
0 0 0 0		|DOCFONT
0 0 0 0 	|DOCBIT
0 0 0 0		|DOCRES
0 0 0 0		|DOCSIZE

0 0 0 0		|SYSTEM
)

|------------- recorre cada palabra
#pilaint )( 1024
#pilaint> 'pilaint

:pushvar
	deltaD deltaR
	pilaint> !+ !+ 'pilaint> ! ;

:popvar
	pilaint> 8 - dup 'pilaint> !
	@+ 'deltaR ! @ 'deltaD ! ;

:dropvar
	-8 'pilaint> +! ;

|----- pila para condicionales
#sst )( 1024 | pila de pilas
#sst> 'sst

:sst!
	sst> !+ 'sst> ! ;

:sst@
	-4 'sst> +! sst> @ ;

:usaR
	$1 flags or 'flags ! ;

|--- Anonimas
:es[
	pushvar
	1 'pano +! 1 'cano +! ;

:es]
	popvar
    -1 'pano +! ;

|----- CONDICIONALES
:salto? | -- 1/0
	dup 8 - @ $ff and
	18 >? ( 31 <? ( drop 1 ; ) )
	drop 0 ;

:;?
	dup 8 - @ $ff and
	12 =? ( drop 1 ; )
	drop 0 ;

:es(
	pushvar
	salto? sst!
	;

:es)(
	salto? 1? ( sst@ 2drop dropvar pushvar 3 sst! ; ) | while
	sst@ 2drop
	popvar pushvar
	2 sst!
	;

:tipo0 | (  ? ) o (    )
	dropvar ;

:tipo1 | ?( )
	;? 1? ( drop popvar ; )
	drop dropvar ;

:tipo2 | ?( )( )
|	;? 1? ( drop popvar ; )
	|popvar
	dropvar
	;

:es)	|)
	sst@ 0? ( drop tipo0 ; )
	1- 0? ( drop tipo1 ; )
	1- 0? ( drop tipo2 ; )
	drop | ( ? )(  )
	popvar ;

:esFin
	pano 1? ( drop ; ) drop
	1 'cntfin +! ;

|--------------------
:usoDcalc | u --
	deltaD swap - usoD min 'usoD ! ;

| adr adrt t tabla
:esPal | palabra
	dup 4 - @ 8 >>
	pick3 =? ( drop $8 flags or 'flags ! ; ) | es recursiva?
	nro>mov @
	dup 16 << 24 >> 1+ 'nivel !
	dup 24 << 24 >> usoDcalc
|	dup 24 >> 'deltaR +! | no se propaga, es flujo de ejecucion
	8 << 24 >> 'deltaD +!
	;

:esStr | calcula deltaD de string
	dup 4 - @ tok>str strusestack nip neg 'deltaD +! ;

:esExe | calcular deltaD de palabra llamada
	| averiguar palabra en pila !!!
	dup 4 - @ 8 >> | NO

	nro>mov @
	dup 16 << 24 >> 1+ 'nivel !
	dup 24 << 24 >> usoDcalc
|	dup 24 >> 'deltaR +! | no se propaga, es flujo de ejecucion
	8 << 24 >> 'deltaD +!
	;

#acct 0 esPal es( es)( es) es[ es] esFin usaR esStr esExe

:prosstoken | a -- a.
	@+ $ff and 2 << 'deltainternos +
	c@+ usoDcalc
	c@+ 'deltaD +!
	c@+ 'deltaR +!
	c@ 2 << 'acct + @ exec ;

|-----------------------------
:resetvars | --
	0 'usoD !
	0 'deltaD !
	0 'deltaR !
	0 'nivel !
	0 'flags !
	0 'cntfin !
	0 'pano !
	0 'cano !
	'pilaint 'pilaint> !
	 'sst 'sst> !
	;

:setvars | nro -- nro
	deltaR 8 <<
	deltaD $ff and or 8 <<
	nivel $ff and or 8 <<
	usoD $ff and or
	over nro>mov !
	cntfin 1 >? ( $2 flags or 'flags ! ) drop
	cano 1? ( $4 flags or 'flags ! ) drop
	flags 16 << over nro>info
	dup @ rot or
	| inline flag
	$71000 nand? (  | no dir, no R, no ;;, no []
		pick2
		cntwords <? (
			nro>len 10 <? ( drop $100 or )( drop ) | inline
			)( drop )
		)
	swap ! | acumula flags
	;

|----- analiza codigo
:analisiscode | nro -- nro
	resetvars
	dup nro>toklen
	( 1? )( 1- swap	prosstoken swap ) 2drop
	setvars ;

|-----------------
:tokpal | tok -- userd Dstack Rstack
	8 >>
::nro>udr | nro -- userd Dstack Rstack
	nro>mov @
	dup 24 << 24 >> swap
	dup 8 << 24 >> swap
	24 >> ;

::tok>udr | tok -- userd Dstack Rstack
	dup $ff and
	8 =? ( drop tokpal ; ) nip
	|18 =? ( ) | exec modifica segun a quien llama
	2 << 'deltainternos +
	c@+ swap
	c@+ swap
	c@ ;

|---- llamadas entre palabras
#pilapend>		| pila de pendientes

:addw | w --
	pilapend> !+ 'pilapend> ! ;

:addcall | n -- nant
	nro>calls dup @ dup 1+ rot ! ;

:useaddr | n --
	nro>info dup @ $1000 or swap ! ;

:overcode | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) 2drop ;

:overdire | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) drop useaddr
|-------------------- caso !+ w!+ c!+
	pick2 @ $ff and
	85 <? ( drop ; ) 92 >? ( drop ; )
	drop
	over 8 >> 1+ useaddr
|--------------------
	;

:reccod | nrop -- nrop
	dup nro>toklen
	( 1? )( 1- swap
		@+ dup $ff and
		8 =? ( overcode ) | call word
		9 =? ( overcode ) | var
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop swap ) 2drop
	;

:recdat | nrop -- nrop
	dup 5 << 'indicepal + 4+ @
	( @+ dup $ff and
		1 =? ( 0 nip ) | corta con defc
		2 =? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		8 =? ( overdire ) | call word (dir word)
		9 =? ( overdire ) | var (dir var)
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop )
	3drop
	;

|----------- indice de usadas
#indexw
#:cntw

::ind2nro | nroindex -- nroreal
	2 << indexw + @ ;

:makeindex
	here 'indexw !
	[ drop dup , ; ] diccmap
	here indexw - 2 >> 1- 'cntw !
	;

|---
:showprogreso
	scr 32 gc.top negro gc.fbox
	fonti2 home blanco
	"post compiler... " print cr
	redraw ;

|----- analiza variable
#cntdv     | dir vars
#cntdc     | dir codigo
#cnts      | string
#cntn0     | no ceros (0 puede ser direccion)
#deltaS

:copydeltaS | ar v -- ar v
	over 4 - @ 8 >> nro>mov @ 'deltaS ! ;

|3 :,,litd | n --	numero decimal
|4 :,,lith | n --	numero hexa
|5 :,,litb | n --	numero binario
|6 :,,litf | n --	numero punto fijo
|7 :,,lits | n --	string
|8 :,,word | n --  word <---- debe ser calculado
|9 :,,var | n --  var
|10:,,dword | n --  dir word
|11:,,dvar | n --  dir var
:sumavars
	2 >? ( 7 <? ( over 4 - @ tok>cte 1? ( 1 'cntn0 +! ) drop  ) )
	7 =? ( 1 'cnts +! )
	8 =? ( 1 'cntdc +! copydeltaS ) 10 =? ( 1 'cntdc +! copydeltaS )
	9 =? ( 1 'cntdv +! ) 11 =? ( 1 'cntdv +! )
	;

|--- info de variables
| valor               0
| direccion           1
| direccion codigo    2
| string              3
| lista valores       4
| lista direcciones   5
| lista dir codigos   6
| lista strings       7
| estructura multiple 8
|--------------------
:decodeinfov | cnt -- cnt iv
	cntdv cntdc or cnts or
	0? ( drop 2 <? ( 0 ; ) 4 ; ) drop | todos numeros
	cntdv cntdc or
	0? ( drop 2 <? ( 3 ; ) 7 ; ) drop | hay string, no dv ni dc
	cntdv
	0? ( drop 2 <? ( 2 ; ) 6 ; ) drop | direccion de codigo
	2 <? ( 1 )( 5 ) ;                 | direccion de dato


:analisisvar |  nro -- nro
	0 'deltaS !
	0 'cntdv !
	0 'cntdc !
	0 'cnts !
	0 'cntn0 !
	0 over nro>tok
	( @+ $ff and 2 >? )( 	 | dirv n c
		sumavars
		18 <? ( drop swap 1+ swap )( drop )
		) 2drop
	decodeinfov 16 <<
	pick2 nro>info @ or pick2 nro>info !
	over 5 << 'indicepal + 16 + !
	deltaS over nro>mov !
	;

:analisis
	drop 
	dup 5 << 'indicepal + 8 + @
	1 and? ( drop analisisvar ; )
	drop analisiscode ;

|--------- COMPILA TOKENS 2da PASADA
::tokenpost
	prog> 'here !
	|-------- arbol de llamadas
	showprogreso
	mark
	cntwords dup addcall drop
	here !+ 'pilapend> !
	( pilapend> here >? )(
		4 - dup 'pilapend> ! @ | palabra a agregar
		dup 5 << 'indicepal + 8 + @
		1 and? ( drop recdat )( drop reccod )
		drop )
	drop
	empty
	|-------- indice de usadas
	makeindex
	|-------- analisis+profundo
	'analisis diccmap
	;
