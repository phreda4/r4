| r4js.txt
| PHREDA 2010
|---------------------------------------
^r4/system/r4code.txt

|------------------------------------------------
| genera codigo de bytecodes con mapa de memoria
| 0			-Reservado para null (podria poner un 0)
| 1..		-Code
| inidata..	-Data
| inifree..	-Free
|------------------------------------------------
#ULTIMAP $94

#mboot
#sizenow 0
#inidata 0
#inifree 0

#lastcall
#salto

|--------- edit-code
#ncar
#nlin
#nombre )( 64

:cargaeditornl
	'ncar "mem/edit-code.mem" load drop ;

:grabaeditornl
	'ncar 72 "mem/edit-code.mem" save ;

|----- pila de compilador
#pilac )( 128
#pilac> 'pilac

:inipilac 'pilac 'pilac> ! ;
:>pilac pilac> !+ 'pilac> ! ;
:<pilac -4 'pilac> +! pilac> @ ;
:anida pilac> 'pilac - ;


:macro;
	lastcall 0? ( ",0" ,s drop ; )
	$34 swap c! | 4 (jmp) =$34(ascii)
	;
:macro(
:macro)(
:macro)
	8 >> 0? ( drop ; )
	",%d" ,print
	;
:macro[
:macro]
	drop
	;

#fmacros 'macro; 'macro( 'macro)( 'macro) 'macro[ 'macro]

|--------- calc code&data size
:sizcad | adr --
	0 swap ( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop 1+ ; ) ) drop swap 1+ swap ) 2drop 1+ ;

:sdefc | --  define codigo
:sdefv | --  define variable
	drop ;

:slit
	tok>cte 0 >=? ( 255 ULTIMAP - <? ( drop 1 'sizenow +! ; ) )
:slitS
:sword | n --  word
:svar | n --  var
:sdword | n --  dir word
:sdvar | n --  dir var
	5 'sizenow +!
	drop
	;

#smacs sdefc sdefv slit slit slit slit slitS sword svar sdword sdvar

:smac | val nro
	1- 2 << 'smacs + @ exec ;

:stok | a -- a.
	@+ dup $ff and | val tok
	12 <? ( smac ; )
	12 -
|	6 <? ( 2 << 'fmacros + @ exec 0 'lastcall ! 0 'salto ! drop ; )
	6 >? ( 19 <? ( 1 )( 0 ) )( 0 )  'salto !
	1 'sizenow +!
	2drop ;

:cadaw	| nropal cntlla -- nropal
	drop
	dup nro>toklen
	( 1? )( swap stok swap 1- ) 2drop ;

:codesize
	1 'sizenow !
	'cadaw wordmap
	sizenow 1+ 'inidata !
	;

|---datasize

:mem0 | nro --
	drop 4 'sizenow +! ;
:mem1 | nro --
	drop 2 'sizenow +! ;
:mem2 | nro --
	drop 1 'sizenow +! ;
:mem3 | nro --
	'sizenow +! ;

#gmem 'mem0

:gstr | adr --
	dup ( c@+ 1? )( drop ) drop
	swap - 1+ 'sizenow +! drop ;

:accpal | val instr --
	7 <? ( drop tok>cte gmem exec ; ) 	| nro
	7 =? ( drop tok>str	gstr ; )			| str
	12 <? ( drop 8 >>
			dup nro>var? 1? ( drop nro>mem )( drop nro>tok )
			mem0 ; )	| pal
	13 =? ( 2drop 'mem2 'gmem ! ; ) | (
	14 =? ( 2drop 'mem3 'gmem ! ; )	| )(
	16 =? ( 2drop 'mem1 'gmem ! ; ) | [
	2drop 'mem0 'gmem ! ;

|idec ihex ibin ifix istr	3 4 5 6 7
|iwor ivar idwor idvar      8 9 10 11
|i;							12
|i(	i)(	i) i[ i]			13 14 15 16 17

:addmem | inifree adr1token -- inifree adr1token
	dup @  | inicio tokens
	'mem0 'gmem !
	( @+ 1? )(
		dup $ff and
		3 <? ( 3drop ; ) | # o :
		17 >? ( 3drop ; ) | o > ]
		accpal
       )
	2drop
	;

|--- reserva memoria para dicc de memoria y memoria de vars
| 1do recorre variables,
|     asigna direccion real y valor en direccion

:cadadd | nropal cntll -- nropal
	drop
	dup 5 << 'indicepal +	| nro dirw
	sizenow over 4+ 		| nro dirw free tok
	addmem
	sizenow pick2 =? ( 4 'sizenow +! ) drop | si es variable sin nros
	3drop
	;

:cadawd | nropal cntlla -- nropal
	drop
	;

:datasize
	'cadawd wordmap
	'cadadd	varmap
	sizenow 1+ 'inifree !
	;

|-------- write code
:tobyte | nro -- n3 n2 n1 n0
	dup 24 >> swap
	dup 8 << 24 >> swap
	dup 16 << 24 >> swap
	24 << 24 >> ;

:,defc | --  define codigo
:,defv | --  define variable
	":#" ,print
	drop ;

:,lit
	tok>cte
	0 >=? ( 255 ULTIMAP - <? ( ULTIMAP + ",0x%h" ,print ; ) )
	tobyte ",1,%d,%d,%d,%d" ,print ;
	;

:,litS
	tok>cte ",S%d" ,print
	;
:,word | n --  word
	here 1+ 'lastcall !
	tok>mem tobyte ",3,%d,%d,%d,%d" ,print
	;
:,var | n --  var
:,dword | n --  dir word
:,dvar | n --  dir var
	drop
	;

#macs ,defc ,defv ,lit ,lit ,lit ,lit ,litS ,word ,var ,dword ,dvar

:,mac | val nro
	1- 2 << 'macs + @ exec ;


:,tok | a -- a.
	@+ dup $ff and | val tok
	12 <? ( ,mac ; )
	12 -
|	6 <? ( 2 << 'fmacros + @ exec 0 'lastcall ! 0 'salto ! drop ; )
	6 >? ( 19 <? ( 1 )( 0 ) )( 0 )  'salto !
	",0x%h" ,print
	drop ;

:bytew | nropal cntlla -- nropal
	drop
	dup nro>toklen
	( 1? )( swap ,tok swap 1- ) 2drop
	,cr ;

:writecode
	'bytew wordmap
	;

|-------- write data
:cpycad | adr --
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop "0," ,s ; ) ) "%d," ,print ) 2drop "0," ,s ;

:bytedw | nropal cntlla -- nropal
	drop
	;
:byted	| nropal cntlla -- nropal
	drop
	;
:writedata
	'bytedw wordmap
	'byted varmap
	;

:makejs
	codesize
	datasize
	mark
	"// bytecode generator" ,s ,cr
	"var ipm=" ,s mboot ,d ,cr
|	sizenow "sizenow:%d" ,print ,cr
 	inidata	inifree "if:%d id:%d" ,print ,cr

	"var m=[0" ,s ,cr
	writecode
|	cntw ind2nro 5 << 'indicepal + 4+ gencod
	writedata
	"]" ,s ,cr
	"mv/plain.txt" savemem
	empty
	;

:main
	cargaeditornl
	mark
	'nombre tokencomp
	tokenpost

	makejs
|	"mv/tokens.txt" savetokens
	empty
	usogui
	fonti
	show clrscr verde
		"mv/plain.txt generado" print
		'exit >esc<
		cmano ;

: main ;