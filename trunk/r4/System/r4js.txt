| r4js.txt
| PHREDA 2010
|---------------------------------------
^r4/system/r4code.txt

|------------------------------------------------
| genera codigo de bytecodes con mapa de memoria
| 0			-Reservado para null (podria poner un 0)
| 1..		-Code
| inidata..	-Data
| inifree..	-Free
|------------------------------------------------
#lastbyte $98

#mboot
#sizenow 0
#inidata 0
#inifree 0

|--------- edit-code
#ncar
#nlin
#nombre )( 64

:cargaeditornl
	'ncar "mem/edit-code.mem" load drop ;

:grabaeditornl
	'ncar 72 "mem/edit-code.mem" save ;

|---------- aux
:isbyte | nro -- nro 1/0
	-? ( 0 ; ) $ff lastbyte - >? ( 0 ; ) 1 ;


:nro>dicn   8 >> "w%h" mprint ;		| w<nro palabra>


:coldefw ":" ,s nro>dicn ,s ;
:coldefv "#" ,s nro>dicn ,s ;

:colitd
:colitf
:colitb
:colith tok>cte "%d" ,print ;
:colits	34 ,c tok>str cpycad 34 ,c ;

:colwor
:colvar
	nro>dicn ,s ;
:coldwo
:coldva
	"'" ,s nro>dicn ,s ;

#codei 0 coldefw coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

:,token | a -- a.
	@+ dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	nro>macro ,s ;

||| Codigo
:gencod | adrr --
	dup @ swap 12 + @
	( 1? )( 1- swap ,sp ,token swap
		$1f nand? ( ,cr ) )
	2drop ;

||| Variables
:genvar | adrr --
	@
	( @+ dup $ff and
		1 =? ( 0 nip ) | corta con defc
		2 =? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		,sp
		12 <? ( 2 << 'codei + @ exec )( nip nro>macro ,s )
		$7c nand? ( ,cr )
		)
	3drop ,cr ;


:gencodigo | nro --
	dup 5 << 'indicepal +
	dup 8 + @ 1 and? ( 'genvar "#" )( 'gencod ":" ) ,s nip
	swap
	4+ pick2 "w%h" ,print      | w<nro palabra>
	swap exec | ,cr
	drop
	;

|--------- calc code&data size
:sizcad | adr --
	0 swap ( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop 1+ ; ) ) drop swap 1+ swap ) 2drop 1+ ;

:cadaw
	;

:codesize
	1 'sizenow !
	'cadaw wordmap
	sizenow 1+ 'inidata !
	;

:cadawd
	;

:cadadd
	;

:datasize
	'cadawd wordmap
	'cadadd	varmap
	sizenow 1+ 'inifree !
	;

|-------- write code
:bytew
	;

:writecode
	'bytew wordmap
	;

|-------- write data
:cpycad | adr --
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop "0," ,s ; ) ) "%d," ,print ) 2drop "0," ,s ;

:bytedw
	;
:byted
	;
:writedata
	'bytedw wordmap
	'byted varmap
	;

:makejw
	codesize
	datasize
	mark
	"// bytecode generator" ,s ,cr
	"var ipm=" ,s mboot ,d ,cr
	"var m=[0," ,s ,cr
	writecode
|	cntw ind2nro 5 << 'indicepal + 4+ gencod
	writedata
	"]" ,s ,cr
	"mv/plain.txt" savemem
	empty
	;

:main
	cargaeditornl
	mark
	'nombre tokencomp
	tokenpost
	makejs
	empty
	usogui
	fonti blanco
	show clrscr
		"mv/plain.txt generado" print
		'exit >esc<
		cmano ;

: main ;