| reanimator.txt
| PHReda Nov2006
|----------------
^r4/lib/gui.txt
^r4/lib/dlg.txt
^r4/lib/fontt.txt
^r4/lib/trazo.txt
^r4/lib/rsprite.txt
^r4/lib/trace.txt

|---- memoria de la animacion
#rmation
#rmation>

|---- memoria aux para editar
#actframe 0
#cntframes 0
| 'rmation size
#frames )( 8192

:savermt | "" --
	rmation rmation> over - rot save ;

:loadrmt | "" --
	rmation swap load 'rmation> ! ;

#orden 0
#nrormt 0
#nomrmt )( 32

|---- cuadro actual
#cambio )( $ffff
#dibujo )( $ffff
#dibujo> 'dibujo
#dibujo< 'dibujo

#seleccion )( $ffff
#seleccion> 'seleccion

#polys )( $fff
#polys>

#cambio>
#inipnt #finpnt

#x1 #y1 #x2 #y2

#puntocursor 0
#puntosel 0
#polycursor -1

#colorultimo

#xa #ya
#xv #yv
#xf #yf

|--- modos
#modo 0
#mododibu $14 | $10 $14 $18 $1c

|---
:,dib | v --
	dibujo> !+ 0 over ! 'dibujo> ! ;
:,sel | v --
	seleccion> !+ 'seleccion> ! ;
:,poly | v --
	polys> !+ 'polys> ! ;

|---- dibujo
:dibujo.changes | -- cntdwords
	dibujo< 'dibujo - 'cambio + 0 over ! 'cambio> !
	0 'cambio
	( cambio> <? )( @+ 1? ( drop swap 1+ swap )( drop )
		) drop
	2* 	| resta 1 por cada lista de puntos consecutivas **
	'cambio ( cambio> <? )( @+
		1? ( drop dup @ 1? ( drop swap 1- swap )( drop ) )( drop )
		)
	drop
	;

:dibujo.size | -- cntdwords
	dibujo> dibujo< - 2 >>	| trazos nuevo
	dibujo.changes + 		| modificados y borrados
	1+ 						| la marca de tiempo..
	;

:cambio.clear
	'cambio 'dibujo
	( dibujo< <=? )( 4+ 0 rot !+ swap )
	2drop
	;

:dibujo.clear
	'dibujo 0 over ! dup 'dibujo> ! 'dibujo< !
	;

:resetedit
	0 dup 'puntocursor ! 'polycursor !
	coloractual 1- 'colorultimo !
	;

|--- rearma indice
:reindex
	0 'cntframes !
	'frames >r
	rmation dup
	( rmation> <? )(
		@+ $1f and | rm ac v
		0? ( drop
			over r!+
			dup rot - 2 >>
			r!+
			1 'cntframes +!
			dup dup )
		drop )
	0 swap !
	drop rdrop ;

|--- rearma polys
:repoly
	'polys >r
	'dibujo ( dibujo> <? )(
		@+ $1f and
		$10 =? ( over 4 - r!+ )
		$14 =? ( over 4 - r!+ )
		$18 =? ( over 4 - r!+ )
		$1c =? ( over 4 - r!+ )
		drop ) drop
	r> 'polys> !
	resetedit
	;

|------------------
| copia el dibujo estatico
:rframecopy | mem -- cini
	( @+ dup $1f and $a >? )( drop ,dib ) 2drop
	4 - ;

| copia la modificacion
:setchangemodi | cini --
    cambio.clear
	( @+ $1f and? )(
		dup 8 >> $fff and 2 << 'dibujo +
		swap 12 8 + >> $fff and 2 << 'dibujo +
		( over <? )(
			1 over 'dibujo - 'cambio + !
			rot @+ rot !+ rot swap ) 2drop
		) 2drop ;

:setchange | cini ---
	( @+ $1f and? )(
		dup 8 >> $fff and 2 << 'dibujo +
		swap 12 8 + >> $fff and 2 << 'dibujo +
		( over <? )( rot @+ rot !+ rot swap ) 2drop
		) 2drop
	dibujo> 'dibujo< !
	;

|-----------------
#timenow
#cini #cfin
#ct

:rframeini | adr --
	dup 'cini !
	dibujo> 4+ >r
	( @+ $1f and? )(
		dup 8 >> $fff and 2 << 'dibujo + | fin
		swap 12 8 + >> $fff and 2 << 'dibujo + | ini
		( over <? )( @+ r!+ ) 2drop
		) drop
	'cfin !
	rdrop
	;

:lerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - ct 16 *>> + ;

:minter | v1 v2 -- vr
	over $1f and >r
	over 23 >> over 23 >> lerp 23 <<
	pick2 9 << 23 >> pick2 9 << 23 >> lerp $1ff and 14 << or
	rot 18 << 23 >> rot 18 << 23 >> lerp $1ff and 5 << or
	r> or ;

:nextframe
	50 'timenow !
	cfin dup @ 0? ( 2drop dibujo.clear rmation )( drop )
	rframecopy rframeini ;

:rframestep | --
	timenow 0? ( drop nextframe ; )
	1- dup 'timenow !
	1.0 swap 50 */ 'ct !
|	avanza ;
|:avanza
	dibujo> 4+ >r
	cini
	( @+ $1f and? )( swap
		over 8 >> $fff and 2 << 'dibujo +
		rot 12 8 + >> $fff and 2 << 'dibujo +
		( over <? )(
			rot @+ r@+ minter rot !+
			rot swap ) 2drop
		) 2drop
	rdrop
	;

|---- ANIMACION
:,rm | val --
	rmation> !+ 'rmation> ! ;

#rmation<
:,rmi | val --
	rmation< !+ 'rmation< ! ;

|----
:setframe | size rm nro --
	3 << 'frames + !+ ! ;

:getframesize | nro -- size
	3 << 'frames + 4+ @ ;

:getframels | nro -- lugar size
	3 << 'frames + @+ swap @ ;

:getframe | nro -- cini
	3 << 'frames + @ rframecopy ;

|--- modificados

:cadanewm | dir+4 1 -- dir+4 x
	drop
	dup 4 - 'cambio - 'inipnt !
	( @+ 1? )( drop ) drop
	dup 4 - 'cambio - 'finpnt !
	inipnt 2 >> 12 8 + << finpnt 2 >> 8 << or 1 or ,rm
	inipnt ( finpnt <? )(
		dup 'dibujo + @ ,rm
		4+ ) ;

:newmodi
	'cambio ( cambio> <? )(
		@+ 1? ( cadanewm ) drop
		) drop ;

:cadacpym | dir+4 1 -- dir+4 x
	drop
	dup 4 - 'cambio - 'inipnt !
	( @+ 1? )( drop ) drop
	dup 4 - 'cambio - 'finpnt !
	inipnt 2 >> 12 8 + << finpnt 2 >> 8 << or 1 or ,rmi
	inipnt ( finpnt <? )(
		dup 'dibujo + @ ,rmi
		4+ ) ;

:cpymodi
	'cambio ( cambio> <? )(
		@+ 1? ( cadacpym ) drop
		) drop ;

|--- dibujo > animacion
:newframe | fa --
	dibujo.size rmation> pick2 setframe
	1+ 'cntframes !
	dibujo< ( dibujo> <? )( @+ ,rm ) drop	| copio los nuevos

	newmodi	| copio los modificados

	100 5 << ,rm | marca de frame
	reindex
	;

:agrandalugar | antsize actsize --
	2dup
	2 << rmation< +
	swap 2 << rmation< + | actual anterior
	rmation> over - 2 >>
	move>
	swap - 2 << 'rmation> +!
	;

:ajustalugar | antsize actsize -- ; 'rmation< actul inico
	over =? ( 2drop ; )
	over >? ( agrandalugar ; )  | menor el anterior
	| mayor el anterio
	| buscar nodos perdidos ;ds sr cn
	2 << rmation< +
	swap 2 << rmation< +
	rmation> over - 2 >>
	move ;

:setdibujo
	actframe cntframes =? ( newframe ; )
	getframels dibujo.size rot 'rmation< !
	ajustalugar
	dibujo< ( dibujo> <? )( @+ ,rmi ) drop	| copio los nuevos

	cpymodi 	| copio los modificados

	100 5 << ,rmi | marca de frame
	reindex ;

|-- animacion > dibujo
:getdibujo
	actframe cntframes =? ( drop ; )
	| retrocede y rearma dibujo
	| ** buscar primer cuadro 5!
	dibujo.clear
	0 ( over <? )( dup getframe setchange 1+ )
	getframe setchangemodi | el ultimo no ajusta dibujo<
	drop
	repoly
	;

:getsubdibujo	| no limpia el trazo actual
	dibujo> 'dibujo< !
	cambio.clear
	;

|------ GC para dibujo
#xcycwh 0 0 0 0
#xcam 0 #ycam 0 #zcam 2.5

:savebox
	xc yc w h 'xcycwh !+ !+ !+ ! ;

:loadbox
	'xcycwh @+ 'h ! @+ 'w ! @+ 'yc ! @ 'xc ! ;

:genvista
	scr omode
	xcam ycam zcam mtrans
	-1.0 -1.0 0 project3d
	1.0 1.0 0 project3d      | x y x y
	pick3 pick2 + 2/ 'xc !
	pick2 over + 2/ 'yc !
	rot - abs >r - abs r> dim
	savebox
	;

:drawdibujo
	loadbox
	omode
	xcam ycam zcam mtrans
	'dibujo rsdraw
	blanco gc.box | recuadro
	;


|----------- EDICION ---------------

|------- ellije seleccion
:inselm? | -- 0/1
	xymouse
	y2 >? ( 2drop 0 ; ) y1 <? ( 2drop 0 ; ) drop
	x2 >? ( drop 0 ; ) x1 <? ( drop 0 ; ) drop
	1
	;

:insel? | ptr --
	3d>xy
	y2 >? ( 2drop ; ) y1 <? ( 2drop ; ) drop
	x2 >? ( drop ; ) x1 <? ( drop ; ) drop
	dup 4 - ,sel
	;

:2sort | x y -- max min
	over >? ( swap ) ;

:selecionelije
	x1 x2 2sort 'x1 ! 'x2 !
	y1 y2 2sort 'y1 ! 'y2 !
	'seleccion 'seleccion>  !
	'dibujo
	( @+ 1? )(
		dup $1f and $f >? ( drop insel? )( 2drop )
		) 2drop
	'seleccion seleccion> <? ( drop ; ) drop
	0 dup 2dup 'x1 ! 'y1 ! 'x2 ! 'y2 !
	;

|------ elije nodo
:indot | x y x y -- 1/0
	rot - dup * swap rot - dup * + | dx2+dy2
	64 <=? ( 1 )( 0 ) nip ; |

:tocopunto
	3d>xy xymouse indot 0? ( drop ; ) drop
	dup 4 - 'puntocursor !
	;

:delnode
	puntocursor 0? ( drop ; )
	drop
	;

:newnode
	puntocursor 0? ( drop ; )
	drop
	;

:marcapunto | punto --
	dibujo> >=? ( drop ; ) | si es nuevo no marca
    'dibujo - 'cambio +
	dup @ 1 or swap !
	;

|----- seleccion
:limite | xy --
	3d>xy
	y1 <? ( dup 'y1 ! ) y2 >? ( dup 'y2 ! ) drop
	x1 <? ( dup 'x1 ! ) x2 >? ( dup 'x2 ! ) drop
	;

:allpolys
	1 'modo !
	0 'puntocursor !
	'seleccion 'seleccion>  !
	1.0 dup 'x1 ! 'y1 !
	-1.0 dup 'x2 ! 'y2 !
	'dibujo
	( @+ 1? )(
		dup $1f and $f >? ( drop limite dup 4 - ,sel )( 2drop )
		) 2drop
	-4 dup 'x1 +! 'y1 +!
	4 dup 'x2 +! 'y2 +!
	;

:nonepolys
	0 'puntocursor !
	'seleccion 'seleccion>  !
	0 dup 2dup 'x1 ! 'y1 ! 'x2 ! 'y2 !
	;

:npoly | adr nro+1 -- adr nro+1
	1 'modo !
	0 'puntocursor !
	'seleccion 'seleccion>  !
	1.0 dup 'x1 ! 'y1 !
	-1.0 dup 'x2 ! 'y2 !
	over @
	( @+ dup $1f and $f >? )(
		drop limite dup 4 - ,sel
		) 3drop
	-4 dup 'x1 +! 'y1 +!
	4 dup 'x2 +! 'y2 +!
	;

:setmovesel
	xymouse
	2dup 'yv ! 'xv !
	xy>gc d>xy
	'yf !
	'xf !
	;

:changesel
	'seleccion
	( seleccion> <? )(
		@+ dup @ 3d>xyv
		ya + swap xa + swap
		xyv>3d over !
        'dibujo - 'cambio + 1 swap ! | marca cambio
		) drop
	;

:movesel
	xymouse
	2dup xy>gc d>xy
	dup yf - 'ya ! 'yf !	| voy perdiendo precision
	dup xf - 'xa ! 'xf !   | y el trazo de desplaza
	dup yv -
	dup 'y1 +! 'y2 +!
	'yv !
	dup xv -
	dup 'x1 +! 'x2 +!
	'xv !
	changesel
	;

:delseleccion
	;
:cloneseleccion
	;

:marcasel
	'seleccion
	( seleccion> <? )(
		@+ marcapunto
		) drop

	;
|---- draw
:puntosedita
	'dibujo
	( @+ 1? )(
		dup $1f and $f >? ( drop 3d>xy 2 box )( 2drop )
		) 2drop
	;

:seleccionycaja
	x1 y1 x2 y2 caja
	'seleccion seleccion> =? ( drop puntosedita ; )
	( seleccion> <? )( @+ @ 3d>xy 2 box ) drop
	;

:drawedit | ad --
	blanco
	puntocursor 0? ( drop seleccionycaja ; )
	puntosedita
	@ 3d>xy 3 box
	;

|---- edit
:onDNedit | ad --
	inselm? 1? ( 'puntosel ! setmovesel ; ) drop
	0 'puntocursor !
	'dibujo
	( @+ 1? )(
		dup $1f and $f >? ( drop tocopunto )( 2drop )
		) 2drop
   	puntocursor 1? ( drop ; ) drop
	'seleccion 'seleccion>  !
 	xymouse 2dup 'y1 ! 'x1 ! 'y2 ! 'x2 !
	;

:onMOVEedit
	puntosel 1? ( drop movesel ; ) drop
	puntocursor 0? ( drop xymouse 'y2 ! 'x2 ! ; )
	xymouse xy>gc
	d>xy 5 >> $1ff and 14 << swap
	5 >> $1ff and 23 <<
	or
	over @ $1f and or
	over !
    'dibujo - 'cambio + 1 swap ! | marca cambio
	;

:onUPedit
	puntosel 1? ( drop 0 'puntosel ! ; ) drop
	puntocursor 1? ( marcapunto ; ) drop
	selecionelije
	;


|-- moverse por la animacion
:primt
	setdibujo
	0 'actframe !
	getdibujo ;

:ultit
	setdibujo
	cntframes 1? ( 1- ) 'actframe !
	getdibujo ;

:nextt
	actframe
	cntframes >? ( drop ; )
	setdibujo
	1+ 'actframe !
	actframe cntframes =? ( drop getsubdibujo ; ) drop
	getdibujo ;

:prevt
	actframe 0? ( drop ; )
	setdibujo
	1- 'actframe !
	getdibujo ;


|------------------------------
#primero
:cadapunto | tr --
	d>xy 5 >> $1ff and 14 << swap
	5 >> $1ff and 23 <<
	or
	primero
	$10 =? ( $11 'primero ! )


	$14 =? ( $15 'primero ! )
	$18 =? ( $19 'primero ! )
	$1c =? ( $1d 'primero ! )
	or
	,dib
	;

:addtrazo
	trazo.cnt 2 <? ( drop ; ) drop
	mododibu
	$18 <>? ( coloractual colorultimo <>? ( dup 'colorultimo ! 8 << $d or ,dib )( drop ) )
	'primero !
	'cadapunto trazo.map
	mododibu
	$18 =? ( coloractual dup 'colorultimo ! 8 << $e or ,dib )
	drop
	;

:mododraw
	drawdibujo
    coloractual ink
	'addtrazo trazo.draw

	verde
	0 "DRAW" sp btnt
	verde oscuro
	[ 1 'modo ! nonepolys ; ] "EDIT" sp btnt
	[ 2 'modo ! ; ] "VISTA" sp btnt
	sp
	cyan oscuro
	[ $10 'mododibu ! ; ] "LINE" sp btnt
	[ $14 'mododibu ! ; ] "GLINE" sp btnt
	[ $18 'mododibu ! ; ] "POLY" sp btnt
	[ $1c 'mododibu ! ; ] "CIRCLE" sp btnt
	0 " DEL " sp btnt
	;

:modoedit
	drawdibujo
	'onDNedit
	'onMOVEedit
	'onUPedit
	guiMap
	drawedit

	verde oscuro
	[ 0 'modo ! ; ] "DRAW" sp btnt
	verde
	0 "EDIT" sp btnt
	verde oscuro
	[ 2 'modo ! ; ] "VISTA" sp btnt
	sp
	cyan oscuro
	[ newnode ; ] " NEW " sp btnt
	[ delnode ; ] " DEL " sp btnt
	;

|-----------------------
:vista.move
	xymouse
	dup yv - 0.001 * 'ycam +! 'yv !
	dup xv - 0.001 * 'xcam +! 'xv !
	genvista
	;

:vista.dn
	xymouse 'yv ! 'xv ! ;

:modovista
	drawdibujo

	'vista.dn
	'vista.move
	guiDnMove

	verde oscuro
	[ 0 'modo ! ; ] "DRAW" sp btnt
	[ 1 'modo ! nonepolys ; ] "EDIT" sp btnt
	verde
	0 "VISTA" sp btnt
	sp
	cyan oscuro
	[ -0.1 'zcam +! genvista ; ] " Z+ " sp btnt
	[ 0.1 'zcam +! genvista ; ] " Z- " sp btnt
	;

:modoactual
	modo
	0? ( drop mododraw ; )
	1- 0? ( drop modoedit ; )
	1- 0? ( drop modovista ; )
	drop ;

:resetdib
	0 'actframe !
	rmation 'rmation> !
	reindex getdibujo
:dibcls
	dibujo.clear
	0 'modo !
	;

:debug
|	blanco cr
|	'cambio 'dibujo ( dibujo> <? )( dibujo< =? ( "* " print )
|		swap @+ 1? ( verde )( blanco ) drop swap
|		@+ "%h " allowcr print ) 2drop cr
	amarillo
	rmation ( rmation> <=? )(
		cini =? ( verde ) cfin =? ( rojo )
		@+
|		$1f nand? ( verde )( rojo )

		"%h " allowcr print ) drop cr
	rmation rmation> over - cr "%h %h " print

|	0 ( cntframes <? )( dup 3 << 'frames + @ "%h " print 1+ ) drop cr
|	coloractual "%h" print
|	rojo
|	0 ( cntframes <? )(
|		dup "%d : " print
|		dup 3 << 'frames + @+ swap @ | adr cnt
|		( 1? )( swap @+ "%h " allowcr print swap 1- ) 2drop cr
|		1+ ) drop cr
	;

|----------- PLAY ---------------

:play | --
	usogui
	dibujo.clear
	0 dup getframe setchange
	'timenow !
	show clrscr verde
		timenow "%d" print
        drawdibujo
		'exit >esc<
		10 .mseg .restart
		timenow
		1+ cntframes >=? ( 0 nip dibujo.clear )
		dup getframe setchange
		'timenow !
		;


:play2 | --
	usogui
	dibujo.clear
	rmation rframecopy rframeini
	0 'timenow !
	show clrscr verde
		timenow "%d" print
|		debug
        drawdibujo
		rframestep
		'exit >esc<
		;

:rmation.edit
	genvista
	10 sh 230 - dlgColat!
	usogui fonti |font-vard-12-bold
	repoly
	show clrscr cr
		modoactual
		cr cr
		violeta oscuro
		'primt dup <pgup> "|<" sp btnt
		'prevt dup <le> "<" sp btnt
		blanco actframe " %d" print
		violeta oscuro
		'nextt dup <ri> ">" sp btnt
		'ultit dup <pgdn> ">|" sp btnt
		sp verde
		[ setdibujo play2 getdibujo ; ] dup <f3> cntframes "|%d>" sp btnt
		sp rojo oscuro
		[ setdibujo exit ; ] dup >esc< "EXIT" sp btnt
		'resetdib "RESET" sp btnt
		'dibcls "CLS" sp btnt
		verde dup " -%d-" print cr cr

|		debug

		0 rows 2 - gotoxy
		coloractual ink
		sp dlg.color
		violeta
		'nonepolys "0" sp btnt
		'allpolys "ALL" sp btnt
		0 'polys ( polys> <? )(
			swap 1+ 'npoly over "%d" sp btnt
			swap 4+ ) 2drop
		cminiflecha ;


:rmation.mem
	mark
	here dup 'rmation ! 'rmation> !
	0 dup 'actframe ! 'cntframes !
	2 linegr!
	0 'modo !
	dibujo.clear
	resetedit
	;

|**********************************
: 	33 0 paper
	rmation.mem
	"mem/notepad.rmt" loadrmt
	reindex getdibujo
	rmation.edit
	"mem/notepad.rmt" savermt
	;
