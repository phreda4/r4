;		| --	R: a -- 	fin
(
)
)(
[
]
0? 		| --		0 el tope de la pila ?
+? 		| --		positivo el tope de la pila ?
-?		| --		negativo el tope de la pila ?
1? 		| --		distinto a 0 el tope de la pila ?
=?		| a b -- a		a = b ?
<?		| a b -- a		a < b ?
>?		| a b -- a		a > b ?
<=?		| a b -- a		a <= b ?
>=?		| a b -- a		a >= b ?
<>?		| a b -- a		a <> b ?
AND?	| a b -- a		a and b ?
NAND?	| a b -- a		a nand b ?
EXEC  	| vector --  	llama al codigo del vector ( 0 no llama a nadie)
DUP 	| a -- a a
DROP 	| a --
OVER 	| a b -- a b a
PICK2 	| a b c -- a b c a
PICK3 	| a b c d -- a b c d a
PICK4 	| a b c d e -- a b c d e a
SWAP 	| a b -- b a
NIP		| a b -- b
ROT 	| a b c -- b c a
2DUP 	| a b -- a b a b
2DROP   | a b --
3DROP   | a b c --
4DROP   | a b c d --
2OVER	| a b c d -- a b c d a b
2SWAP	| a b c d -- c d a b
>R 		| a --      R: -- a
R> 		| -- a		R: a --
R		| -- a      R: a -- a
R+		| v --		R: a -- a+v
R@+		| -- v      R: a -- a+4
R!+		| v --		R: a -- a+4
RDROP	| --		R: a --
AND 	| a b -- c     c = a AND b
OR 		| a b -- c     c = a OR b
XOR 	| a b -- c     c = a XOR b
NOT  	| a b -- c     c = a NOT b
+ 		| a b -- c		c=a+b
- 		| a b -- c		c=a-b
* 		| a b -- c		c=a*b
/ 		| a b -- c		c=a/b
*/ 		| a b c -- d	d=a*b/c	resultado intermedio en 64 bits
*>>		| a b c -- d	d=(a*b)>>c	 resultado intermedio en 64 bits
/MOD 	| a b -- c d	c=a/b  d=a resto b
MOD 	| a b -- c		c=a resto b
ABS		| a -- b		b=|a|
NEG 	| a -- b		b=-a
1+ 		| a -- b		b=a+1
4+		| a -- b		b=a+4
1- 		| a -- b		b=a-1
2/ 		| a -- b		b=a/2
2* 		| a -- b		b=a*2
<< 		| a b -- c		c=a<<b
>> 		| a b -- c		b=a>>b (arrastra signo)
@ 		| a -- b		b=32(a)
C@ 		| a -- b		b=8 (a)
W@		| a -- b		b=16(a)
!		| v d --		32(d) = v
C!		| v d --		8(d) = v
W! 		| v d --		16(d) = v
+! 		| v d --		32(d)=32(d)+v
C+!		| v d --		8(d)=8(d)+v
W+!  	| v d --		16(d)=16(d)+v
@+		| d -- d+4	dword
!+		| v d -- d+4
C@+		| d -- d+1	byte
C!+		| v d -- d+1
W@+		| d -- d+2	word
W!+		| v d -- d+2
MOVE	| de sr cnt --		Copia CNT dword de SR a DE
MOVE>   | de sr cnt --		Copia CNT dword de SR a DE (para atras)
CMOVE   | de sr cnt --		Copia CNT bytes de SR a DE
CMOVE>  | de sr cnt --		Copia CNT bytes de SR a DE (para atras)
MEM		| -- dir 			Direccion de inicio de memoria libre
DIR		| "foldername" –	Cambia la carpeta actual
FILE	| n -- "filename"	Nombre del archivo n
FSIZE	| n -- cnt			Tamanio del archivo
VOL		| n -- "foldername"	Nombre de la carpeta n
LOAD	| d "filename" -- e	Carga un archivo en memoria
SAVE	| d n "filename" –	Graba memoria en un archivo
UPDATE	| --		Actualiza las irq como el raton, el teclado, sonido, etc
MSEC 	| -- a 		milisegundos del sistema
TIME 	| -- h m s 	hora minutos y segundos
DATE 	| -- d m a	dia mes y anio
END 	| --		Sale del :r4, finaliza TODO, apaga la maquina virtual
RUN  	| "nom" --	Carga, compila y ejecuta el archivo nom
SW 		| -- w		Ancho de pantalla
SH 		| -- h		Alto de pantalla
CLS		| --		Limpia pantalla
REDRAW  | --		Dibuja nuevo FRAME
FRAMEV	| -- m		Memoria de video
SETXY	| x y --    pone cursor grafico en x y
PX+!	| cant --   suma cant al cursor grafico
PX!+	| color --	pone color y avanza siguiente pixel
PX@		| -- color	obtiene color del punto
PAPER	| a –-		Asigna color de fondo
INK		| a --		Asigna color de dibujo
INK@	| -- a		color de dibujo
ALPHA 	| a --		Transparencia (canal alpha)
OP 		| x y –-	Punto de origen
CP 		| x y –-	Punto de curva
LINE 	| x y –-	Traza línea
CURVE 	| x y –-	Traza curva
PLINE 	| x y --	Traza línea poligono
PCURVE 	| x y --	Traza curva poligono
POLI	| --		Traza polígono
FCOL	| c1 c2 --	2colores para degrade
FCEN	| x y --	centro de degrade
FMAT	| a b --	matriz de degrade
SFILL	| --		poligonos con color solido (ink)
LFILL	| --		poligono con degrade lineal
RFILL	| --		poligono con degrade radial (algo parecido..)
IPEN!	| v --  	vector de irq del mouse (o lapiz)
XYMOUSE | -- x y 	coordenadas de la pantalla del apuntador
BMOUSE	| -- b		estado del apuntado
IKEY!	| v --    	vector de irq del teclado
KEY		| -- s		ultima tecla pulsada (scancode)
CNTJOY	| -- cnt		cantidad de joysticks
GETJOY	| j -- a		direccion de los datos de joystick J
^^reda4.txt
keymap
keyold
>key
>ukey
clearkey
toasc
inikey
<todas>	| v --
>todas<	| v --
<visible> | v --
<cntrl>	| v --
>cntrl<	| v --
<esc>	| v --
>esc<	| v --
<esp>	| v --
>esp<	| v --
<f1>	| v --
>f1<	| v --
<f2>	| v --
<f3>	| v --
<f4>	| v --
<f5>	| v --
<f6>	| v --
<f7>	| v --
<f8>	| v --
<f9>	| v --
<f10>	| v --
<f11>	| v --
<f12>	| v --
<back>	| v --
<tab>	| v --
<enter>	| v --
<home>	| v --
<end>	| v --
<arr>	| v --
<aba>	| v --
<der>	| v --
<izq>	| v --
<ins>	| v --
<del>	| v --
<pgup>	| v --
<pgdn>	| v --
>home<	| v --
>end<	| v --
>arr<	| v --
>aba<	| v --
>der<	| v --
>izq<	| v --
>ins<	| v --
>del<	| v --
>pgup<	| v --
>pgdn<	| v --
key.push	| --
key.pop	| --
*.		| a b -- c
/.		| a b -- c
zcopy 	| des src -- des'
strcat 	| src des --
strcpy 	| src des --
strcpyl | src des -- ndes
strcpyln	| src des --
count 	| s -- s cnt
toupp 	| c -- C
tolow 	| C -- c
=word=	| s1 s2 -- 0 \ s2' 1
=		| s1 s2 -- 1/0
=pre	| s1 s2 -- 1/0
=w		| s1 s2 -- 1/0
|--- Memoria libre
here
clear
>,
,
,c
,s
,w
,n	| dec --
,h	| hex --
,b	| bin --
,ln
,cr
,eol
,sp
:,emit		| c --
,print	| s --

|--- Numero aleatorios
seed	|
rand | -- v
rerand | --
min
max
blink | -- 0/1
|--- pantalla&interaccion
.exit
.restart
.segs	| seg --
.mseg	| mseg --  R:X?
exit
show	| framerate constante (mientras pueda)
showo	| sin limitador
wait

|---- tiempo
late	| amp -- n
pinpon	| amp -- n

|--------- Vector 3d
| vector3d a 10 bits
| x=10 bits y=10 bits z=10 bits control=2bit
>z		| v -- z
>y		| v -- y
>x  	| v -- z
>xyz	| v -- x y z
3d>		| x y z -- v
|--------- Vector 2d
| vector2d de 14 bits c/control
| x=14 bits	y=14 bits  control=4bits
xy>d	| x y -- v
d>xy	| v -- x y
d>y		| v -- y
d>x		| v -- x
dxy		| v1 v2 -- dx dy
|---------- uv
| x=16 bits y= 16bits

uv> | u v -- uv
>u
>v
>uv | v -- u v

^^libtrig.txt

| bangle
|
| 0/360 grados = $0 = $8000
|  90 grados = $1ff
| 180 grados = $3ff
| 270 grados = $5ff
| 359 grados = $7ff
|
| resultado = [0..1.0) [0..$ffff]

cos		| bangle -- cos
sin		| bangle -- sin
sincos	| bangle -- sin cos
ccircle	| x y r bangle -- x y
xy+polar	| x y bangle r -- x y
ar>xy		| xc yc bangle r -- xc yc x y
sqrt		| n -- sqrt
atan2		| x y -- a
distfast	| dx dy -- dis

^^libgc.txt
|-----  cursor centro (xc,yc) ancho (w) alto (h)

xc
yc
w
h
ccx
ccy
ccw
cch

gc.push
gc.pop
|---- ubicacion y desplazamiento
pos	| xy --
+pos	| xy --
dim	| wh --
+dim	| wh --
scr	|  --   ; toda la pantalla es el cursor

fdim	| w h --  dimension en p.fijo
fpos	| x y --
fzoom	| zoom -- relativo a su tamaño
fscala | ws hs --
fgetpixel | x y -- c
gc.conv 	| w h xc yc --

@cursor | 'adr -- 'adr+
mem>dimpos | adr --

|--------- sprite en 32 bits
| fuente vectorial en 32bits | 14 - 14 - 4
>xy 		| v -- x y
xy> 		| x y -- v
whin 		| x y -- 1/0
xymousef 	| -- x y

|------------------ dibujo sobre cursor
gc.box	| --	borde recto
gc.fbox	| --	lleno recto
gc.rod	| --	redondo
gc.frod	| --	lleno redondo
gc.fcircle

|--- Ajusta mat de colores p/degrade
gc.vdeg	| c1 c2 --
gc.hdeg	| c1 c2 --
vbtn		| c1 c2 --
hbtn		| c1 c2 --

