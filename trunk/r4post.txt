| post compilador - PHREDA 2009
| asigna memoria a variables
| calcula estadisticas y flags
|---------------------------
^lib/reda4.txt
^lib/parse.txt
^lib/trace.txt
^r4comp.txt

#deltaD	0	| pila de datos
#deltaR	0	| pila de retorno
#flags	0

| dD dR ini esp
#deltainternos (
0 0 0 0 | 0
0 0 0 0 |:,,defc | n --  define codigo
0 0 0 0 |:,,defv | n --  define variable
1 0 0 0 |:,,litd | n --	numero decimal
1 0 0 0 |:,,lith | n --	numero hexa
1 0 0 0 |:,,litb | n --	numero binario
1 0 0 0 |:,,litf | n --	numero punto fijo
1 0 0 0 |:,,lits | n --	string
0 0 1 0 |:,,word | n --  word <---- debe ser calculado
1 0 0 0 |:,,var | n --  var
1 0 0 0 |:,,dword | n --  dir word
1 0 0 0 |:,,dvar | n --  dir var
)
#deltamacros (
0 0 0 0 |";" | r:-1 pero veamos
0 0 6 0 |"("
0 0 0 0 |")("
0 0 7 0 |")"
0 0 0 0 |"["
0 0 0 0 |"]"
0 0 0 0 |"0?"
0 0 0 0 |"+?"
0 0 0 0 |"-?"
0 0 0 0 |"1?"
-1 0 0 0 |"=?"
-1 0 0 0 |"<?"
-1 0 0 0 |">?"
-1 0 0 0 |"<=?"
-1 0 0 0 |">=?"
-1 0 0 0 |"<>?"
-1 0 0 0 |"AND?"
-1 0 0 0 |"NAND?"
-1 0 0 0 |"EXEC" | TOS es DC
1 0 0 0 |"DUP"
-1 0 0 0 |"DROP"
1 0 0 0 |"OVER"
1 0 0 0 |"PICK2"
1 0 0 0 |"PICK3"
1 0 0 0 |"PICK4"
0 0 0 0 |"SWAP"
-1 0 0 0 |"NIP"
0 0 0 0 |"ROT"	|--- pila
2 0 0 0 |"2DUP"
-2 0 0 0 |"2DROP"
-3 0 0 0 |"3DROP"
-4 0 0 0 |"4DROP"
2 0 0 0 |"2OVER"
0 0 0 0 |"2SWAP"
-1 1 5 0 |">R"
1 -1 5 0 |"R>"
1 0 5 0 |"R"
-1 0 5 0 |"R+"
1 0 5 0 |"R@+"
-1 0 5 0 |"R!+"
0 -1 5 0 |"RDROP"				|--- pila direcciones
-1 0 0 0 |"AND"
-1 0 0 0 |"OR"
-1 0 0 0 |"XOR"
0 0 0 0 |"NOT"  								|--- logicas
-1 0 0 0 |"+"
-1 0 0 0 |"-"
-1 0 0 0 |"*"
-1 0 0 0 |"/"
-2 0 0 0 |"*/"
-2 0 0 0 |"*>>"
0 0 0 0 |"/MOD"
0 0 0 0 |"MOD"
0 0 0 0 |"ABS"  			|--- aritmeticas
0 0 0 0 |"NEG"
0 0 0 0 |"1+"
0 0 0 0 |"4+"
0 0 0 0 |"1-"
0 0 0 0 |"2/"
0 0 0 0 |"2*"
-1 0 0 0 |"<<"
-1 0 0 0 |">>"
0 0 0 0 |"@"                | tos es DD
0 0 0 0 |"C@"
0 0 0 0 |"W@"
-2 0 0 0 |"!"
-2 0 0 0 |"C!"
-2 0 0 0 |"W!"
-2 0 0 0 |"+!"
-2 0 0 0 |"C+!"
-2 0 0 0 |"W+!"  			|--- memoria
1 0 0 0 |"@+"
-1 0 0 0 |"!+"
1 0 0 0 |"C@+"
-1 0 0 0 |"C!+"
1 0 0 0 |"W@+"
-1 0 0 0 |"W!+"
1 0 0 0 |"MSEC"
3 0 0 0 |"TIME"
3 0 0 0 |"DATE"
0 0 0 0 |"END"
-1 0 0 0 |"RUN" 						|--- sistema
1 0 0 0 |"SW"
1 0 0 0 |"SH"
0 0 0 0 |"CLS"
0 0 0 0 |"REDRAW"
1 0 0 0 |"FRAMEV"
0 0 0 0 |"UPDATE" 	|--- pantalla
2 0 0 0 |"XYMOUSE"
1 0 0 0 |"BMOUSE"
1 0 0 0 |"KEY"
1 0 0 0 |"CNTJOY"
1 0 0 0 |"GETJOY"
-1 0 0 0 |"IPEN!"
-1 0 0 0 |"IKEY!"
-2 0 0 0 |"SETXY"
-1 0 0 0 |"PX+!"
-1 0 0 0 |"PX!+"
1 0 0 0 |"PX@"
-1 0 0 0 |"PAPER"
-1 0 0 0 |"INK"
1 0 0 0 |"INK@"
-1 0 0 0 |"ALPHA"						|--- color
-2 0 0 0 |"OP"
-2 0 0 0 |"CP"
-2 0 0 0 |"LINE"
-2 0 0 0 |"CURVE"
-2 0 0 0 |"PLINE"
-2 0 0 0 |"PCURVE"
0 0 0 0 |"POLI"	|--- dibujo
-2 0 0 0 |"FCOL"
-2 0 0 0 |"FCEN"
-2 0 0 0 |"FMAT"
0 0 0 0 |"SFILL"
0 0 0 0 |"LFILL"
0 0 0 0 |"RFILL"
1 0 0 0 |"MEM"
-1 0 0 0 |"DIR"			tos es STR
0 1 0 0 |"FILE"
0 1 0 0 |"FSIZE"
0 1 0 0 |"VOL"
-1 0 0 0 |"LOAD"
-3 0 0 0 |"SAVE"		|--- memoria bloques
-3 0 0 0 |"MOVE"
-3 0 0 0 |"MOVE>"
-3 0 0 0 |"CMOVE"
-3 0 0 0 |"CMOVE>"

0 0 0 0 |"SLOAD"
-1 0 0 0 |"SPLAY"									|--- Sonido
0 0 0 0 |"MLOAD"
-1 0 0 0 |"MPLAY"
)

||||||||||||||| llamadas entre palabras
#llamadas )( 8192
#direccio )( 8192

:resetllamadas | --
	'llamadas >r
	4096 ( 1? )( 1-
		0 r!+
		) drop rdrop ;

:addcall | n -- nant
	2 << 'llamadas +
	dup @ dup 1+
	rot ! ;

:useaddr | n --
	2 << 'direccio +
	dup @ 1 or swap ! ;

::getllamadas | n -- v
	2 << 'llamadas + @ ;

::getflags | n -- v
	2 << 'direccio + @ ;


|----- Imprime codigo tokenizado
:getcte
	8 >> cte + @ ;

:getstr
	8 >> str + ;

:nro>dicn
	8 >> 4 << 'indicepal + @ ;

:coldefw rojo nro>dicn ":%w" print ;
:coldefv violeta nro>dicn "#%w" print ;
:colitd	amarillo getcte "%d" print ;
:colith amarillo getcte "$%h" print ;
:colitb	amarillo getcte "%%%b" print ;
:colitf amarillo getcte "%f" print ;
:colits	azul getstr 34 emit "%l" print 34 emit ;
:colwor	verde nro>dicn "%w" print ;
:colvar	verde nro>dicn "%w" print ;
:coldwo	cyan nro>dicn "'%w" print ;
:coldva	cyan nro>dicn "'%w" print ;

#codei 0 'coldefw 'coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

::tokenprint | a -- a.
	@+ |0? ( nip ; )
	dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	verde
	nro>macro "%s" print
	;

:tokenlist | cnt adr ---
	( swap 1? )( 1- swap | cnt adr
		tokenprint
		32 emit ) 2drop ;

:tokenvar | adr
	( @+ dup $ff and
		1 =? ( 0 nip )
		2 =? ( 0 nip )
		1? )(
			12 <? ( 2 << 'codei + @ exec )( nro>macro "%s" print drop )
			" " print
			)
	3drop ;

:printvar | adr --
	dup @ "#%w " violeta print
	4+ @ tokenvar cr	;

::printword | n --
	4 << 'indicepal +
	indicepal> >=? ( drop "N/A" print ; )
	dup 8 + @ 1 and? ( drop printvar ; ) drop
	dup @ ":%w " rojo print
	dup 12 + @
	swap 4+ @
	tokenlist cr
	;

|--------------------
::movstackprint | a --
	blanco
	@ $ff and 2 << 'deltainternos +
	c@+ "%d " print
	c@+ 1? ( "r:%d " print )( drop )
	drop
	;

| 00000000									Pila D ( -128 a 128)
|            00000000						Pila R
|                      0000000000FEDCBA		Flags
| A-01 0 accion 1 dato
| B-02 0 local 1 exportado
| C-04 0 un ; 1 varios ;
| D-08 0 sin calls 1 con calls
| E-10 0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| F-20 0 nunca como direccion 1 alguna vez como direccion
|------------- recorre cada palabra

#pilaint )( 1024
#pilaint> 'pilaint

:pushvars
	deltaD deltaR pilaint> !+ !+ 'pilaint> ! ;

:popvars
	pilaint> 8 - dup 'pilaint> !
	@+ 'deltaR ! @ 'deltaD !
	;

| adr adrt t tabla
:sumapal
	over 8 >>
	pal@inf nip
	dup 24 >> 'deltaR +!
	8 << 24 >> 'deltaD +!
	$08 flags or 'flags ! | marca flag con llamada
	;
:sumadir | suma 1 direcciones
	;
:sumavar | suma 1 variables
	;
:sumadvar | suma 1 a dirvar
	;
:usaR
	$10 flags or 'flags ! | marca flag con R
	;

:apilae
	pushvars
	;
:desapilae
	popvars
	;

:tosesDC | tos = direccion codigo
	;

:tosesDD | tos = direccion dato
	;

#acct 0 'sumapal 'sumadir 'sumavar 'sumadvar 'usaR 'apilae 'desapilae 'tosesDC 'tosesDD

:prosstoken | a -- a
	@+
	dup $ff and 2 << 'deltainternos +
	c@+ 'deltaD +!
	c@+ 'deltaR +!
	c@+ 2 << 'acct + @ exec
	2drop
	;

:resetvars | a -- a
	0 'deltaD !
	0 'deltaR !
	0 'flags !
	'pilaint 'pilaint> !
	;

:setvars | a -- a
	deltaR 8 << $ff and deltaD $ff and or 16 << flags or
	over 8 + @ or over 8 + !
	;

:pasowor | adr -- adr+16
	dup 8 + @
  	1 and? ( drop 16 + ; ) drop | si es variable no calcula
	dup 4+ @
	over 12 + @
	resetvars
	( 1? )( 1- >r
		prosstoken
		r> ) 2drop
	setvars
	16 +
	;

:recopilainfo
	;

|-----------------------------------------
| 0
|:,,defc | n --  define codigo
|:,,defv | n --  define variable
|:,,litd | n --	numero decimal
|:,,lith | n --	numero hexa
|:,,litb | n --	numero binario
|:,,litf | n --	numero punto fijo
|:,,lits | n --	string
|:,,word | n --  word <---- debe ser calculado
|:,,var	 | n --  var
|:,,dword | n --  dir word
|:,,dvar | n --  dir var
|";"

|||||||||||||||||||||||||||||| pendientes
#pilapend )( 4096
#pilapend> 'pilapend

:addw | w --
	pilapend> !+ 'pilapend> ! ;

:overcode | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) 2drop ;

:overdire | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) drop useaddr ;

:reccod | nrop -- nrop
	dup 4 << 'indicepal +
	dup 4+ @ swap 12 + @  | .. dir cnt
|	trace
	( 1? )( 1- swap
		@+ dup $ff and
		8 =? ( overcode ) | call word
		9 =? ( overcode ) | var
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop swap ) 2drop
	;

:recdat | nrop -- nrop
	dup 4 << 'indicepal +
	4+ @
	( @+ dup $ff and
		1 =? ( 0 nip ) | corta con defc
		2 =? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		8 =? ( overcode ) | call word
		9 =? ( overcode ) | var
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop )
	3drop
	;

:recorre2
	resetllamadas
	cntword cntvars + 1- dup addcall drop
	'pilapend !+ 'pilapend> !
	( pilapend> 'pilapend >? )(
		4 - dup 'pilapend> ! @ | palabra a agregar
		dup 4 << 'indicepal + 8 + @
		1 and? ( drop recdat )( drop reccod )
		drop )
	drop
	;

::tokenpost | --
	|----- recorre en ejecucion
	recorre2
	|----- recorre por palabra
	'indicepal
	( indicepal> <? )( pasowor )
	drop
	;

|-----------------------------------------
:recorrepal | adr -- adr
	dup @ ":%w " ,print
	dup 4+ @ over 12 + @ | dir cantidad
	( 1? )( 1- swap
|		tokenprint
		@+ "%h " ,print
		swap )
	2drop
	,cr ;

:cadapal | adr -- adr++
	dup 8 + @
	1 nand? ( drop recorrepal )( drop )
	16 + ;

:recorrevar | adr -- adr
	dup @ "#%w " ,print
    dup 4+ @ over 12 + @ | dir cantidad
	( 1? )( 1- swap
		@+ "%h " ,print
		swap )
	2drop
	,cr ;

:cadavar | adr -- adr++
	dup 8 + @
	1 and? ( drop recorrevar )( drop )
	16 + ;

:imprimecodigo+dato
	'indicepal
	( indicepal> <? )( cadapal )
	drop
	'indicepal
	( indicepal> <? )( cadavar )
	drop
	;

|---- macros
| 'string |
|---- palabras
| 'string | 'exec | info | largo |    16 bytes por palabra
| ****info (en binario)
| 00000000									Pila D ( -128 a 128)
|            00000000						Pila R
|                      0000000000FEDCBA		Flags
| A- 0 accion 1 dato
| B- 0 local 1 exportado
| C- 0 un ; 1 varios ;
| D- 0 sin calls 1 con calls
| E- 0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| F- 0 nunca como direccion 1 alguna vez como direccion
| ****stat (en hexa)
| 0000			Cantidad de llamadas a esta palabra, 0 no se uso pero OJO con( 's1 !+ !)
|      0000		Tamanio, accion en palabras, dato en bytes (o en dwords?)
|---- includes
| 'string | 'mem | first | last		16 bytes (32 includes)

|------------------------------------
::savestat
	mark
	'indicepal ( indicepal> <? )(
		@+ >r | "%w " ,print
		@+ drop | " %h  " ,print  -- direccion no me interesa
		@+ r> swap %10 and? ( ":" )( "" ) swap %1 and? ( "#" )( ":" ) swap >r  "%s%s%w " ,print | tipo y nombre
		r> dup 24 >> swap 8 << 24 >> ";%d;%d" ,print
		@+ |	dup 24 >> swap dup 8 << 24 >> swap 16 << 16 >> | d r l
		" ;  %d  " ,print ,cr ) drop
|	largo "%d%." print
	indiceinc> 'indiceinc - 4 >> "%d includes %." ,print | 3..4
	indicepal> 'indicepal - 4 >> "%d palabras %." ,print
	"---- MEMORIA ----%." ,print
	prog> prog - 2 >> "%d codigo%." ,print
	cte> cte - 2 >> "%d constante%." ,print
	str> str - "%d string%." ,print
|	<<boot "%d%." ,print
	,cr
|	imprimecodigo+dato
	"stat.inf" savemem |  graba archivo
	empty
	;

|------------------------------------
::savecode
	mark
	str> str -
	cte> cte -
	prog> prog  -
	here !+ !+ !+ 'here !
	here prog prog> over - dup 'here +! cmove
	here cte cte> over - dup 'here +! cmove
	here str str> over - dup 'here +! cmove
	"token.r4c" savemem |  graba archivo
	empty
	;
