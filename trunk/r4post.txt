| post tokenizador
| PHREDA 2009
|---------------------------
^reda4.txt
|^gui.txt
^parse.txt
^trace.txt
^r4comp.txt

#deltaD	0	| pila de datos
#deltaR	0	| pila de retorno
#flags	0

#stackeffect
"------------" | 0
"------------" |:,,defc | n --  define codigo
"------------" |:,,defv | n --  define variable
"------------" |:,,litd | n --	numero decimal
"------------" |:,,lith | n --	numero hexa
"------------" |:,,litb | n --	numero binario
"------------" |:,,litf | n --	numero punto fijo
"------------" |:,,lits | n --	string
"------------" |:,,word | n --  word <---- debe ser calculado
"------------" |:,,var | n --  var
"------------" |:,,dword | n --  dir word
"------------" |:,,dvar | n --  dir var
#deltamacros
"------------" |";" | r:-1 pero veamos
"------------" |"("
"------------" |")("
"------------" |")"
"------------" |"["
"------------" |"]"
"A-----A-----" |"0?"
"A-----A-----" |"+?"
"A-----A-----" |"-?"
"A-----A-----" |"1?"
"AA----A-----" |"=?"
"AA----A-----" |"<?"
"AA----A-----" |">?"
"AA----A-----" |"<=?"
"AA----A-----" |">=?"
"AA----A-----" |"<>?"
"AA----A-----" |"AND?"
"AA----A-----" |"NAND?"
"C-----------" |"EXEC"
"A-----AA----" |"DUP"	|--- pila
"A-----------" |"DROP"
"AA----AAA---" |"OVER"
"AAA---AAAA--" |"PICK2"
"AAAA--AAAAA-" |"PICK3"
"AAAAA-AAAAAA" |"PICK4"
"AA----AA----" |"SWAP"
"AA----A-----" |"NIP"
"AAA---AAA---" |"ROT"
"AA----AAAA--" |"2DUP"
"AA----------" |"2DROP"
"AAA---------" |"3DROP"
"AAAA--------" |"4DROP"
"AAAA--AAAAAA" |"2OVER"
"AAAA--AAAA--" |"2SWAP"
"A-----A-----" |">R"
"------A-----" |"R>"
"------A-----" |"R"
"------A-----" |"R+"
"------A-----" |"R@+"
"A-----A-----" |"R!+"
"A-----A-----" |"RDROP"		|--- pila direcciones
"AA----A-----" |"AND"
"AA----A-----" |"OR"
"AA----A-----" |"XOR"
"A-----A-----" |"NOT"  		|--- logicas
"AA----A-----" |"+"
"AA----A-----" |"-"
"AA----A-----" |"*"
"AA----A-----" |"/"
"AAA---A-----" |"*/"
"AAA---A-----" |"*>>"
"AA----AA----" |"/MOD"
"AA----A-----" |"MOD"
"A-----A-----" |"ABS"  		|--- aritmeticas
"A-----A-----" |"NEG"
"A-----A-----" |"1+"
"A-----A-----" |"4+"
"A-----A-----" |"1-"
"A-----A-----" |"2/"
"A-----A-----" |"2*"
"AA----A-----" |"<<"
"AA----A-----" |">>"
"D-----V-----" |"@"
"D-----V-----" |"C@"
"D-----V-----" |"W@"
"DV----------" |"!"
"DV----------" |"C!"
"DV----------" |"W!"
"DV----------" |"+!"
"DV----------" |"C+!"
"DV----------" |"W+!"  		|--- memoria
"D-----DV----" |"@+"
"DV----D-----" |"!+"
"D-----DV----" |"C@+"
"DV----D-----" |"C!+"
"D-----DV----" |"W@+"
"DV----D-----" |"W!+"
"------A-----" |"MSEC"
"------AAA---" |"TIME"
"------AAA---" |"DATE"
"------------" |"END"
"S-----------" |"RUN" 		|--- sistema
"------A-----" |"SW"
"------A-----" |"SH"
"------------" |"CLS"
"------------" |"REDRAW"
"------A-----" |"FRAMEV"
"------------" |"UPDATE" 	|--- pantalla
"------AA----" |"XYMOUSE"
"------A-----" |"BMOUSE"
"------A-----" |"KEY"
"------A-----" |"CNTJOY"
"------D-----" |"GETJOY"
"C-----------" |"IPEN!"
"C-----------" |"IKEY!"
"AA----------" |"SETXY"
"A-----------" |"PX+!"
"A-----------" |"PX!+"
"------A-----" |"PX@"
"A-----------" |"PAPER"
"A-----------" |"INK"
"------A-----" |"INK@"
"A-----------" |"ALPHA"		|--- color
"AA----------" |"OP"
"AA----------" |"CP"
"AA----------" |"LINE"
"AA----------" |"CURVE"
"AA----------" |"PLINE"
"AA----------" |"PCURVE"
"------------" |"POLI"		|--- dibujo
"AA----------" |"FCOL"
"AA----------" |"FCEN"
"AA----------" |"FMAT"
"------------" |"SFILL"
"------------" |"LFILL"
"------------" |"RFILL"
"------A-----" |"MEM"
"A-----------" |"DIR"
"A-----S-----" |"FILE"
"A-----A-----" |"FSIZE"
"A-----S-----" |"VOL"
"AA----A-----" |"LOAD"
"AAA---------" |"SAVE"		|--- memoria bloques
"AAA---------" |"MOVE"
"AAA---------" |"MOVE>"
"AAA---------" |"CMOVE"
"AAA---------" |"CMOVE>"
"A-----------" |"SLOAD"	|--- Sonido
"A-----------" |"SPLAY"
"A-----------" |"MLOAD"
"A-----------" |"MPLAY"

| dD dR ini esp
#deltainternos (
0 0 0 0 | 0
0 0 0 0 |:,,defc | n --  define codigo
0 0 0 0 |:,,defv | n --  define variable
1 0 0 0 |:,,litd | n --	numero decimal
1 0 0 0 |:,,lith | n --	numero hexa
1 0 0 0 |:,,litb | n --	numero binario
1 0 0 0 |:,,litf | n --	numero punto fijo
1 0 0 0 |:,,lits | n --	string
0 0 0 0 |:,,word | n --  word <---- debe ser calculado
1 0 0 0 |:,,var | n --  var
1 0 0 0 |:,,dword | n --  dir word
1 0 0 0 |:,,dvar | n --  dir var
)
#deltamacros (
0 0 0 0 |";" | r:-1 pero veamos
0 0 0 0 |"("
0 0 0 0 |")("
0 0 0 0 |")"
0 0 0 0 |"["
0 0 0 0 |"]"
0 0 0 0 |"0?"
0 0 0 0 |"+?"
0 0 0 0 |"-?"
0 0 0 0 |"1?"
-1 0 0 0 |"=?"
-1 0 0 0 |"<?"
-1 0 0 0 |">?"
-1 0 0 0 |"<=?"
-1 0 0 0 |">=?"
-1 0 0 0 |"<>?"
-1 0 0 0 |"AND?"
-1 0 0 0 |"NAND?"
-1 0 0 0 |"EXEC"
1 0 0 0 |"DUP"
-1 0 0 0 |"DROP"
1 0 0 0 |"OVER"
1 0 0 0 |"PICK2"
1 0 0 0 |"PICK3"
1 0 0 0 |"PICK4"
0 0 0 0 |"SWAP"
-1 0 0 0 |"NIP"
0 0 0 0 |"ROT"	|--- pila
2 0 0 0 |"2DUP"
-2 0 0 0 |"2DROP"
-3 0 0 0 |"3DROP"
-4 0 0 0 |"4DROP"
2 0 0 0 |"2OVER"
0 0 0 0 |"2SWAP"
-1 1 0 0 |">R"
1 -1 0 0 |"R>"
1 0 0 0 |"R"
-1 0 0 0 |"R+"
1 0 0 0 |"R@+"
-1 0 0 0 |"R!+"
0 -1 0 0 |"RDROP"				|--- pila direcciones
-1 0 0 0 |"AND"
-1 0 0 0 |"OR"
-1 0 0 0 |"XOR"
0 0 0 0 |"NOT"  								|--- logicas
-1 0 0 0 |"+"
-1 0 0 0 |"-"
-1 0 0 0 |"*"
-1 0 0 0 |"/"
-2 0 0 0 |"*/"
-2 0 0 0 |"*>>"
0 0 0 0 |"/MOD"
0 0 0 0 |"MOD"
0 0 0 0 |"ABS"  			|--- aritmeticas
0 0 0 0 |"NEG"
0 0 0 0 |"1+"
0 0 0 0 |"4+"
0 0 0 0 |"1-"
0 0 0 0 |"2/"
0 0 0 0 |"2*"
-1 0 0 0 |"<<"
-1 0 0 0 |">>"
0 0 0 0 |"@"
0 0 0 0 |"C@"
0 0 0 0 |"W@"
-2 0 0 0 |"!"
-2 0 0 0 |"C!"
-2 0 0 0 |"W!"
-2 0 0 0 |"+!"
-2 0 0 0 |"C+!"
-2 0 0 0 |"W+!"  			|--- memoria
1 0 0 0 |"@+"
-1 0 0 0 |"!+"
1 0 0 0 |"C@+"
-1 0 0 0 |"C!+"
1 0 0 0 |"W@+"
-1 0 0 0 |"W!+"
1 0 0 0 |"MSEC"
3 0 0 0 |"TIME"
3 0 0 0 |"DATE"
0 0 0 0 |"END"
-1 0 0 0 |"RUN" 						|--- sistema
1 0 0 0 |"SW"
1 0 0 0 |"SH"
0 0 0 0 |"CLS"
0 0 0 0 |"REDRAW"
1 0 0 0 |"FRAMEV"
0 0 0 0 |"UPDATE" 	|--- pantalla
2 0 0 0 |"XYMOUSE"
1 0 0 0 |"BMOUSE"
1 0 0 0 |"KEY"
1 0 0 0 |"CNTJOY"
1 0 0 0 |"GETJOY"
-1 0 0 0 |"IPEN!"
-1 0 0 0 |"IKEY!"
-2 0 0 0 |"SETXY"
-1 0 0 0 |"PX+!"
-1 0 0 0 |"PX!+"
1 0 0 0 |"PX@"
-1 0 0 0 |"PAPER"
-1 0 0 0 |"INK"
1 0 0 0 |"INK@"
-1 0 0 0 |"ALPHA"						|--- color
-2 0 0 0 |"OP"
-2 0 0 0 |"CP"
-2 0 0 0 |"LINE"
-2 0 0 0 |"CURVE"
-2 0 0 0 |"PLINE"
-2 0 0 0 |"PCURVE"
0 0 0 0 |"POLI"	|--- dibujo
-2 0 0 0 |"FCOL"
-2 0 0 0 |"FCEN"
-2 0 0 0 |"FMAT"
0 0 0 0 |"SFILL"
0 0 0 0 |"LFILL"
0 0 0 0 |"RFILL"
1 0 0 0 |"MEM"
-1 0 0 0 |"DIR"
0 1 0 0 |"FILE"
0 1 0 0 |"FSIZE"
0 1 0 0 |"VOL"
-1 0 0 0 |"LOAD"
-3 0 0 0 |"SAVE"		|--- memoria bloques
-3 0 0 0 |"MOVE"
-3 0 0 0 |"MOVE>"
-3 0 0 0 |"CMOVE"
-3 0 0 0 |"CMOVE>"

0 0 0 0 |"SLOAD"
-1 0 0 0 |"SPLAY"									|--- Sonido
0 0 0 0 |"MLOAD"
-1 0 0 0 |"MPLAY"
)

|----- Imprime codigo tokenizado
:nro>src
	8 >> inisrc + ;

:getcte
	8 >> cte + @ ;

:getstr
	8 >> str + ;

:nro>dicn
	8 >> 4 << 'indicepal + @ ;

:coldefw rojo nro>src ":%w" print ;
:coldefv violeta nro>src "#%w" print ;
:colitd	amarillo getcte "%d" print ;
:colith amarillo getcte "$%h" print ;
:colitb	amarillo getcte "%%%b" print ;
:colitf amarillo getcte "%f" print ;
:colits	azul getstr 34 emit "%l" print 34 emit ;
:colwor	verde nro>dicn "%w" print ;
:colvar	verde nro>dicn "%w" print ;
:coldwo	cyan nro>dicn "'%w" print ;
:coldva	cyan nro>dicn "'%w" print ;

#codei 0 'coldefw 'coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

::tokenprint | a -- a.
	@+ |0? ( nip ; )
	dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	verde
|	"%d" print
	nro>macro "%s" 8 cntprint
	;

:tokenlist | cnt adr ---
	( swap 1? )( 1- swap | cnt adr
		tokenprint
		32 emit ) 2drop ;

:printvar | adr --
	@ "#%w " violeta print
 	;

::printword | n --
	4 << 'indicepal +
	indicepal> >=? ( drop "N/A" print ; )
	dup 8 + @ 1 and? ( drop printvar ; ) drop
	dup @ ":%w " rojo print
	dup 12 + @
	swap 4+ @ prog +
	tokenlist cr
	;


| 00000000									Pila D ( -128 a 128)
|            00000000						Pila R
|                      0000000000FEDCBA		Flags
| A- 0 accion 1 dato
| B- 0 local 1 exportado
| C- 0 un ; 1 varios ;
| D- 0 sin calls 1 con calls
| E- 0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| F- 0 nunca como direccion 1 alguna vez como direccion

|--------------------
::movstackprint | a --
	blanco
	@ $ff and 2 << 'deltainternos +
	c@+ "%d " print
	c@+ 1? ( "r:%d " print )( drop )
	drop
	;

:prosspal | nxd c pal -- nxd
	drop
    nro>dicn
	8 + @
	dup 24 >> 'deltaR +!
	8 << 24 >> 'deltaD +!
	;

:prosstoken | a -- a
	@+
	dup $ff and
	8 =? ( prosspal ; ) | es palabra
	2 << 'deltainternos +
	c@+ 'deltaD +!
	c@+ 'deltaR +!
	2drop
	;

:resetvars | a -- a
	0 'deltaD !
	0 'deltaR !
	0 'flags !
	;

:setvars | a -- a
	deltaR 8 << deltaD or 16 <<
	over 8 + @ or over 8 + !
	;

:recorrepalabra | adr inicio cnt -- adr
	resetvars
|	2dup "%d %d" trace
	( 1? )( 1- >r
		prosstoken
		r> ) 2drop
	setvars
	;

:pasowor | adr -- adr+16
	dup 4+ @ prog +
	over 12 + @ recorrepalabra
	16 +
	;

:pasoexe | token --
	drop
	;

::tokenpost
	|----- recorre por palabra
	| 'string | 'exec | info | stat |    16 bytes por palabra
	'indicepal
	( indicepal> <? )( pasowor )
	drop
	|----- recorre en ejecucion
	<<boot prog +
	( @+ 1? )( pasoexe )
	2drop
	;


|---- macros
| 'string |
|---- palabras
| 'string | 'exec | info | largo |    16 bytes por palabra
| ****info (en binario)
| 00000000									Pila D ( -128 a 128)
|            00000000						Pila R
|                      0000000000FEDCBA		Flags
| A- 0 accion 1 dato
| B- 0 local 1 exportado
| C- 0 un ; 1 varios ;
| D- 0 sin calls 1 con calls
| E- 0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| F- 0 nunca como direccion 1 alguna vez como direccion
| ****stat (en hexa)
| 0000			Cantidad de llamadas a esta palabra, 0 no se uso pero OJO con( 's1 !+ !)
|      0000		Tamanio, accion en palabras, dato en bytes (o en dwords?)
|---- includes
| 'string | 'mem | first | last		16 bytes (32 includes)
