| Interprete de R4
| PHREDA 2007
|---------------------------------
^lib/reda4.txt
^lib/print.txt
^lib/trace.txt

^r4token.txt

#memvar
#freemem

#:<<ip

#:pilaexe )( 1024
#:pilaexe> 'pilaexe

::+executa | nroword --
	pilaexe> !+ 'pilaexe> ! ;

::-executa | --
	-4 'pilaexe> +! ;

|--- Pila DATOS
| 		valor 		tipo
| TOS = dpila>-4  dpila>-8
|       -12       -16
|       -20       -24
|       -28       -32
#:dpila )( 2048
#:dpila> 'dpila

:d.ini 'dpila 'dpila> ! ;
:d.cnt | -- cnt
	dpila dpila> - 3 >> ;

::d.pop | -- nro
	dpila> 8 -
	dup 'dpila> ! 4+ @ ;
:d.pop2
	-16 'dpila> +!
	dpila> 4+ @+ swap 4+ @ ;
:d.pop3
	-24 'dpila> +!
	dpila> 4+ @+ swap 4+ @+ swap 4+ @ ;

:d.get dpila> 8 - @ ;
:d.get2 dpila> 16 - @ ;

:d.push | nro tipo --
	dpila> !+ !+ 'dpila> ! ;

::d.pushDec		$0 d.push ;
::d.pushHex		$1 d.push ;
::d.pushBin		$2 d.push ;
::d.pushFix		$3 d.push ;

::d.pushStr		$4 d.push ;
::d.pushVar		$5 d.push ;
::d.pushDVar	$6 d.push ;
::d.pushDCod	$7 d.push ;
::d.pushCNum	$8 d.push ;
::d.pushCStr	$9 d.push ;
::d.pushCDVar	$10 d.push ;
::d.pushCDCod	$11 d.push ;

|-----
:iDROP  drop -8 'dpila> +! ;
:i2DROP drop -16 'dpila> +! ;
:i3DROP drop -24 'dpila> +! ;
:i4DROP drop -32 'dpila> +! ;
:iDUP   drop
	dpila> 8 - >r
	r@+ r@+ swap
	r!+ r!+ r> 'dpila> ! ;
:i2DUP  drop
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r!+ r!+ r!+ r!+
	r> 'dpila> ! ;
:iOVER  drop
	dpila> 16 - >r
	r@+ r@+ swap r> 8 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK2 drop
	dpila> 24 - >r
	r@+ r@+ swap r> 16 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK3 drop
	dpila> 32 - >r
	r@+ r@+ swap r> 24 + >r
	r!+ r!+ r> 'dpila> ! ;
:iPICK4 drop
	dpila> 40 - >r
	r@+ r@+ swap r> 32 + >r
	r!+ r!+ r> 'dpila> ! ;
:iSWAP drop
	dpila> 16 - >r
	r@+ r@+ swap
	r@+ r> @ swap
	dpila> 16 -
	!+ !+ !+ ! ;
:iNIP drop
	dpila> 8 - >r
	r@+ r@+ swap r> 16 -
	!+ !+ 'dpila> ! ;
:iROT drop
	dpila> 24 - >r
	r@+ r@+ swap
	r@+ r@+ swap
	r@+ r> @ swap 2swap
	dpila> 24 -
	!+ !+ !+ !+ !+ ! ;
:i2OVER drop
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r> 16 +
	!+ !+ !+ !+ 'dpila> ! ;
:i2SWAP drop
	dpila> 32 - >r
	r@+ r@+ swap
	r@+ r@+ swap 2swap
	r@+ r@+ swap
	r@+ r@+ swap 2swap r> 32 -
	!+ !+ !+ !+ !+ !+ !+ ! ;

|----- PILA R
#:rpila )( 2048
#:rpila> 'rpila

:r.ini	'rpila 'rpila> ! ;
:r.pop	-8 'rpila> +! rpila> 4+ @ ;
:r.cnt	rpila> 'rpila - 3 >> ;
:r.tos rpila> 4 - @ ;
:r.push | nro tipo --
	rpila> !+ !+ 'rpila> ! ;

::r.pushDec		$0 r.push ;
::r.pushHex		$1 r.push ;
::r.pushBin		$2 r.push ;
::r.pushFix		$3 r.push ;

::r.pushStr		$4 r.push ;
::r.pushVar		$5 r.push ;
::r.pushDVar	$6 r.push ;
::r.pushDCod	$7 r.push ;
::r.pushCNum	$8 r.push ;
::r.pushCStr	$9 r.push ;
::r.pushCDVar	$10 r.push ;
::r.pushCDCod	$11 r.push ;

:i>R	drop d.pop r.pushDec ;		|--- pila de direccion
:iR>    drop r.pop d.pushDec ;
:iR     drop r.tos d.pushDec ;
:iR+	drop r.pop d.pop + r.pushDec ;
:iR@+	drop r.pop dup 4+ r.pushDec d.pushDec ;
:iR!+	drop d.pop r.pop nip 4+ r.pushDec ;
:iRDROP	r.pop 2drop ;

|-------------------------------------
#inter )( 64
#inter> 'inter

#irqkey 0

#msg

|---- interrupciones
:+interrupcion | inter --
	0? ( drop ; )
	inter> !+ 'inter> >=? ( "Bucle infinito" 'msg ! 0 ; )
	'inter> ! ;

|---- Comprobaciones
:pila?	'dpila <? ( "Pila vacia" 'msg ! 0 nip rdrop ; ) ;
:?pila	'dpila> >=? ( "Pila llena" 'msg ! 0 nip rdrop ; ) ;
:pilar?	'rpila <? ( "Pila R vacia" 'msg ! 0 nip rdrop ; ) ;
:?pilar	'rpila> >=? ( "Pila R llena" 'msg ! 0 nip rdrop ; ) ;

:pmem? | adr -- adr/0
|	prog >=? ( prog> <=? ( ; ) )
	"fuera de mem" 'msg ! 0 nip rdrop ;


|:adr>lit
:adr>mem
:adr>cmem
:adr>cod
	8 >>
	;

|--- interprete
:i0		drop ;
:i:		drop ;
:i#		drop ;
:idec	adr>lit ?numero drop nip d.pushDec ;
:ihex	adr>lit ?numero drop nip d.pushHex ;
:ibin	adr>lit ?numero drop nip d.pushBin ;
:ifix	adr>lit ?fnumero drop nip d.pushFix ;
:istr	adr>lit d.pushStr ;

:ivar	adr>mem d.pushVar ; |adr>mem @ d.pushVar ;
:idvar	adr>mem d.pushDVar ;
:idwor	adr>cmem d.pushDCod ;

|--- llama palabra
:iwor
	adr>cod
	swap +executa
	swap r.push ;

|--- retorna
:i;
	r.cnt 0? ( nip ; ) 2drop
	r.pop -executa ;

:i)(
:i)		8 >> + ;
:i(     drop ;
:i[     8 >> over d.push + ;
:i]     drop ;

:i0?	drop @+ d.get 0? ( 2drop ; ) drop 8 >> + ;
:i+?	drop @+ d.get +? ( 2drop ; ) drop 8 >> + ;
:i-?	drop @+ d.get -? ( 2drop ; ) drop 8 >> + ;
:i1?	drop @+ d.get 1? ( 2drop ; ) drop 8 >> + ;
:i=?	drop @+ d.get2 d.pop =? ( 2drop ; ) drop 8 >> + ;
:i<?	drop @+ d.get2 d.pop <? ( 2drop ; ) drop 8 >> + ;
:i>?	drop @+ d.get2 d.pop >? ( 2drop ; ) drop 8 >> + ;
:i<=?	drop @+ d.get2 d.pop <=? ( 2drop ; ) drop 8 >> + ;
:i>=?   drop @+ d.get2 d.pop >=? ( 2drop ; ) drop 8 >> + ;
:i<>?   drop @+ d.get2 d.pop <>? ( 2drop ; ) drop 8 >> + ;
:iAND?  drop @+ d.get2 d.pop AND? ( 2drop ; ) drop 8 >> + ;
:iNAND? drop @+ d.get2 d.pop NAND? ( 2drop ; ) drop 8 >> + ;

:iEXEC
	drop
	d.pop 1? ( swap r.push ; ) drop
	;


|--- aritmetica y logica
:iAND   drop d.pop2 AND d.pushVar ;
:iOR	drop d.pop2 OR d.pushVar ;
:iXOR	drop d.pop2 XOR d.pushVar ;
:iNOT	drop d.pop NOT d.pushVar ;
:i+		drop d.pop2 + d.pushVar ;
:i-     drop d.pop2 - d.pushVar ;
:i*     drop d.pop2 * d.pushVar ;
:i/     drop d.pop2 / d.pushVar ;
:i*/    drop d.pop3 */ d.pushVar ;
:i*>>   drop d.pop3 *>> d.pushVar ;
:i/MOD  drop d.pop2 /MOD swap d.pushVar d.pushVar ;
:iMOD   drop d.pop2 MOD d.pushVar ;
:iABS   drop d.pop ABS d.pushVar ;
:iNEG   drop d.pop NEG d.pushVar ;
:i2/    drop d.pop 2/ d.pushVar ;
:i2*    drop d.pop 2* d.pushVar ;
:i<<    drop d.pop2 << d.pushVar ;
:i>>    drop d.pop2 >> d.pushVar ;
:i1-    drop d.pop 1- d.pushVar ;
:i1+    drop d.pop 1+ d.pushVar ;
:i4+    drop d.pop 4+ d.pushVar ;

|--- memoria
:i@     drop dpila> 4 -  dup @ @ swap ! ;
:iC@	drop dpila> 4 -  dup @ c@ swap ! ;
:iW@    drop dpila> 4 -  dup @ w@ swap ! ;
:i!     drop dpila> 8 -  dup 'dpila> ! @+ swap @ ! ;
:iC!    drop dpila> 8 -  dup 'dpila> ! @+ swap @ c! ;
:iW!    drop dpila> 8 -  dup 'dpila> ! @+ swap @ w! ;
:i+!        drop dpila> 8 -  dup 'dpila> ! @+ swap @ +! ;
:iC+!       drop dpila> 8 -  dup 'dpila> ! @+ swap @ c+! ;
:iW+!       drop dpila> 8 -  dup 'dpila> ! @+ swap @ w+! ;
:i@+        drop dpila> 4 -  dup @+ @ swap !+ 'dpila> ! 4 swap +! ; | no test
:iC@+       drop dpila> 4 -  dup @+ c@ swap !+ 'dpila> ! 1 swap +! ; | no test
:iW@+       drop dpila> 4 -  dup @+ w@ swap !+ 'dpila> ! 2 swap +! ; | no test
:i!+        drop dpila> 8 -  dup @+ swap @ !+ swap !+ 'dpila> ! ; | nose
:iC!+       drop dpila> 8 -  dup @+ swap @ c!+ swap !+ 'dpila> ! ; | nose
:iW!+       drop dpila> 8 -  dup @+ swap @ w!+ swap !+ 'dpila> ! ; | nose


|---- pantalla
:iSW 	drop sw d.pushDec ;
:iSH    drop sh d.pushDec ;
:iFRAMEV	drop framev d.push ;
:iREDRAW    drop redraw ;
:iUPDATE    drop
	inter> 'inter =? ( drop ; )
	4 - dup 'inter> ! @ |0? ( drop ; )
	swap rpila> !+ 'rpila> !
	;


|---- dibujo
:iOP    	drop d.pop2 op ;
:iCP    	drop d.pop2 cp ;
:iLINE  	drop d.pop2 line ;
:iCURVE 	drop d.pop2 curve ;
:iPLINE 	drop d.pop2 pline ;
:iPCURVE 	drop d.pop2 pcurve ;
:iPOLI   	drop poli ;
:iFCOL   	drop d.pop2 fcol ;
:iFCEN   	drop d.pop2 fcen ;
:iFMAT   	drop d.pop2 fmat ;
:iSFILL  	drop sfill ;
:iLFILL  	drop lfill ;
:iRFILL  	drop rfill ;
:iSETXY  	drop d.pop2 setxy ;
:iPX+!   	drop d.pop px+! ;
:iPX!+   	drop d.pop px!+ ;
:iPX@    	drop px@ d.push ;

:iXFB		drop xfb d.push ;
:i>XFB		drop >xfb ;
:iXFB>		drop xfb> ;

:iPAPER  	drop d.pop paper ;
:iINK    	drop d.pop ink ;
:iINKF   	drop ink@ d.push ;
:iALPHA  	drop d.pop ALPHA ;
:iCLS    	drop cls ;
|----- sis
:iMSEC   	drop msec d.push ;
:iTIME   	drop time rot d.push swap d.push d.push ;
:iDATE   	drop date rot d.push swap d.push d.push ;
:iEND    	2drop 0 ;
:iRUNi   	iDROP ;
|-----  Interrupciones
|-----mouse
:iTPEN		drop tpen d.push ;
:iXYMOUSE	drop xymouse swap d.push d.push ;
:iBMOUSE    drop bmouse d.push ;
|-----teclado
:iRKEY!  	drop dpila> 4 -  dup 'dpila> ! @ 'irqkey ! ; | n --
:iKEY		drop key d.push ;
|-----joystick
:iCNTJOY    drop cntjoy d.push ;
:iGETJOY    drop d.pop GETJOY d.push ;
|--- archivos
:iDIR       drop d.pop dir ;	| "path" --
:iVOL       drop d.pop VOL d.push ;  | nro -- "nombre" o 0
:iFILE      drop d.pop file d.push ;  | nro -- "nombre" o 0
:iFSIZE     drop d.pop FSIZE d.push ;  | nro --  size o 0
:iLOAD      drop dpila> 8 -  dup @+ swap @ load swap !+ 'dpila> ! ;  | 'from "filename" -- 'to
:iSAVE      drop dpila> 12 -  dup @+ swap @+ swap @ save 'dpila> ! ;   |  'from cnt "filename" --
:iMEM       drop mem dpila> !+  'dpila> ! ; | mem

|--- mueve mem
:iMOVE      drop dpila> 12 -  dup @+ swap @+ swap @ move 'dpila> ! ;
:iMOVE>     drop dpila> 12 -  dup @+ swap @+ swap @ move> 'dpila> ! ;
:iCMOVE     drop dpila> 12 -  dup @+ swap @+ swap @ cmove 'dpila> ! ;
:iCMOVE>    drop dpila> 12 -  dup @+ swap @+ swap @ cmove> 'dpila> ! ;

|--- sonido
:iSLOAD     drop d.pop SLOAD d.push ;  | "" -- n
:iSPLAY     drop d.pop SPLAY drop ;  | n/0 --
:iMLOAD     drop d.pop MLOAD d.push ;  | "" -- n
:iMPLAY     drop d.pop MPLAY drop ;  | n/0 --

:iSERVER
:iCLIENT
:iSEND
:iRECV
:iCLOSE
	drop ;

|---------- tabla de saltos
#tablai	| tabla de saltos de instrucciones
i0
i: i#
idec ihex ibin ifix istr
iwor ivar idwor idvar
i;
i(		i)(		i)		i[		i]		iEXEC
i0?		i+?		i-?		i1?		i=?		i<?		i>?		i<=?	i>=?	i<>?	iAND?	iNAND?

iDUP	iDROP	iOVER	iPICK2	iPICK3	iPICK4	iSWAP	iNIP	iROT
i2DUP	i2DROP	i3DROP	i4DROP	i2OVER	i2SWAP

i>R		iR>		iR		iR+		iR@+	iR!+	iRDROP
iAND	iOR		iXOR	iNOT	i+		i-		i*		i/		i*/
i*>>	i/MOD	iMOD	iABS	iNEG	i1+		i4+		i1-		i2/		i2*		i<<		i>>
i@		iC@		iW@		i!		iC!		iW!		i+!		iC+!	iW+!	i@+		i!+		iC@+	iC!+	iW@+	iW!+
iMOVE	iMOVE>	iCMOVE	iCMOVE>
iMEM	iDIR	iFILE	iFSIZE	iVOL	iLOAD	iSAVE
iUPDATE	iMSEC	iTIME	iDATE	iEND	iRUNi
iSW		iSH		iCLS	iREDRAW	iFRAMEV
iSETXY	iPX+!	iPX!+	iPX@
iXFB	i>XFB	iXFB>
iPAPER	iINK	iINKF	iALPHA
iOP		iCP		iLINE	iCURVE	iPLINE	iPCURVE	iPOLI
iFCOL	iFCEN	iFMAT	iSFILL	iLFILL	iRFILL
iTPEN 	iXYMOUSE iBMOUSE
iRKEY!	iKEY
iCNTJOY	iGETJOY
iSLOAD	iSPLAY	iMLOAD	iMPLAY					|--- Sonido
iSERVER	iCLIENT	iSEND	iRECV	iCLOSE

::stepmacro | nro --
  	dup 11 + 2 << 'tablai + @ exec ;

::stepvm | --
	<<ip 0? ( drop ; )
	@+ dup $ff and
	2 << 'tablai + @ exec
	'<<ip ! ;

::stepvmf | --  ejecuta hasta encontrar un ;
	<<ip 0? ( drop ; )
	( @+ 12 <>? )(
		dup $ff and 2 << 'tablai + @ exec )
	dup $ff and 2 << 'tablai + @ exec
	'<<ip ! ;

::playvm | --
|	[ "a" trace key 0? ( ; ) drop irqkey +interrupcion ; ] ikey!
|	[ irqmou +interrupcion ; ] ipen!

	<<ip ( update 1? )(
|		c@+ $ff and 2 << 'tablai + @ exec
		key
		[ 0 ; ] <esc>
		drop
		) drop
|	'<<ip !
	;

|-------------------------------
| Asigma memoria para ejecucion
| recorre el codigo
|
:mem0 | nro --
	freemem !+ 'freemem ! ;
:mem1 | nro --
	freemem w!+ 'freemem ! ;
:mem2 | nro --
	freemem c!+ 'freemem ! ;
:mem3 | nro --
	'freemem +! ;

#gmem 'mem0

:gstr | adr --
	freemem
	( swap c@+ 1? )( rot c!+ ) rot
	c!+ 'freemem ! drop ;

:accpal | val instr --
	7 <? ( drop 8 >> |cte + @
		 gmem exec ; ) 	| nro
	7 =? ( drop 8 >> |str +
		gstr ; )			| str
	12 <? ( drop 8 >> | pal@tok nip
		mem0 ; )	| pal
	13 =? ( 2drop 'mem2 'gmem ! ; ) | (
	14 =? ( 2drop 'mem3 'gmem ! ; )	| )(
	16 =? ( 2drop 'mem1 'gmem ! ; ) | [
	2drop 'mem0 'gmem ! ;

|idec ihex ibin ifix istr	3 4 5 6 7
|iwor ivar idwor idvar      8 9 10 11
|i;							12
|i(	i)(	i) i[ i]			13 14 15 16 17

:addmem | inifree adr1token -- inifree adr1token
	dup @  | inicio tokens
	'mem0 'gmem !
	( @+ 1? )(
		dup $ff and
		3 <? ( 3drop ; ) | # o :
		17 >? ( 3drop ; ) | o > ]
		accpal
       )
	2drop
	;

:variable | adr --
	freemem over 4+ | adr
	addmem
	freemem pick2 =? ( 4 'freemem +! ) drop | si es variable sin nros
	! drop
	;

|---- Codigo
:coldefw
:coldefv drop ;
:colitd
:colitf
:colitb
:colith drop ; |tomem "%w" ,print ;
:colits	drop ; |34 ,c tomem 1+ 34 ,c ;
:colwor
:colvar
:coldwo
:coldva	drop ;

#codei 0 'coldefw 'coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

:,token | a -- a.
	@+ dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	nro>macro ,s ;

:codigo | adrr --
	dup @ swap 8 + @
	( 1? )( 1- swap ,token swap )
	2drop ;

:memcodigo | nro --
	4 << 'indicepal +
	dup 8 + @ 1 and? ( 'variable )( 'codigo ) nip
	exec ;

|-----
:makemem
	0 ( cntw <? )(
		dup ind2nro memcodigo
		1+ ) drop ;

|-------
::startvm
	|--- reserva memoria para dicc de memoria y memoria de vars
	here dup 'memvar ! 'freemem !
	makemem
::resetvm | --
	0 'irqkey !  | interrupciones
	'inter 'inter> !
	d.ini	| inicia pilad
	r.ini	| inicia pilar
	<<boot '<<ip !
	;

::vm.step? | -- 0/1
	;

|----- imprime pilas

:dec	@+ "%d" printc ;	|::d.pushDec 0
:hex    @+ "$%h" printc ;	|::d.pushHex 1
:bin    @+ "%%%b" printc ;	|::d.pushBin 2
:fix    @+ "%f" printc ;	|::d.pushFix 3
:str    @+ "%d" printc ;	|::d.pushStr 4
:var	@+ "%d" printc ;	|::d.pushVar  5
:dvar	@+ "%d" printc ;	|::d.pushDVar 6
:dcod	@+ "%d" printc ;	|::d.pushDCod 7
:cnum	@+ "%d" printc ;	|::d.pushCNum 8
:cstr	@+ "%d" printc ;	|::d.pushCStr 9
:cdvar	@+ "%d" printc ;	|::d.pushCDVar 10
:cdcod	@+ "%d" printc ;	|::d.pushCDCod 11

#accpp 'dec 'hex 'bin 'fix 'str 'var 'dvar 'dcod 'cnum 'cstr 'cdvar  'cdcod

::printpila | adr -- adr--
	8 -
	@+ $f and 2 << 'accpp + @ exec
	8 - ;

::vm.dump
	"D)" print
	dpila> ( 'dpila >? )( sp printpila ) drop
	cr
	"R)" print
	rpila> ( 'rpila >? )( sp printpila ) drop
	cr
	freemem memvar - 10 >> "USO VARS %d Kbytes" print cr
	<<ip "IP: %h" print cr

	;
