| Interprete de R4
| PHREDA 2007
|---------------------------------
^reda4.txt
^libprint.txt
^r4post.txt
^trace.txt

#:<<ip

#:pilaexe )( 1024
#:pilaexe> 'pilaexe

::+executa | nroword --
	pilaexe> !+ 'pilaexe> ! ;

::-executa | --
	-4 'pilaexe> +! ;

#freemem

#inter )( 64
#inter> 'inter

#irqkey 0
#irqmou 0

|--- Pilas
#dpila )( 1024	#dpila> 'dpila
#dpila.t )( 1024

:d.cnt dpila> 'dpila - ;
:d.ini 'dpila 'dpila> ! ;
:d.push dpila> !+ 'dpila> ! ;
:d.pop  -4 'dpila> +! dpila> @ ;
:d.pop2 dpila> 8 - dup 'dpila> ! @+ swap @ ;
:d.get dpila> 4 - @ ;
:d.get2 dpila> 8 - @ ;

| vista de la pila 	-- a
:d.tipo | nro --
	 dpila> 1028 + ! ;

:dec.d		$0 or d.tipo ;
:hex.d		$1 or d.tipo ;
:bin.d		$2 or d.tipo ;
:fix.d		$3 or d.tipo ;
:dstr.d		$4 or d.tipo ;
:dvar.d		$5 or d.tipo ;
:dacc.d		$6 or d.tipo ;
:prog.d		$7 or d.tipo ;

| tipo en la pila 	b -- t
:d.nro		$00 ;
:d.dir2str	$10 ;
:d.dir2var	$20 ;
:d.dir2acc	$30 ;
:d.calc		$40 ;
:d.calcstr	$50 ;
:d.calcvar	$60 ;
:d.calcacc	$70 ;

#rpila )( 1024	#rpila> 'rpila
#rpila.t )( 1024

:r.ini	'rpila 'rpila> ! ;

:r.push	rpila> !+ 'rpila> ! ;
:r.pop	-4 'rpila> +! rpila> @ ;
:r.cnt	rpila> 'rpila - ;

|---- interrupciones
:+interrupcion | inter --
	0? ( drop ; )
	inter> !+ 'inter> >=? ( "Bucle infinito" 'msg ! 0 ; )
	'inter> ! ;

|------------ test
:pila?	'dpila <? ( "Pila vacia" 'msg ! 0 nip rdrop ; ) ;
:?pila	'dpila> >=? ( "Pila llena" 'msg ! 0 nip rdrop ; ) ;
:pilar?	'rpila <? ( "Pila R vacia" 'msg ! 0 nip rdrop ; ) ;
:?pilar	'rpila> >=? ( "Pila R llena" 'msg ! 0 nip rdrop ; ) ;

:pmem? | adr -- adr/0
	prog >=? ( prog> <=? ( ; ) )
	"fuera de mem" 'msg ! 0 nip rdrop ;


|----- dibuja pila D
:dec.p		@+ " %d" amarillo print ;
:hex.p		@+ " $%h" verde print ;
:bin.p		@+ " %%%b" blanco print ;
:fix.p		@+ " %f" naranja print ;
:dstr.p		@+ " %d" azul print ;
:dvar.p		@+ " %d" violeta print ;
:dacc.p		@+ " %d" cyan print ;
:prog.p		@+ " >%d" rojo print ;

#acctpila dec.p hex.p bin.p fix.p dstr.p dvar.p dacc.p prog.p
:pilatipo | adr -- adr++
	dup 1028 + @ $7 and 2 << 'acctpila + @ exec ;

::dibujapila
	d.cnt 1? (
		amarillo "(" print 'dpila ( dpila> <? )(
			pilatipo |@+ " %d" print
			) drop
		) drop ;

|----- dibuja pila R

#acctpilar dec.p hex.p bin.p fix.p dstr.p dvar.p dacc.p prog.p
:pilartipo | adr -- adr++
	dup 1028 + @ $7 and 2 << 'acctpilar + @ exec ;

::dibujapilar
	r.cnt 1? (
		cyan "(" print 'rpila ( rpila> <? )(
			@+ " %h" print
			) drop
		) drop ;


|--- interprete

:i0		drop ;
:i:		drop ;
:i#		drop ;
:idec	d.nro dec.d	8 >> cte + @ d.push ;
:ihex	d.nro hex.d	8 >> cte + @ d.push ;
:ibin	d.nro bin.d	8 >> cte + @ d.push ;
:ifix	d.nro fix.d	8 >> cte + @ d.push ;

:istr
	8 >> str +
	d.push ;

:ivar
	8 >> pal@tok @
	d.push drop ;

:idvar
	8 >> pal@tok
	d.push drop ;

:ilit
	8 >> d.push ;

:idwor
	d.dir2acc dacc.d
	8 >> pal@tok nip
	d.push ;

|--- llama palabra
:iwor
	8 >> pal@tok
	swap +executa
	swap r.push ;

|--- retorna
:i;
	r.cnt 0? ( nip ; ) 2drop
	r.pop -executa ;

:i)(
:i)		8 >> + ;
:i(     drop ;
:i[     8 >> @ 1? ( swap d.push )( drop ) ;
:i]     drop ;

:i0?	drop @+ d.get 0? ( 2drop ; ) drop 8 >> + ;
:i+?	drop @+ d.get +? ( 2drop ; ) drop 8 >> + ;
:i-?	drop @+ d.get -? ( 2drop ; ) drop 8 >> + ;
:i1?	drop @+ d.get 1? ( 2drop ; ) drop 8 >> + ;
:i=?	drop @+ d.get2 d.pop =? ( 2drop ; ) drop 8 >> + ;
:i<?	drop @+ d.get2 d.pop <? ( 2drop ; ) drop 8 >> + ;
:i>?	drop @+ d.get2 d.pop >? ( 2drop ; ) drop 8 >> + ;
:i<=?	drop @+ d.get2 d.pop <=? ( 2drop ; ) drop 8 >> + ;
:i>=?   drop @+ d.get2 d.pop >=? ( 2drop ; ) drop 8 >> + ;
:i<>?   drop @+ d.get2 d.pop <>? ( 2drop ; ) drop 8 >> + ;
:iAND?  drop @+ d.get2 d.pop AND? ( 2drop ; ) drop 8 >> + ;
:iNAND? drop @+ d.get2 d.pop NAND? ( 2drop ; ) drop 8 >> + ;

:iEXEC
	drop
	d.pop 1? ( swap r.push ; ) drop
	;

:iDROP  drop -4 'dpila> +! ;
:i2DROP drop -8 'dpila> +! ;
:i3DROP drop -12 'dpila> +! ;
:i4DROP drop -16 'dpila> +! ;
:iDUP   drop
	dpila> 4 -
	dup 1028 + @+ swap ! 		| copia tipo costoso!!
	@+ swap !+ 'dpila> ! ; 					| copia valor
:i2DUP  drop
	dpila> 8 -
	dup 1028 + @+ swap @+ rot rot !+ !		| copia tipo
	@+ swap @+ rot rot !+ !+ 'dpila> ! ;
:iOVER    
	drop dpila> 8 - @+ swap 4+ !+ 'dpila> ! ;
:iPICK2
	drop dpila> 12 - @+ swap 8 + !+ 'dpila> ! ;
:iPICK3
	drop dpila> 16 - @+ swap 12 + !+ 'dpila> ! ;
:iPICK4
	drop dpila> 20 - @+ swap 16 + !+ 'dpila> ! ;
:iSWAP
	drop dpila> 8 - dup @+ swap @ rot !+ ! ;
:iNIP
	drop dpila> 8 - dup 4+ @ swap !+ 'dpila> ! ;
:iROT
	drop dpila> 12 - dup >r @+ swap @+ r!+ @ r!+ r> ! ;
:i2OVER
	drop dpila> 16 - @+ swap @+ rot rot 8 + !+ !+ 'dpila> ! ;
:i2SWAP
	drop dpila> 16 - >r r@+ r@+ r@+ r@+ -16 r+ swap r!+ r!+ swap r!+ r> ! ;

:i>R	drop dpila> 4 -  dup 'dpila> ! @ rpila> !+  'rpila> ! ;		|--- pila de direccion
:iR>    drop rpila> 4 -  dup 'rpila> ! @ dpila> !+  'dpila> ! ;
:iR     drop rpila> 4 -  @ dpila> !+  'dpila> ! ;
:iR+	drop dpila> 4 -  dup 'dpila> ! @ rpila> 4 - +! ;
:iR@+	drop rpila> 4 -  dup @ @ dpila> !+ 'dpila> ! 4 swap +! ;
:iR!+	drop dpila> 4 -  dup 'dpila> ! @ rpila> 4 - 4 over +! @ ! ;
:iRDROP	drop rpila> 4 -  'rpila> ! ;

:iAND		drop dpila> 8 -  dup @+ swap @ and swap !+ 'dpila> ! ;			|--- logica y aritmetica
:iOR		drop dpila> 8 -  dup @+ swap @ or swap !+ 'dpila> ! ;
:iXOR		drop dpila> 8 -  dup @+ swap @ xor swap !+ 'dpila> ! ;
:iNOT		drop dpila> 4 -  dup @ not swap ! ;
:i+			drop dpila> 8 -  dup @+ swap @ + swap !+ 'dpila> ! ;
:i-         drop dpila> 8 -  dup @+ swap @ - swap !+ 'dpila> ! ;
:i*         drop dpila> 8 -  dup @+ swap @ * swap !+ 'dpila> ! ;
:i/         drop dpila> 8 -  dup @+ swap @ / swap !+ 'dpila> ! ; | "division por 0"
:i*/        drop dpila> 12 -  dup @+ swap @+ swap @ */ swap !+ 'dpila> ! ; | "division por 0"
:i*>>       drop dpila> 12 -  dup @+ swap @+ swap @ *>> swap !+ 'dpila> ! ;
:i/MOD      drop dpila> 8 -  dup @+ swap @ /mod swap rot !+ !+ 'dpila> ! ;
:iMOD       drop dpila> 8 -  dup @+ swap @ mod swap !+ 'dpila> ! ;
:iABS       drop dpila> 4 -  dup @ abs swap ! ;
:iNEG       drop dpila> 4 -  dup @ neg swap ! ;
:i2/        drop dpila> 4 -  dup @ 2/ swap ! ;
:i2*        drop dpila> 4 -  dup @ 2* swap ! ;
:i<<        drop dpila> 8 -  dup @+ swap @ << swap !+ 'dpila> ! ;
:i>>        drop dpila> 8 -  dup @+ swap @ >> swap !+ 'dpila> ! ;
:i1-        drop dpila> 4 -  dup @ 1- swap ! ;
:i1+        drop dpila> 4 -  dup @ 1+ swap ! ;
:i4+        drop dpila> 4 -  dup @ 4+ swap ! ;
:i@         drop dpila> 4 -  dup @ @ swap ! ;			|--- mem
:iC@        drop dpila> 4 -  dup @ c@ swap ! ;
:iW@        drop dpila> 4 -  dup @ w@ swap ! ;
:i!         drop dpila> 8 -  dup 'dpila> ! @+ swap @ ! ;
:iC!        drop dpila> 8 -  dup 'dpila> ! @+ swap @ c! ;
:iW!        drop dpila> 8 -  dup 'dpila> ! @+ swap @ w! ;
:i+!        drop dpila> 8 -  dup 'dpila> ! @+ swap @ +! ;
:iC+!       drop dpila> 8 -  dup 'dpila> ! @+ swap @ c+! ;
:iW+!       drop dpila> 8 -  dup 'dpila> ! @+ swap @ w+! ;
:i@+        drop dpila> 4 -  dup @+ @ swap !+ 'dpila> ! 4 swap +! ; | no test
:iC@+       drop dpila> 4 -  dup @+ c@ swap !+ 'dpila> ! 1 swap +! ; | no test
:iW@+       drop dpila> 4 -  dup @+ w@ swap !+ 'dpila> ! 2 swap +! ; | no test
:i!+        drop dpila> 8 -  dup @+ swap @ !+ swap !+ 'dpila> ! ; | nose
:iC!+       drop dpila> 8 -  dup @+ swap @ c!+ swap !+ 'dpila> ! ; | nose
:iW!+       drop dpila> 8 -  dup @+ swap @ w!+ swap !+ 'dpila> ! ; | nose

|---- pantalla
:iSW 		drop d.nro dec.d sw d.push ;
:iSH    	drop d.nro dec.d sh d.push ;
:iFRAMEV	drop d.nro hex.d framev d.push ;
:iREDRAW    drop redraw ;
:iUPDATE
	drop	|update | hace interrupciones
	inter> 'inter =? ( drop ; )
	4 - dup 'inter> ! @ |0? ( drop ; )
	swap rpila> !+ 'rpila> !
	;
|---- dibujo
:iOP    	drop d.pop2 op ;
:iCP    	drop d.pop2 cp ;
:iLINE  	drop d.pop2 line ;
:iCURVE 	drop d.pop2 curve ;
:iPLINE 	drop d.pop2 pline ;
:iPCURVE 	drop d.pop2 pcurve ;
:iPOLI   	drop poli ;
:iFCOL   	drop d.pop2 fcol ;
:iFCEN   	drop d.pop2 fcen ;
:iFMAT   	drop d.pop2 fmat ;
:iSFILL  	drop sfill ;
:iLFILL  	drop lfill ;
:iRFILL  	drop rfill ;
:iSETXY  	drop d.pop2 setxy ;
:iPX+!   	drop d.pop px+! ;
:iPX!+   	drop d.pop px!+ ;
:iPX@    	drop px@ d.push ;
:iPAPER  	drop d.pop paper ;
:iINK    	drop d.pop ink ;
:iINKF   	drop ink@ d.push ;
:iALPHA  	drop d.pop ALPHA ;
:iCLS    	drop cls ;
|----- sis
:iMSEC   	drop msec d.push ;
:iTIME   	drop time rot d.push swap d.push d.push ;
:iDATE   	drop date rot d.push swap d.push d.push ;
:iEND    	2drop 0 ;
:iRUNi   	2drop 0 ;
|-----  Interrupciones
:iRPEN!  	drop dpila> 4 -  dup 'dpila> ! @ 'irqkey ! ; | n --
:iRKEY!  	drop dpila> 4 -  dup 'dpila> ! @ 'irqmou ! ; | n --
|-----mouse
:iXYMOUSE	drop xymouse swap d.push d.push ;
:iBMOUSE    drop bmouse d.push ;
|-----teclado
:iKEY		drop key d.push ;
|-----joystick
:iCNTJOY    drop cntjoy d.push ;
:iGETJOY    drop d.pop GETJOY d.push ;
|--- archivos
:iDIR       drop d.pop dir ;	| "path" --
:iVOL       drop d.pop VOL d.push ;  | nro -- "nombre" o 0
:iFILE      drop d.pop file d.push ;  | nro -- "nombre" o 0
:iFSIZE     drop d.pop FSIZE d.push ;  | nro --  size o 0
:iLOAD      drop dpila> 8 -  dup @+ swap @ load swap !+ 'dpila> ! ;  | 'from "filename" -- 'to
:iSAVE      drop dpila> 12 -  dup @+ swap @+ swap @ save 'dpila> ! ;   |  'from cnt "filename" --
:iMEM       drop mem dpila> !+  'dpila> ! ; | mem
|--- mueve mem
:iMOVE      drop dpila> 12 -  dup @+ swap @+ swap @ move 'dpila> ! ;
:iMOVE>     drop dpila> 12 -  dup @+ swap @+ swap @ move> 'dpila> ! ;
:iCMOVE     drop dpila> 12 -  dup @+ swap @+ swap @ cmove 'dpila> ! ;
:iCMOVE>    drop dpila> 12 -  dup @+ swap @+ swap @ cmove> 'dpila> ! ;
|--- sonido
:iSLOAD     drop d.pop SLOAD d.push ;  | "" -- n
:iSPLAY     drop d.pop SPLAY drop ;  | n/0 --
:iMLOAD     drop d.pop MLOAD d.push ;  | "" -- n
:iMPLAY     drop d.pop MPLAY drop ;  | n/0 --

|---------- tabla de saltos
#tablai	| tabla de saltos de instrucciones
i0
i: i#
idec ihex ibin ifix istr
iwor ivar idwor idvar
i;
i(		i)(		i)		i[		i]
i0?		i+?		i-?		i1?
i=?		i<?		i>?		i<=?	i>=?	i<>?	iAND?	iNAND?	iEXEC
iDUP	iDROP	iOVER	iPICK2	iPICK3	iPICK4	iSWAP	iNIP	iROT
i2DUP	i2DROP	i3DROP	i4DROP	i2OVER	i2SWAP
i>R		iR>		iR		iR+		iR@+	iR!+	iRDROP
iAND	iOR		iXOR	iNOT	i+		i-		i*		i/		i*/
i*>>	i/MOD	iMOD	iABS	iNEG	i1+		i4+		i1-		i2/		i2*		i<<		i>>
i@		iC@		iW@		i!		iC!		iW!		i+!		iC+!	iW+!	i@+		i!+		iC@+	iC!+	iW@+	iW!+
iMSEC	iTIME	iDATE	iEND	iRUNi
iSW		iSH		iCLS	iREDRAW	iFRAMEV	iUPDATE
iXYMOUSE	iBMOUSE	iKEY
iCNTJOY	iGETJOY		iRPEN!
iRKEY!	iSETXY	iPX+!	iPX!+	iPX@
iPAPER	iINK	iINKF	iALPHA
iOP		iCP		iLINE	iCURVE	iPLINE	iPCURVE	iPOLI
iFCOL  iFCEN	iFMAT	iSFILL	iLFILL	iRFILL

iMEM	iDIR	iFILE	iFSIZE	iVOL	iLOAD	iSAVE
iMOVE	iMOVE>	iCMOVE	iCMOVE>
iSLOAD	iSPLAY	iMLOAD	iMPLAY

::stepvm | --
	<<ip 0? ( drop ; )
	@+ dup $ff and
	2 << 'tablai + @ exec
	'<<ip ! ;

::playvm | --
	key.push
|	[ "a" trace key 0? ( ; ) drop irqkey +interrupcion ; ] ikey!
|	[ irqmou +interrupcion ; ] ipen!
	[ 0 ; ] >esc<
	<<ip ( update 1? )(
|		c@+ $ff and 2 << 'tablai + @ exec
		) drop
|	'<<ip !
	key.pop
	;

::dumpvm
	fonti
	dibujapila cr
	dibujapilar cr

	blanco
	<<ip 0? ( drop "fin" print ; )
	dup "IP:%h " print
	tokenprint
	@ 8 >> " %h" print
	|drop
|	<<boot "boot:%h" print
	cr
	;

:l
	dup @
	dup $ff and swap 8 >>
	"val:%d op:%h adr:%h" print
	;
|------- funcionamiento
::resetvm | --
	0 dup 'irqmou ! 'irqkey !  | interrupciones
	'inter 'inter> !
	d.ini	| inicia pilad
	r.ini	| inicia pilar
	<<boot '<<ip !

	;

|------- asigna memoria a variables
:mem0 | nro --
	freemem !+ 'freemem ! ;
:mem1 | nro --
	freemem w!+ 'freemem ! ;
:mem2 | nro --
	freemem c!+ 'freemem ! ;
:mem3 | nro --
	'freemem +! ;

#gmem 'mem0

:gstr | adr --
	freemem
	( swap c@+ 1? )( rot c!+ ) rot
	c!+ 'freemem ! ;

:accpal | val instr --
	7 <? ( drop 8 >> cte + @ gmem exec ; )
	7 =? ( drop 8 >> str + gstr ; )
	12 <? ( drop 8 >> pal@tok nip mem0 ; )
	13 =? ( 2drop 'mem2 'gmem ! ; ) | (
	14 =? ( 2drop 'mem3 'gmem ! ; )	| )(
	16 =? ( 2drop 'mem1 'gmem ! ; ) | [
	2drop 'mem0 'gmem ! ;

|idec ihex ibin ifix istr
|iwor ivar idwor idvar
|i;
|i(		i)(		i)		i[		i]

:addmem | inifree adr1token -- inifree adr1token
	dup @  | inicio tokens
	'mem0 'gmem !
	( @+ 1? )(
		dup $ff and
		3 <? ( 3drop ; ) | # o :
		17 >? ( 3drop ; ) | o > ]
		accpal
       )
	2drop ;

:cadapal | adr -- adr++
	dup 8 + @ 1 nand? ( drop 16 + ; ) drop | solo variables
	freemem
	over 4+ addmem !
	16 + ;

:memvars | --
	'indicepal ( indicepal> <? )( cadapal ) drop ;

|-------------------------------------
::startvm
	|--- reserva memoria para dicc de memoria y memoria de vars
	here
	dup 'freemem ! $ffff +
	'here !

	memvars
	resetvm ;