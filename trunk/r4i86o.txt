| R4i86.txt - PHREDA 2009
| Generacion de codigo para i86-FASM
|
| .. [esp] - pila R
| .. [esi] eax - pila D
|
| ebx edi - Libres
| ecx - libre | sar sal
| edx - libre | * /
|
| ebp - VFRAME pointer
| MMX - auxiliares de almacenamiento
|
| nivel 0 -- solo macros,variable y direcciones
| nivel 1 -- llamada a palabras de nivel 0
| nivel 2 -- llamada a palabras de nivel 1 y 0
|--------------------------------------------
^lib/gui.txt
^lib/parse.txt
^lib/trace.txt

|----- nro de str y label
#nstr | nro de string
#nlabel | nro de etiqueta

::inistr	0 'nstr ! ;
::inilab    0 'nlabel ! ;

|----- pila de compilador
#pilac )( 256	#pilac> 'pilac

:>pilac pilac> !+ 'pilac> ! ;
:<pilac -4 'pilac> +! pilac> @ ;
:pilac! 'pilac 'pilac> ! ;

:label	"_" ,s ,h 	;
:jmp,	"jmp " ,s label ,cr ;

|------ pila virtual
| 		valor 		tipo
| TOS = dpila>-4  dpila>-8

#dpila )( 2048
#dpila> 'dpila

:d.ini
	'dpila 'dpila> ! ;
:d.cnt | -- cnt
	dpila dpila> - 3 >> ;
:d.pop | -- nro
	dpila> 8 -
	dup 'dpila> ! 4+ @ ;
:d.pop2
	-16 'dpila> +!
	dpila> 4+ @+ swap 4+ @ ;
:d.pop3
	-24 'dpila> +!
	dpila> 4+ @+ swap 4+ @+ swap 4+ @ ;

:d.get dpila> 4 - @ ;
:d.get2 dpila> 12 - @ ;

:d.push | nro tipo --
	dpila> !+ !+ 'dpila> ! ;

|----------- tipo de pila
:d.pushStk	0 d.push ; | pila	over
:d.pushCte	1 d.push ; | cte	23
:d.pushStr	2 d.push ; | str    "hola"
:d.pushVar	3 d.push ; | var	var
:d.pushCal	4 d.push ; | cal	caculo 23 var +
:d.pushDvar	5 d.push ; | dvar	'var
:d.pushDvca 6 d.push ; | dvca	'var 2 +
:d.pushDcod	7 d.push ; | dcod	'exe

:stk drop;
:cte @ "%d" mprint ;
:str @ "s%h" mprint ;
:var @ "[w%h]" mprint ;
:cal drop ;
:dvar
:dvca
:dcod @ "w%h" mprint ;

#tipopila 'stk 'cte 'str 'var 'cal 'dvar 'dvca 'dcod
:d.getval | nro -- ""
	3 << dpila> swap - 4 -
	dup 4 - @ 2 << 'tipopila + @ exec | tipo
	;

#rnos8 "[esi+4*7]"
#rnos7 "[esi+4*6]"
#rnos6 "[esi+4*5]"
#rnos5 "[esi+4*4]"
#rnos4 "[esi+4*3]"
#rnos3 "[esi+4*2]"
#rnos2 "[esi+4]"
#rnos "[esi]"
#ra "eax"
#rb "ebx"
#rc "ecx"
#rd "edx"
#re "edi"
#cl "cl"


#regused 0  0  0  0  0
#regname ra rb rc rd re

:reg.reset
	0 0 0 0 1 'regused !+ !+ !+ !+ !
	d.ini ;

:reg.free | -- nro/-1
	'regused
	5 ( 1? )( swap @+
		0? ( drop 'regused - 2 >> 1- nip ; )
		drop swap ) 2drop
	-1 ;

:reg.set | nro --
	2 << 'regused + 1 swap ! ;

:reg.plain
	d.cnt 0? ( drop ; )
	( 1? )(
		"mov [esi+4*" ,s dup ,d "]," ,s dup d.getval ,s ,cr
		1- ) 2drop
	"mov eax," ,s 0 d.getval
    reg.reset ;

:,lit
	dup tok>cte d.pushCte ;
|	dup tok>cte ,DUP "mov eax," ,s ,d ,cr ;
:,lits
	nstr d.pushStr 1 'nstr +! ;
|	,DUP "mov eax,s" ,s nstr ,h ,cr 1 'nstr +! ;
:,wor
	| elegir modo
	| comprobar ultimo para jmp
	|dup nro>dicn "call " ,s ,s ,cr
	;
:,var
	dup 8 >> d.pushVar ;
|	dup nro>dicn ,DUP "mov eax,[" ,s ,s "]" ,s ,cr ;
:,dwo
	dup 8 >> d.pushDcod ;
|	dup nro>dicn ,DUP "mov eax," ,s ,s ,cr ;
:,dva
	dup 8 >> d.pushDvar ;
|	dup nro>dicn ,DUP "mov eax," ,s ,s ,cr ;

|---------------------------

:TOS>eax
	;
:TOS>cl
	;
:NOS>byte
	;
:NOS>word
	;
:NOS>cl
	;
:NOS>eax
	;
:NOS2>eax
	;
:USAedx
	;

:*,DUP

	;
:,DUP
	"lea esi,[esi-4]" ,ln
	"mov [esi],eax" ,ln ;

:*,DROP
	;
:,DROP
	"lodsd" ,ln ;

:*,NIP
   ;
:,NIP
	"lea esi,[esi+4]" ,ln ;

:*,2DROP
	;
:,2DROP
	,NIP ,DROP ;

:*,3DROP
	;
:,3DROP
	"lea esi,[esi+8]" ,ln
	,DROP ;

:*,4DROP
	;
:,4DROP
	"lea esi,[esi+12]" ,ln
	,DROP ;

:,OVER
	,DUP "mov eax,[esi+4]" ,ln ;
:,PICK2
	,DUP "mov eax,[esi+4*2]" ,ln ;
:,PICK3
	,DUP "mov eax,[esi+4*3]" ,ln ;
:,PICK4
	,DUP "mov eax,[esi+4*4]" ,ln ;
:,SWAP
|	"mov edx,eax" ,ln |"xchg eax,[esi]" ,ln ;|ggrr
|	"mov eax,[esi]" ,ln
|	"mov [esi],edx" ,ln ;
	"push eax" ,ln	| otra version (sin dx)
	"mov eax,[esi]" ,ln
	"popd [esi]" ,ln ;
:,ROT
|	"mov ecx,[esi+4]" ,ln
|	"mov edx,[esi]" ,ln
|	"mov [esi],eax" ,ln
|	"mov [esi+4],edx" ,ln
|	"mov eax,ecx" ,ln ;
	"pushd [esi+4]" ,ln	| otra version (sin dx,cx)
	"pushd [esi]" ,ln
	"popd [esi+4]" ,ln
	"mov [esi],eax" ,ln
	"pop eax" ,ln ;
:,2DUP
	,OVER ,OVER ;
:,2OVER
	"mov [esi-4],eax" ,ln
	"lea esi,[esi-8]" ,ln
|	"mov edx,[esi+16]" ,ln
|	"mov [esi],edx" ,ln
	"pushd [esi+16]" ,ln
	"popd [esi]" ,ln
	"mov eax,[esi+12]" ,ln ;
:,2SWAP
|	"mov ecx,[esi+4]" ,ln
	"pushd [esi+4]" ,ln
	"mov [esi+4],eax" ,ln
|	"mov edx,[esi+8]" ,ln
	"pushd [esi+8]" ,ln
	"mov eax,[esi]" ,ln
	"mov [esi+8],eax" ,ln
|	"mov [esi],edx" ,ln
|	"mov eax,ecx" ,ln
	"popd [esi]" ,ln
	"pop eax" ,ln ;


:,EXEC
	"mov ecx,eax" ,ln
	,DROP
	"or ecx,ecx" ,ln
	"jz @f" ,ln
	"call ecx" ,ln
	"@@:" ,ln ;

:*,>R
	| ( ; )
	TOS REGR "mov %s,%s" ,print ,cr
	*,DROP ;
:,>R
	"push eax" ,ln
	,DROP ;

:*,R>
	;
:,R>
	,DUP "pop eax" ,ln ;

:*,R
	| ( ; )
	*,DUP
	TOS REGR "mov %s,%s" ,print ,cr ;
:,R
	,DUP "mov eax,[esp]" ,ln ;

:*,RDROP
| ( ; )
:,RDROP
	"lea esp,[esp+4]" ,ln ;

:*,R+
	TOS REGR "add [%s],%s" ,print ,cr ;
:,R+
	"add [esp],eax" ,ln
	,DROP ;

:*,R!+
	TOS REGR "mov [%s],%s" ,print ,cr
	REGR "add %s,4" ,print ,cr
	;
:,R!+
	"pop edx" ,ln
	"mov [edx],eax" ,ln
	"add edx,4" ,ln
	"push edx" ,ln
	,DROP ;

:*,R@+
	REGR TOS "move %s,[%s]" ,print ,cr
	REGR "add %s,4" ,print ,cr ;
:,R@+
	,DUP
	"mov eax,[esp]" ,ln
	"mov eax,[eax]" ,ln
	"add [esp],4" ,ln ;
|	"pop edx" ,ln
|	"mov eax,[edx]" ,ln
|	"add edx,4" ,ln
|	"push edx" ,ln ;

:*,AND
	NOS TOS "and %s,%s" ,print ,cr
	*,NIP ;
:,AND
	"and eax,[esi]" ,ln ,NIP ;

:*,OR
	NOS TOS "or %s,%s" ,print ,cr *,NIP ;
:,OR
	"or eax,[esi]" ,ln ,NIP ;

:*,XOR
	NOS TOS "xor %s,%s" ,print ,cr *,NIP ;
:,XOR
	"xor eax,[esi]" ,ln ,NIP ;

:*,NOT
	TOS "not %s" ,print ,cr ;
:,NOT
	"not eax" ,ln ;

:2cte?
	0 ;

:,+
	nvstack
	0? ( drop "add eax,[esi]" ,ln ,NIP ; )
	1 >? ( drop 2cte? 1? ( drop d.pop2 + d.pushCte ; ) )
	drop
    NOS TOS "add %s,%s" ,print ,cr *NIP ;

:*,-
	TOS NOS "sub %s,%s" ,print ,cr *,DROP ;
:,-
	"neg eax" ,ln
	"add eax,[esi]" ,ln
	,NIP ;

:*,*
	"cdq" ,ln
	TOS "imul dword %s" ,print ,cr
	;
:,*
	"cdq" ,ln
	"imul dword [esi]" ,ln
	,NIP ;

:*,/
	NOS>eax
	*,DROP
	"cdq" ,ln
	TOS "idiv %s" ,print ,cr ;
:,/
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln ;

:*,*/
	NOS2>eax
	"cdq" ,ln
	NOS "imul dword %s" ,print ,cr
	TOS "idiv %s" ,print ,cr
	*,2DROP ;

:,*/
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"idiv ecx" ,ln
	,NIP ;

:*,*>>
	NOS2>eax
	TOS>cl
	"cdq" ,ln
	NOS "imul dword %s" ,print ,cr
	TOS "shrd eax,edx,%s" ,print ,cr
	*,2DROP ;
:,*>>
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"imul dword [esi]" ,ln
	"shrd eax,edx,cl" ,ln
	,NIP ;

:*,<</
	TOS>cl
	NOS2>eax
	"cdq" ,ln
    TOS "shld eax,edx,%s" ,print ,cr
	NOS "idiv %s" ,print ,cr
	*,2DROP ;
:,<</
	"mov ecx,eax" ,ln
	"pushd [esi+4]"
	,2DROP
	"cdq" ,ln
    "shld eax,edx,cl" ,ln
	"pop ecx" ,ln
	"idiv ecx" ,ln ;

:*,/MOD
	NOS>eax
	"cdq" ,ln
	TOS "idiv %s" ,ln
	NOS "mov %s,eax" ,ln
	"mov eax,edx" ,ln ;
:,/MOD
	"mov ecx,eax" ,ln
	"mov eax,[esi]" ,ln
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov [esi],eax" ,ln
	"mov eax,edx" ,ln ;

:*,MOD
	NOS>eax
	"cdq" ,ln
 	TOS "idiv %s" ,ln
	*,DROP ;
:,MOD
	"mov ecx,eax" ,ln
	,DROP
	"cdq" ,ln
	"idiv ecx" ,ln
	"mov eax,edx" ,ln ;

:*,<<
	TOS>cl
	TOS NOS "sal %s,%s" ,print ,cr
	*,DROP ;
:,<<
	"mov ecx,eax" ,ln ,DROP
	"sal eax,cl" ,ln ;

:*,>>
	TOS>cl
	TOS NOS "sar %s,%s" ,print cr
	*,DROP ;
:,>>
	"mov ecx,eax" ,ln ,DROP
	"sar eax,cl" ,ln ;

:*,ABS
	TOS>eax
	USAedx
:,ABS
	"cdq" ,ln
	"add eax,edx" ,ln
	"xor eax,edx" ,ln ;

:*,NEG
	TOS "neg %s" ,print ,cr ;
:,NEG
	"neg eax" ,ln ;

:*,1+
	TOS "inc %s" ,print ,cr ;
:,1+
	"inc eax" ,ln ;

:*,4+
	TOS "add %s,4" ,print ,cr ;
:,4+
	"add eax,4" ,ln ;

:*,1-
	TOS "dec %s" ,print ,cr ;
:,1-
	"dec eax" ,ln ;

:*,2/
	TOS "sar %s,1" ,print ,cr ;
:,2/
	"sar eax,1" ,ln ;

:*,2*
	TOS "sal %s,1" ,print ,cr ;
:,2*
	"sal eax,1" ,ln ; | "add eax,eax" ,ln

:*,@
	TOS TOS "mov %s,dword [%s]" ,print ,cr
:,@
	"mov eax,dword [eax]" ,ln ;

:*,C@
	TOS TOS "movsx %s,byte [%s]" ,print ,cr ;
:,C@
	"movsx eax,byte [eax]" ,ln ;

:*,W@
	TOS TOS "movsx %s,word [%s]" ,print ,cr ;
:,W@
	"movsx eax,word [eax]" ,ln ;

:*,!
	NOS TOS "mov [%s],%s" ,print ,cr
	*,2DROP ;
:,!
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	,2DROP ;

:*,C!
 	NOS>byte TOS "mov byte [%s],%s" ,print ,cr
	*,2DROP ;
:,C!
	"mov ecx,[esi]" ,ln
	"mov byte [eax],cl" ,ln
	,2DROP ;

:*,W!
	NOS>word TOS "mov word [%s],%s" ,print ,cr
	*,2DROP ;
:,W!
	"mov ecx,[esi]" ,ln
	"mov word [eax],cx" ,ln
	,2DROP ;

:*,+!
	NOS TOS "add [%s],%s" ,print ,cr
	*,2DROP ;
:,+!
	"mov ecx,[esi]" ,ln
	"add [eax],ecx" ,ln
	,2DROP ;

:*,W+!
	NOS>word TOS "add word [%s],%s" ,print ,cr
	*,2DROP ;
:,W+!
	"mov ecx,[esi]" ,ln
	"add word [eax],cx" ,ln
	,2DROP ;

:*,C+!
	NOS>byte TOS "add byte [%s],%s" ,print ,cr
	*,2DROP ;
:,C+!
	"mov ecx,[esi]" ,ln
	"add byte [eax],cl" ,ln
	,2DROP ;

:*,!+
	NOS TOS "mov [%s],%s" ,print ,cr
	TOS "add %s,4" ,print ,cr
	*,NIP ;
:,!+
	"mov ecx,[esi]" ,ln
	"mov [eax],ecx" ,ln
	"add eax,4" ,ln
	,NIP ;

:*,W!+
	NOS>word TOS "mov [%s],%s" ,print ,cr
	TOS "add %s,2" ,print ,cr
	*,NIP ;
:,W!+
	"movsx ecx,word [esi]" ,ln
	"mov [eax],cx" ,ln
	"add eax,2" ,ln
	,NIP ;

:*,C!+
	NOS>byte TOS "mov [%s],%s" ,print ,cr
	TOS "inc %s" ,print ,cr
	*,NIP ;
:,C!+
	"movsx ecx,byte [esi]" ,ln
	"mov [eax],cl" ,ln
	"inc eax" ,ln
	,NIP ;

:*,@+
	*,DUP
	TOS NOS "mov %s,[%s]" ,print ,cr
	NOS "add %s,4" ,print ,cr ;
:,@+
	"mov ecx,[eax]" ,ln
	"add eax,4" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;

:*,W@+
	*,DUP
	TOS NOS "movsx %s,word [%s]" ,print ,cr
	NOS "add %s,2" ,print ,cr ;
:,W@+
	"movsx ecx,word [eax]" ,ln
	"add eax,2" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;

:*,C@+
	*,DUP
	TOS NOS "movsx %s,byte [%s]" ,print ,cr
	NOS "add %s,4" ,print ,cr ;
:,C@+
	"movsx ecx,byte [eax]" ,ln
	"inc eax" ,ln
	"mov [esi-4],eax" ,ln
	"mov eax,ecx" ,ln
	"lea esi,[esi-4]" ,ln ;


:*,0?
	TOS "or %s,%s" ,ln
	"jnz " ,s ;
:,0?
	"or eax,eax" ,ln
	"jnz " ,s ;

:*,+?
	TOS "or %s,%s" ,ln
	"js " ,s ;
:,+?
	"or eax,eax" ,ln
	"js " ,s ;

:*,-?
	TOS "or %s,%s" ,ln
	"jns " ,s ;
:,-?
	"or eax,eax" ,ln
	"jns " ,s ;

:*,1?
	TOS "or %s,%s" ,ln
	"jz " ,s ;
:,1?
	"or eax,eax" ,ln
	"jz " ,s ;

:*,=?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jnz " ,s ;
:,=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jnz " ,s ;

:*,<?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jge " ,s ;
:,<?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jge " ,s ;

:*,>?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jle " ,s ;
:,>?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jle " ,s ;

:*,<=?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jg " ,s ;
:,<=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jg " ,s ;

:*,>=?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jl " ,s ;
:,>=?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jl " ,s ;

:*,<>?
	NOS TOS "cmp %s,%s" ,ln *,DROP
	"jz " ,s ;
:,<>?
	"mov ecx,eax" ,ln ,DROP
	"cmp eax,ecx" ,ln
	"jz " ,s ;

:*,and?
	NOS TOS "test %s,%s" ,ln *,DROP
	"jz " ,s ;
:,and?
	"mov ecx,eax" ,ln ,DROP
	"test eax,ecx" ,ln
	"jz " ,s ;

:*,nand?
	NOS TOS "test %s,%s" ,ln *,DROP
	"jnz " ,s ;
:,nand?
	"mov ecx,eax" ,ln ,DROP
	"test eax,ecx" ,ln
	"jnz " ,s ;

|--------- Sistema
:,DIR
	"call SYSDIR" ,ln ;
:,FILE
	"call SYSFILE" ,ln ;
:,FSIZE
	"call SYSFSIZE" ,ln ;
:,VOL
	"call SYSVOL" ,ln ;
:,LOAD
	"call SYSLOAD" ,ln ;
:,SAVE
	"call SYSSAVE" ,ln ;
:,UPDATE
	"call SYSUPDATE" ,ln ;
:,MSEC
	"call SYSMSEC" ,ln ;
:,TIME
	"call SYSTIME" ,ln ;
:,DATE
	"call SYSDATE" ,ln ;
:,END
	"jmp SYSEND" ,ln ;
:,RUN
	"call SYSRUN" ,ln ;
:,SW
	,DUP  "mov eax,[SYSW]" ,ln ;
:,SH
	,DUP  "mov eax,[SYSH]" ,ln ;
:,MEM
	,DUP  "mov eax,FREE_MEM" ,ln ;

:,PAPER
	"mov [SYSPAPER],eax" ,ln ,DROP ;

:,CLS
	"call SYSCLS" ,ln ;

:,REDRAW
	"call SYSREDRAW" ,ln ;
:,FRAMEV
	,DUP  "mov eax,SYSFRAME" ,ln ;

:,XFB
	,DUP  "mov eax,XFB" ,ln ;
:,>XFB
	"call SYSTOXFB" ,ln ;
:,XFB>
	"call SYSXFBTO" ,ln ;

:,SETXY | x y --
	"cdq" ,ln
	"imul dword [SYSW]" ,ln
	"add eax,[esi]" ,ln
	"lea ebp,[SYSFRAME+eax*4]" ,ln
	,2DROP ;

:,PX+!	| s --
	"lea ebp,[ebp+eax*4]" ,ln
	,DROP ;
:,PX!+	| rgb --
	"mov [ebp],eax" ,ln
	"add ebp,4" ,ln
	,DROP ;
:,PX@	| -- rgb
	,DUP "mov eax,[ebp]" ,ln ;

:,iPEN! | v --
	"mov [SYSiPEN],eax" ,ln
	,DROP ;

:,TPEN | --
	,DUP
	"mov eax,[MCNT]" ,ln
	"dec eax" ,ln
	"mov [MBUFF],eax" ,ln
	"xor eax,eax" ,ln
	"inc eax" ,ln
	"mov [MCNT],eax" ,ln
	"mov eax,MBUFF" ,ln ;

:,XYMOUSE | -- x y
	,DUP
	"lea esi,[esi-4]" ,ln
	"mov eax,[SYSXYM]" ,ln
	"mov ecx,eax" ,ln
	"and ecx,$ffff" ,ln
	"shr eax,16" ,ln
	"mov [esi],ecx" ,ln ;

:,BMOUSE | -- c
	,DUP "mov eax,[SYSBM]" ,ln ;

:,iKEY! | v --
	"mov [SYSiKEY],eax" ,ln
	,DROP ;

:,KEY	| -- c
	,DUP "mov eax,[SYSKEY]" ,ln ;

|-----------
:,MOVE
:,MOVE>
:,CMOVE
:,CMOVE>
:,INK
:,INK@
:,ALPHA
:,OP
:,CP
:,LINE
:,CURVE
:,PLINE
:,PCURVE
:,POLI
:,FCOL
:,FCEN
:,FMAT
:,SFILL
:,LFILL
:,RFILL
:,TFILL

:,CNTJOY
:,GETJOY
:,SLOAD
:,SPLAY
:,MLOAD
:,MPLAY
:,SERVER
:,CLIENT
:,SEND
:,RECV
:,CLOSE
:,DOCINI
:,DOCEND
:,DOCAT
:,DOCLINE
:,DOCTEXT
:,DOCFONT
:,DOCBIT
:,DOCRES
:,DOCSIZE
:,SYSTEM
	;

|------------ compila CODIGO
|:nro>dicn2   8 >> 5 << 'indicepal + @ ; | nombre
:nro>dicn   8 >> "w%h" mprint ;			| numero de palabra

:+etiqueta	| -- nueva   // y agrega a pila
	nlabel 1+ dup 'nlabel ! dup >pilac ;

:salto? | adr++ xx xx -- adr++ xx xx 0/1
	pick2 8 - @ $ff and
	18 >? ( 31 <? ( 1 nip ; ) ) 0 nip ;

:,defw :,defv ;



:,;
	| reacomoda pila
	"ret" ,ln ;
:,(
	+etiqueta salto? 1? ( swap label ,cr 1 )( swap label ":" ,ln 2 ) >pilac drop ;
:,)(
	<pilac salto? 0? ( drop
			1 =? ( <pilac +etiqueta jmp, label ":" ,ln 1 >pilac drop ; )
			)( drop
			2 =? ( <pilac +etiqueta label ,cr >pilac 3 >pilac drop ; ) )
	drop ;
:,)
	<pilac salto? 0? ( drop
			1 =? ( <pilac label ":" ,ln drop ; )
			2 =? ( <pilac jmp, drop ; )
			3 =? ( <pilac jmp, <pilac label ":" ,ln drop ; )
		)( drop
			2 =? ( <pilac label ,cr drop ; ) )
	drop ;
:,[
	,DUP +etiqueta +etiqueta "mov eax," ,s label ,cr jmp, <pilac label ":" ,ln ;
:,]
	<pilac label ":" ,ln ;

|---- nivel 0 - sin desordenar la pila
#nivel0 0
,defw ,defv ,lit ,lit ,lit ,lit ,lits ,wor ,var ,dwo ,dva
,; ,( ,)( ,) ,[ ,] ,EXEC
,0? ,+? ,-? ,1? ,=? ,<? ,>? ,<=? ,>=? ,<>? ,AND? ,NAND?
,DUP ,DROP ,OVER ,PICK2 ,PICK3 ,PICK4 ,SWAP ,NIP	|--- pila
,ROT ,2DUP ,2DROP ,3DROP ,4DROP ,2OVER ,2SWAP
,>R ,R> ,R ,R+ ,R@+ ,R!+ ,RDROP					|--- pila direcciones
,AND ,OR ,XOR ,NOT  								|--- logicas
,+ ,- ,* ,/ ,*/ ,*>> ,/MOD ,MOD ,ABS  			|--- aritmeticas
,NEG ,1+ ,4+ ,1- ,2/ ,2* ,<< ,>>
,@ ,C@ ,W@ ,! ,C! ,W! ,+! ,C+! ,W+!  			|--- memoria
,@+ ,!+ ,C@+ ,C!+ ,W@+ ,W!+
,MOVE ,MOVE> ,CMOVE ,CMOVE>
,MEM ,DIR ,FILE ,FSIZE ,VOL ,LOAD ,SAVE			|--- memoria bloques
,UPDATE ,MSEC ,TIME ,DATE ,END ,RUN 				|--- sistema
,SW ,SH ,CLS ,REDRAW ,FRAMEV  						|--- pantalla
,SETXY ,PX+! ,PX!+ ,PX@
,XFB ,>XFB ,XFB>
,PAPER ,INK ,INK@ ,ALPHA							|--- color
,OP ,CP ,LINE ,CURVE ,PLINE ,PCURVE ,POLI		|--- dibujo
,FCOL ,FCEN ,FMAT ,SFILL ,LFILL ,RFILL ,TFILL
,TPEN ,XYMOUSE ,BMOUSE
,IKEY! ,KEY
,CNTJOY ,GETJOY
,SLOAD ,SPLAY	,MLOAD ,MPLAY					|--- Sonido
,SERVER ,CLIENT ,SEND ,RECV ,CLOSE
,DOCINI ,DOCEND ,DOCAT ,DOCLINE ,DOCTEXT ,DOCFONT ,DOCBIT ,DOCRES ,DOCSIZE  |-- impresora
,SYSTEM

| compila nivel 0 de palabras
:,token0 | a -- a.
	@+ dup
	$ff and 2 << 'nivel0 + @ exec
	drop ;

::compword | nro --
	nro>toklen
	( 1? )( 1- swap	,token0 swap )
	2drop ;


|------------ compila DATO
#d1 "dd "
#d2 "dw "
#d3	"db "
#d4 "rb "
#dtipo 'd1
#dini 0

:dfin	dini 1? ( dtipo )( "," ) ,s drop 0 'dini ! ;
:dfini	dini 1? ( dtipo ,s 0 ,d ) drop 0 'dini ! ;
:dfins	dini 1? ( "db " )( "," ) ,s drop 0 'dini ! ;
:dfind	dini 1? ( "dd " )( "," ) ,s drop 0 'dini ! ;

|----------------------------------------------
:cpycad | adr --
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( 2drop ; ) ) ,c ) 2drop ;

:,ddefw
:,ddefv drop ;
:,dlit	dfin tok>cte ,d ;
:,dlits	dfins tok>str 34 ,c cpycad 34 ,c ",0" ,s ;
:,dwor	dfind nro>dicn ,s ;
:,d;	drop ;
:,d(	drop dtipo >pilac 'd3 'dtipo ! ;
:,d)(	drop 'd4 'dtipo ! ;
:,d)	drop <pilac 'dtipo ! ;
:,d[	drop dtipo >pilac 'd2 'dtipo ! ;
:,d]	drop <pilac 'dtipo ! ;

#coded 0
,ddefw ,ddefv ,dlit ,dlit ,dlit ,dlit ,dlits ,dwor ,dwor ,dwor ,dwor
,d; ,d( ,d)( ,d) ,d[ ,d]

|---- datos
::compvar | nropal cntlla -- nropal
	drop dup "w%h " ,print
	'd1 'dtipo ! 1 'dini ! pilac!
	dup nro>tok
	( @+ dup $ff and 3 <? )( 	 | dirv n c
		18 <? ( 2 << 'coded + @ exec )( 2drop )
		,sp )
	3drop
	dfini
	,cr ;

:otrostr
	over
	1 'dini !
	nstr "s%h " ,print
	,dlits
	1 'nstr +!
	,cr ;

::compvarw | nropal cntlla -- nropal
	drop |dup "w%h  " ,print
	dup
	nro>toklen
	( 1? )( 1- swap
		@+ dup $ff and
		7 =? ( otrostr ) 2drop
		swap )
	2drop ;
