| compila2
| genera en memoria codigo tokenizado de :R4
| sin memoria auxiliar (solo tira de tokens)
| comprueba errores en compilacion
| PHREDA 2010
|---------------------------
^lib/reda4.txt
^lib/parse.txt
^lib/trace.txt
^lib/macrosr4.txt

| memoria
| las tablas en mem cte
|-----------------	<- memsrc
| codigo
|...
|-----------------
| includes
|...
|-----------------  <- ctes
| constantes
|..					<- ctes>
|----------------- 	<- prog
| programa
|..					<- prog>

#memsrc
#cte
#cte>
#:prog		|---- codigo&variables
#:prog>
#:<<boot

#:cntwords
#:newwords

#salto 0		| es salto el anterior ?
#estado 0		| 0-nada 1-dato 2-accion  3-boot
#:error> 0

#inisrc 0
#:msg 0

|---- includes
| 'string|'mem|first|last		16 bytes (32 includes)
|  0      4    8     12  ...16
#:indiceinc )( 8192
#:indiceinc> 'indiceinc
|---- palabras
| string|token|info|mem|len|calls|dir|group   32 bytes por palabra
| 0      4     8    12   16  20    24  28   .. 32 |---largo
#:indicepal )( 65536
#:indicepal> 'indicepal	| 2048 palabras
#:indicepal<

::nro>nom | n -- %a
	5 << 'indicepal + @ ;

::nro>dir | n -- %a
	5 << 'indicepal + 4+ @ ;

::nro>info | n -- %a
	5 << 'indicepal + 8 + ;

::nro>mem | n -- m
	5 << 'indicepal + 12 + @ ;

::nro>calls | n -- m
	5 << 'indicepal + 20 + ;

::nro>var? | n -- 1/0
	5 << 'indicepal + 8 + @ %1 and ;


#pilac )( 128	#pilac> 'pilac	|----- pila de compilador

:c.ini 'pilac 'pilac> ! ;
:c.push pilac> !+ 'pilac> ! ;
:c.pop -4 'pilac> +! pilac> @ ;
:c.cnt pilac> 'pilac - ;

#pinc )( 128 #pinc> 'pinc	 | pila de nombres de includes para saber donde esta el error

|---- Compila programa
:,, | n --
	prog> !+ 'prog> ! ;

:dicc>nro | w -- n
	'indicepal - 5 >> ;

:src>nro | -- n    nro actual de palabra
	indicepal> 'indicepal - 5 >> ;

::tok>src | tok -- mem
	8 >> memsrc + ;

::tok>cte | tok -- nro
	8 >> cte + @ ;

::tok>str | tok -- nro
	8 >> cte + ;

::tok>mem
	8 >> nro>mem ;

|----------
:,cte | n -- d
|	cte ( cte> <? )( 						| buscar iguales. muy lento !!
|		@+ pick2 =? ( drop nip cte 4+ - ; )
|		drop )
	cte> swap over !+ 'cte> ! cte - ;

:rstr | c --
	cte> c!+ 'cte> ! ;

:realstr | cad -- cad'
	( 1+ dup c@ 1? )(
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 rstr ; ) )
		rstr ) rstr ;

:,str | a -- a' d
	cte> swap realstr swap cte - ;

|----------- compilar codigo
:,,defc | --  define codigo
	src>nro 8 << 1 or ,, ;
:,,defv | --  define variable
	src>nro 8 << 2 or ,, ;

:,,litD | n -- literal
	,cte 8 << 3 or ,, ;
:,,litH | n -- literal
	,cte 8 << 4 or ,, ;
:,,litB | n -- literal
	,cte 8 << 5 or ,, ;
:,,litF | n -- literal
	,cte 8 << 6 or ,, ;
:,,litS | n -- literal
	,str 8 << 7 or ,, ;

:,,word | n --  word
	dicc>nro 8 << 8 or ,, ;
:,,var | n --  var
	dicc>nro 8 << 9 or ,, ;
:,,dword | n --  dir word
	dicc>nro 8 << 10 or ,, ;
:,,dvar | n --  dir var
	dicc>nro 8 << 11 or ,, ;

:,,mac  | n --  macro
	12 + ,, ;

::nro>macro | n -- s
	12 - macroname ;

|----------ERROR
#auxstr )( 64

::seterror | adr "" -- adr
	over "%w%s" mprint 'auxstr strcpy
	'auxstr 'msg ! ;

|--------- busqueda
:escom		( c@+ 1? )( 13 =? ( drop 1- ; ) drop ) drop 1- ;
:escad		( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( drop 1- ; ) ) drop ) drop 1- ;
:pasapal	( c@+ 1? )( 33 <? ( drop 1- ; ) drop ) drop 1- ;

::?palabra | str -- str dir / str 0
	indicepal> 32 -	|---largo
	( 'indicepal >=? )(
		dup @						| str ind pal
		pick2 =s 0? ( drop )( drop
			dup 8 + @
			%10 and? ( drop ; )( drop indicepal< >=? ( ; ) )
			)
		32 - ) drop |---largo
	0 ;

:include? | s -- adr/0
	'indiceinc ( indiceinc> <? )(
		@+ pick2 =s 1? ( drop nip 4 - ; ) drop
		12 + ) 2drop 0 ;

|--- Compila saltos
:hole	prog> 4 - c.push ;
:label	prog> c.push ;
:holefix	prog> c.pop dup >r 4+ - 8 << r @ or r> ! ;
:labelfix	c.pop prog> 4 - dup @ rot prog> - 8 << or swap ! ;

|--- calculo de longitud
:finpalabra
	indicepal> 16 -
	( dup @ 1? ( 2drop ; ) drop | si tiene largo termina
		dup 8 - @ %1 nand?  )(  | si el anterior es dato termina ( :a #b dup no anda !!)
		drop
		prog> over 12 - @ - 2 >> over ! |---------------------
		32 - ) |---largo
	2drop ;

|---  Macros
:c;     c.cnt 0? ( dup 'estado ! finpalabra ) drop ;
:c(     salto 1? ( hole 1 )( label 2 ) c.push drop ;
:c)(    c.pop salto 0? ( drop
				1 =? ( drop hole c.pop holefix c.push 1 c.push ; )
			)( drop
				2 =? ( drop c.pop hole c.push 3 c.push ; ) ) drop
			")( error" 'msg ! 	0 ;
:c)     c.pop salto 0? ( drop
				1 =? ( drop holefix ; )
				2 =? ( drop labelfix ; )
				3 =? ( drop labelfix holefix ; ) drop
				"salto desconocido" 'msg ! 0 ;
			)( drop
				2 =? ( drop labelfix ; ) ) drop
			") error" 'msg ! 0 ;
:c[     hole label 4 c.push ;
:c]     | ** es ; el anterior token? NO-> error
		c.pop 4 <>? ( "] error" 'msg ! 0 nip ; ) drop
		c.pop holefix  drop ; | agrega lit direccion

#amacro 'c; 'c( 'c)( 'c) 'c[ 'c]

:d;		0 'estado ! ;
:d(		; |unidad c.push 'm8 'unidad ! ;
:d)(	; |'mcnt 'unidad !  ;
:d)		; |c.pop 'unidad ! ;
:d[		; |unidad c.push 'm16 'unidad ! ;
:d]		; |c.pop 'unidad ! ;

#dmacro 'd; 'd( 'd)( 'd) 'd[ 'd]

:esmacro | nro --
	dup 1- ,,mac	| resto 1...
	estado 1 =? ( 'dmacro )( 'amacro ) nip
	over | nro 'dir nro
	7 <? ( 1- 2 << + @ exec 0? ( nip ; ) )( 2drop )
	7 >? ( 20 <? ( 1 )( 0 ) )( 0 ) 'salto ! | despues del exec !!!
	drop
	pasapal ;

:cerrarpalabra | -- guardar info de ultima definicion
	c.cnt 1? ( "Bloque mal cerrado" 'msg ! 0 rdrop ; ) drop |	testear el c.pila... debe estar en 0
	0 'salto ! ;

:+dic | tipo mem nombre  --
	indicepal> >r r!+ r!+ r!+ 			| nombre|tok|info|
	0 r!+ 0 r!+ 0 r!+ 0 r!+ 0 r!+	| stat|mem|calls|dir|group
	r> 0 over ! 'indicepal> ! ;

:esboot
	prog> '<<boot ! 3 'estado !
	,,defc
	0 prog> "" +dic
	1+ ;

:esdefinicion | adr -- adr
	cerrarpalabra 2 'estado !
	1+ dup c@ | adr adr+1 c
	33 <? ( drop esboot ; ) | boot
	$3A =? ( swap 1+ swap %10 )( 0 ) nip | exporta bit 2
	,,defc
	over
	dup ?macro 1? ( 2drop " es reservado" seterror drop 0 ; ) drop
|	?palabra 1? ( 3drop " ya existe" seterror 2 - 0 ; ) drop
	swap 0 or prog> rot +dic
	pasapal ;

:esvariable | adr -- adr'
	cerrarpalabra 1 'estado !
	1+ dup c@
	33 <? ( drop "# solo" 'msg ! 0 ; )
	$3A =? ( swap 1+ swap %10 )( 0 ) nip | exporta bit 2
	,,defv
	over
	dup ?macro 1? ( 4drop "base no definible" 'msg ! 0 ; ) drop
|  	?palabra 1? ( 3drop " ya existe" seterror 2 - 0 ; ) drop
	swap 1 or prog> rot +dic
	pasapal ;

:escadena | a -- 'a
	0 'salto !
	estado  | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera s" seterror 0 ; )
	drop
	,,litS ;

:datoaccion?	| adr -- adr f
	dup 8 + @ 1 and? ( 0 )( 1 ) nip ;

:espalabra | str n -- str
	0 'salto !
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	drop
	datoaccion? 1? ( drop ,,word )( drop ,,var )
	pasapal ;

:esdir | str n -- str
	0 'salto !
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	drop
	datoaccion? 1? ( drop ,,dword )( drop ,,dvar )
	pasapal ;

:esnumero | str nro --
	0 'salto !
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera n" seterror 0 ; )
	drop basen
	2 =? ( drop ,,litb ; )
	10 =? ( drop ,,litd ; )
	16 =? ( drop ,,lith ; )
	-1 =? ( drop ,,litf ; )
	2drop
	dup " base?" seterror 0 ;


|------------------------------------------------------------
:esinclude | a -- a' b'
	1+ dup ( c@+ 32 >? )( drop ) drop 1-
	swap
	include? 1? (
		4+ dup @	| inc+4 cod
		1? ( over 4 - dup @ pinc> !+ !+ 'pinc> !	| guarda nombre y dir include
			0 rot !	dup  ; ) drop
		) drop ;

|--- busca palabra
:palabra | str -- str'
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ )		| quitar espacios
	$5e =? ( drop esinclude ; )			| $5e ^  Include
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$3A =? ( drop esdefinicion ; )		| $3a :  Definicion
	$23 =? ( drop esvariable ; )		| $23 #  Variable
	$22 =? ( drop escadena ; )			| $22 "	 Cadena
	$27 =? ( drop 1+ dup 				| $27 ' Direccion
		dup ?macro 1? ( 3drop " no tiene direccion" seterror |'msg !
			3 - 0 ; ) drop
		?palabra 1? ( nip esdir ; ) 2drop
		" no existe direccion" seterror 3 - 0 ; )
	drop
	dup ?numero 1? ( drop rot drop esnumero ; ) drop | numero
	dup ?fnumero 1? ( drop rot drop -1 'basen ! esnumero ; ) drop | numero
	dup ?macro 1? ( esmacro ; ) drop		| macro
	dup	?palabra  1? ( nip espalabra ; ) drop		| palabra
	" no existe" seterror drop
	2 - 0 ;

|---- inicializa
:clearall
	'indicepal 'indicepal> !
	0 indicepal> !
	'indiceinc 'indiceinc> !
	0 dup 'msg ! 'error> !
	;

|---  includes
:esinc 	| a -- a' incluye codigo
	1+ dup include? 1? ( drop ; ) drop
	'auxstr over copynom
	here over indiceinc> !+ !+ 0 0 rot !+ !+ 'indiceinc> !
	here 'auxstr load	| carga include
	here =? ( " no existe" 'auxstr strcat 'auxstr 'msg ! drop 0 ; )
	0 swap c!+ 'here !
	pasapal ;

:includepal | str -- str'
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ ) | quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$22 =? ( drop escad ; )		| $22 "	 Cadena
	$5e =? ( drop esinc ; )		| $5e ^  Include
	drop pasapal ;

:loadincludes | fuente --
	( includepal 0? ) drop
	'error> !
	msg 1? ( drop ; ) drop
	0 ( drop indiceinc>
		'indiceinc ( indiceinc> <? )(
			4+ @+
			( includepal 0? ) drop 'error> !
			msg 1? ( 4drop ; ) drop
			8 + ) drop
		indiceinc> =? )
	drop ;

|--------- COMPILA ARCHIVO
::tokencomp | "" --
	here
	dup pick2 load 0 swap c!+ 'here !
	clearall
	'indicepal dup 'indicepal< !
	pick2 'pinc !+ !+ 'pinc> !	| 1er include es el codigo
	dup 'memsrc !
	dup 'inisrc !
	dup loadincludes			| carga todos los includes
	msg 1? ( 2drop ; ) drop	| error en include
	0 'estado !
|--- mapa de memoria
	here dup dup
	'cte ! 'cte> ! $fffff + | memoria para constantes
	dup 'prog ! 'prog> !
|--- recorre fuente
	c.ini
	0 swap	| 0 corta los includes
	dup		| 0 com act
	( ( palabra 0? ) drop
		'error> ! 'inisrc !
		msg 1? ( ( 1? )( drop ) drop ; ) drop | corta si hay error
		1? ( indicepal> indicepal< pinc> 4 - @ 8 + !+ !
			indicepal> 'indicepal< ! )	| ignorar locales si es un include
		-8 'pinc> +!					| desapila includes
		0? )
	,, drop

	indicepal> 'indicepal - 5 >> 1- 'cntwords !
	indicepal< 'indicepal - 5 >> 'newwords !
	;

|------------------llamadas entre palabras
#pilapend )( 4096		| pila de pendientes
#pilapend> 'pilapend

:addcall | n -- nant
	nro>calls dup @ dup 1+ rot ! ;

::getllamadas | n -- n v
	nro>calls @ ;

:useaddr | n --
	nro>info dup @ $1000 or swap ! ;

::getflags | n -- v
	nro>info @ $1000 and ;

:addw | w --
	pilapend> !+ 'pilapend> ! ;

:overcode | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) 2drop ;

:overdire | valor xx -- valor xx
	over 8 >> dup addcall 0? ( over addw ) drop useaddr ;

:reccod | nrop -- nrop
	dup 5 << 'indicepal +
	dup 4+ @ swap 16 + @  | .. dir cnt
	( 1? )( 1- swap
		@+ dup $ff and
		8 =? ( overcode ) | call word
		9 =? ( overcode ) | var
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop swap ) 2drop
	;

:recdat | nrop -- nrop
	dup 5 << 'indicepal + 4+ @
	( @+ dup $ff and
		1 =? ( 0 nip ) | corta con defc
		2 =? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		8 =? ( overcode ) | call word
		9 =? ( overcode ) | var
		10 =? ( overdire ) | dir word
		11 =? ( overdire ) | dir var
		2drop )
	3drop
	;

|------ mapeos
| vector | nropal cntlla -- nropal

::varmap | 'vector --
	0 ( cntwords <? )(
		dup 5 << 'indicepal + 8 + @
		1 nand? ( drop )( drop
			dup getllamadas 1? ( pick2 exec )( drop )
			)
		1+ ) 2drop ;

::wordmap | 'vector --
	0 ( cntwords <? )(
		dup 5 << 'indicepal + 8 + @
		1 and? ( drop )( drop
			dup getllamadas 1? ( pick2 exec )( drop )
			)
		1+ ) 2drop ;

::diccmap | 'vector --
	0 ( cntwords 1+ <? )(
		dup getllamadas 1? ( pick2 exec )( drop )
		1+ ) 2drop ;

|----------- indice de usadas
#indexw
#:cntw

::ind2nro | nroindex -- nroreal
	2 << indexw + @ ;

:makeindex
	here 'indexw !
	[ drop dup , ; ] diccmap
	here indexw - 2 >> 1- 'cntw !
	;


|--------- COMPILA ARCHIVO 2da PASADA
::tokenpost
	|-------- arbol de llamadas
	cntwords dup addcall drop
	'pilapend !+ 'pilapend> !
	( pilapend> 'pilapend >? )(
		4 - dup 'pilapend> ! @ | palabra a agregar
		dup 5 << 'indicepal + 8 + @
		1 and? ( drop recdat )( drop reccod )
		drop )
	drop
	|----------
	prog> 'here !
	makeindex
	;


|-------- ERROR EN CODIGO
:ubicarerror | -- car lin
	1 inisrc ( error> <? )( c@+ 13 =? ( rot 1+ rot rot ) drop ) | cuenta lineas
	( dup c@ 13 <>? )( drop 1- ) drop | cuenta caracters a inicio de linea
	error> swap - swap
	;

:fuenteerror | -- ".txt"
	pinc> 8 - @ 0? ( "N/A?" nip )
	dup ( c@+ 32 >? )( drop ) drop 0 swap 1- c!
	;

::saverror | --
	mark
	fuenteerror ,s ubicarerror "|%d|%d|" ,print msg ,s ,eol
	"debug.err" savemem
	empty ;


::dumperror
|	msg 0? ( drop ; ) blanco print
|	fuenteerror "|%s" print
	ubicarerror "|%d|%d|" blanco print cr
	indicepal> 'indicepal - 5 >> "pal:%d  " print
	indiceinc> 'indiceinc - 5 >> "inc:%d  " print
	prog> prog - 2 >> "prog:%d " print cr
	amarillo
	'indiceinc ( indiceinc> <? )(
		@+ "%w" print
		@+ "-%d" print
		@+ "-%d" print
		@+ "-%d" print
		cr ) drop ;

::dumpcompila
|	prog meminc - 10 >> "%d KBytes includes" print cr
    prog> prog - 10 >> "%d KBytes programa " print cr
	memsrc "%h <-src" print cr
|	meminc "%h <-inc" print cr
	prog "%h <-prog" print cr
	newwords cntwords "cnt:%d new:%d " print cr
	cntw "%d" print
	;


