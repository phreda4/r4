| compilador bytecode R4
| 9/6, 4/7,7/7 PHREDA
|---------------------------
^lib/fontj.txt
^bytecode.txt
^lib/parse.txt

#macros
";" "(" ")(" ")" "[" "]" "EXEC"
"0?" "+?" "-?" "1?" "=?" "<?" ">?" "<=?" ">=?" "<>?" "AND?" "NAND?"
"DUP" "DROP" "OVER" "PICK2" "PICK3" "PICK4" "SWAP" "NIP"	|--- pila
"ROT" "2DUP" "2DROP" "3DROP" "4DROP" "2OVER" "2SWAP"
">R" "R>" "R" "R+" "R@+" "R!+" "RDROP"					|--- pila direcciones
"AND" "OR" "XOR" "NOT"  								|--- logicas
"+" "-" "*" "/" "*/" "*>>" "/MOD" "MOD" "ABS"  			|--- aritmeticas
"NEG" "1+" "4+" "1-" "2/" "2*" "<<" ">>"
"@" "C@" "W@" "!" "C!" "W!" "+!" "C+!" "W+!"  			|--- memoria
"@+" "!+" "C@+" "C!+" "W@+" "W!+"
"MOVE" "MOVE>" "CMOVE" "CMOVE>"
"MEM" "DIR" "FILE" "FSIZE" "VOL" "LOAD" "SAVE"			|--- memoria bloques
"UPDATE" "MSEC" "TIME" "DATE" "END" "RUN" 				|--- sistema
"SW" "SH" "CLS" "REDRAW" "FRAMEV"  						|--- pantalla
"SETXY" "PX+!" "PX!+" "PX@"
"XFB" ">XFB" "XFB>"
"PAPER" "INK" "INK@" "ALPHA"							|--- color
"OP" "CP" "LINE" "CURVE" "PLINE" "PCURVE" "POLI"		|--- dibujo
"FCOL" "FCEN" "FMAT" "SFILL" "LFILL" "RFILL" "TFILL"
"IPEN!" "XYMOUSE" "BMOUSE"
"IKEY!" "KEY"
"IJOY!" "CNTJOY" "GETJOY"
"SLOAD" "SPLAY"	"MLOAD" "MPLAY"					|--- Sonido
"SERVER" "CLIENT" "SEND" "RECV" "CLOSE"
"TIMER"											|------- timer
( 0 )

#ULTIMAP
#indicemac )( 1024
#indicemac> 'indicemac
|--- palabras
#palabras )( 8192
#lastpal 'palabras
|--- indice de palabras
#indicepal )( 8192
#indice> 'indicepal
|--- info palabras
#infopal )( 8192
|--- dir palabras
#dirpal )( 8192

#:error 0
#:error> 0

#lastcall 0
#salto	0
#modo 	0 | codigo/dato
#locales
#cntpal 0	| palabras

|---- palabras de la memoria
:m8 | nro8 --
	dato> c!+ 'dato> ! ;
:m16 | nro16 --
	dato> w!+ 'dato> ! ;
:m32 | nro32 --
	dato> !+ 'dato> ! ;
:mcnt | nro --
	'dato> +! ;

#unidad 'm32

:wtipo | n -- n info
	dup 2 << 'infopal + @ ;
:wadr | n -- adr
	2 << 'dirpal + @ ;

|--- includes
#includes )( 2048
#includes> 'includes
#indexinc )( 512
#indexinc> 'indexinc
#incmem )( 512
#incmem> 'incmem

|----- pila de compilador
#pilac )( 128
#pilac> 'pilac

:inipilac 'pilac 'pilac> ! ;
:>pilac pilac> !+ 'pilac> ! ;
:<pilac -4 'pilac> +! pilac> @ ;
:anida pilac> 'pilac - ;

|---- palabras del codigo
:8g | code --
	prog> c!+ 'prog> ! ;

:cLIT	1 8g ;
:cADR	2 8g ;
:cCALL	3 8g ;
:cJMP	4 8g ;
:cJMPR	5 8g ;
:cDUP	18 8g ;
:cDROP	19 8g ;
:cNIP	22 8g ;

:32g | nro32 --
	prog> !+ 'prog> ! ;

:callxjump
	4 prog> 5 - c! ;

|------------- llenar los lugares
:hole
	prog> >pilac
	1 'prog> +! ;
:holefix
	<pilac prog> over - 1- swap c! ;
:label
	prog> >pilac ;
:labelfix
	<pilac prog> - 8g ;

|-------- macros
:macro;
	lastcall 0? ( 0 8g )( callxjump ) drop ;
:macro(
	salto 1? ( hole 1 )( label 2 ) >pilac drop ;
:macro)(
	<pilac salto 0? ( drop
				1 =? ( drop cJMPR hole <pilac holefix >pilac 1 >pilac ; )
			)( drop
				2 =? ( drop <pilac hole >pilac 3 >pilac ; ) ) drop
			")( error" 'error !
			0 ;
:macro)
	<pilac salto 0? ( drop
				1 =? ( drop holefix ; )
				2 =? ( drop cJMPR labelfix ; )
				3 =? ( drop cJMPR labelfix holefix ; )
			)( drop
				2 =? ( drop labelfix ; ) ) drop
			") error" 'error !
			0 ;
:macro[
	cJMPR hole label 4 >pilac ;
:macro]
	<pilac 4 <>? ( "] error" 'error ! 0 nip ; ) drop
	<pilac holefix cLIT 32g ;

#fmacros 'macro; 'macro( 'macro)( 'macro) 'macro[ 'macro]

:macrod;	;
:macrod(	unidad >pilac 'm8 'unidad ! ;
:macrod)(	'mcnt 'unidad ! ;
:macrod)	<pilac 'unidad ! ;
:macrod[ 	unidad >pilac 'm16 'unidad ! ;
:macrod] 	<pilac 'unidad ! ;

#dmacros 'macrod; 'macrod( 'macrod)( 'macrod) 'macrod[ 'macrod]

|======================================================
|---- Agrega palabra al diccionario
:copyn | src buf -- src' buf'
    swap ( c@+ 32 >? )( toupp rot c!+ swap ) drop 1- 0 rot c!+ ;

|-------------------------------------------------------------------
:escadena | a -- a' graba cadena  "....."",..."
	0 'lastcall !
	0 'salto !
	modo 0? ( cLIT dato> 32g ) drop
	( 1+ dup c@ 1? )( 34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 m8 ; ) ) m8 ) m8 ;

|-------------------------------------------------------------------
:definep | anad --
	indice> 'indicepal - 'dirpal + !	|	poner direccion de palabra (dato o prog)
	swap 1+ dup c@ $3a =? ( drop 1+ swap 2 or swap )( drop )
	swap indice> 'indicepal - 'infopal + !
	lastpal indice> !+ 'indice> ! 0 indice> !
	lastpal copyn 'lastpal !
	1 'cntpal +!  ;

:defineesp | "tt" --
	prog> indice> 'indicepal - 'dirpal + !	|	poner direccion de palabra (dato o prog)
	2 indice> 'indicepal - 'infopal + !
	indice> !+ 'indice> ! 0 indice> ! ;

:ultsindat |--  si la ultima variable no tiene numero poner un 0 (32 bits)
	cntpal 1- 2 << 'dirpal + @
	dato> =? ( 0 m32 )
	drop ;

|---------------------------------------------------------------------
:esdefinicion | a -- a' define palabra
	0 'lastcall !
	ultsindat
	0 'salto ! 0 'modo !
	dup 1+ c@ 33 <? ( drop 2 + prog> '<<boot ! ":" defineesp ; ) drop
	0 prog> definep ;

:esvariable | a -- a' define variable
	ultsindat
	0 'salto ! 1 'modo !
	'm32 'unidad !
	1 dato> definep ;

:esnumero | adr nro -- adr
	0 'lastcall !
	0 'salto !
	modo 0? ( drop
		0 >=? ( 255 ULTIMAP - <? ( ULTIMAP + 8g ; ) )
		cLIT 32g )( drop unidad exec  ) ;

:espalabra | adr nro -- adr
	0 'lastcall ! 0 'salto !
	modo 0? ( drop
		wtipo 1 and 0? ( drop cCALL wadr 32g 1 'lastcall ! )( drop cADR wadr 32g )
	)( drop wadr m32 ) ;

:esdir	| adr nro -- adr
	0 'lastcall ! 0 'salto !
	wadr
	modo 0? ( drop cLIT 32g )( drop m32 ) ;

:esmacro | adr nro -- adr
	modo 0? ( drop
		6 <? ( 2 << 'fmacros + @ exec 0 'lastcall ! 0 'salto ! ; )
		6 >? ( 19 <? ( 1 )( 0 ) )( 0 )  'salto !
		8g
		0 'lastcall !
	)( drop
		6 <? ( 2 << 'dmacros + @ exec ; )
		"macro en dato" 'error !
		0 )
	;

|---------------------------------------------------------------------
:?palabra | str -- str' nro 1 / str 0
	indice> 4 - ( 'indicepal >=? )(
		dup @ 			| str ind pal
		pick2 =word= 1? (										| str ind dir 1
			drop over 'indicepal - 'infopal + @ $2 and 		| str ind dir infop
			0? ( drop over locales >=? ( 1 )( 0 ) nip )		| es local ? esta adentro ?
			1? ( drop rot drop swap 							| dir ind
				'indicepal - 2 >> 1 ; )( nip )
			) drop
		4 - ) 2drop 0 ;					| str md+4 pal'

:?macro
	'indicemac ( @+ 1? )( 			| str w pal
		pick2 =word= 1? (			| str maindic dir 1
			drop rot drop swap 		| dir maindic
			'indicemac - 2 >> 1- 1 ; )
		drop ) nip nip ;					| str md+4 pal'

|---  includes
:include? | s -- adr/0
	'indexinc ( indexinc> <? )(
		@+ pick2 = 1? ( drop nip 4 - ; ) drop
		) 2drop 0 ;

:esinclude | a -- a' b'
	1+ dup ( c@+ 32 >? )( drop ) drop 1-
	swap include? 1? (
		'indexinc - 'incmem +
		dup @ 1? ( 0 rot ! ; ) drop
		) drop ;

|---- Includes
:i,	includes> c!+ 'includes> ! ;
:cpy,
	( c@+ 1? )( 33 <? ( drop 0 i, ; ) toupp i, ) i, ;
:escom
    ( c@+ 1? )( 13 =? ( drop ; ) drop ) drop 1- ;
:escad
    ( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( drop ; ) ) drop ) drop 1- ;
:esnad
    ( c@+ 1? )( 33 <? ( drop ; ) drop ) drop 1- ;

:esinc 	| a -- a' incluye codigo
	1+ dup include? 1? ( drop esnad ; ) drop
	includes> indexinc> !+ 'indexinc> !
	cpy, here dup incmem> !+ 'incmem> !
	indexinc> 4 - @ load 0 swap c!+ 'here !	;

:includepal | str -- str'
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ ) | quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$22 =? ( drop escad ; )		| $22 "	 Cadena
	$5e =? ( drop esinc ; )		| $5e ^  Include
	drop esnad ;

:loadincludes | fuente --
	dup ( c@+ 1? )( drop ) drop 1+ 'here ! | saltear 1er fuente
	'indexinc 'indexinc> !
	'incmem 'incmem> !
	'includes 'includes> !

	( includepal 0? ) 2drop |c@ ,n |1? ( error )
	0 ( drop indexinc>
		'incmem ( incmem> <? )( @+ ( includepal 0? ) 2drop ) drop
		indexinc> =? ) drop
	0 'modo !
	;

:escomentario | a -- a' saltea comentario
	( c@+ 1? )( 13 =? ( drop 1- ; ) drop ) drop 1- ;

|--- busca palabra
:palabra | str -- str' tipo \finOk-0/com/cad/def/var/inc/dir/num/pal/error
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ )		| quitar espacios
	$7c =? ( drop escomentario ; )		| $7c |	 Comentario
	$22 =? ( drop escadena ; )			| $22 "	 Cadena
	$3A =? ( drop esdefinicion ; )			| $3a :  Definicion
	$23 =? ( drop esvariable ; )			| $23 #  Variable
	$5e =? ( drop esinclude ; )			| $5e ^  Include
	$27 =? ( drop 1+ dup 				| $27 ' Direccion  -- adr nro 6
		?palabra 1? ( drop rot drop esdir ; )
		over 'error> ! "No valido" 'error ! ; )
	drop dup ?numero  1? ( drop rot drop esnumero ; )
	drop dup ?fnumero  1? ( drop rot drop esnumero ; )
	drop dup ?macro 1? ( drop rot drop esmacro ; )
	drop dup ?palabra 1? ( drop rot drop espalabra ; ) drop
	"No existe" 'error !
	dup 'error> !
	0 ;

|---- inicializa
:clearall
	'macros 'indicemac |	haceindice
	( over c@ 1? )(
		drop over swap !+ swap
		( c@+ 1? )( drop ) drop swap
		) drop 'indicemac> !
	0 indicemac> ! drop
	indicemac> 'indicemac - 2 >> 'ULTIMAP ! | ultima primitiva
	'palabras 'lastpal  !
	'indicepal 'indice> !
	0 indice> ! 0 'cntpal !
	;

|------------ Compilar
::bytecodecomp | addr --  addr'
	clearall
	dup loadincludes
	0 dup 'error ! 'error> !
	'indicepal 'locales !
	inipilac
	here 1+ dup 'iprog ! 'prog> !		| 256kb prog
	here $3ffff + dup 'idato ! 'dato> !	| resto dato+libre
	0 '<<boot !
	0 swap | 0 corta los includes
	( | dup memmap
		( palabra 0? )
		indice> 'locales ! | ignorar locales
		drop 0? ( drop dup 'error> ! ; )
		drop
		0? )  drop
	";" defineesp
	0 ;

|------- imprime pilac (usada para bloques)
::printpilac
	'pilac pilac> =? ( drop ; )
	rojo
	"PILAC:>" print
	( pilac> <? )( @+ "%d " print ) drop
	cr ;

|-------- recorre cada palabra
:cadapal
	over 'indicepal - 'infopal + 4 - @
	1 nand? ( rojo )( violeta 2drop ; ) drop
|	over 'indicepal - 'dirpal + 4 - @ swap
|	"%s %d " print
	"%s " print
	;

:diccionario
	'indicepal ( @+ 1? )(
		cadapal
		lout? 1? ( cr ) drop
		 ) 2drop
	cr ;
|------- busca palabra por direccion
:cadapalb | dir act dirn -- dir act
	over 'dirpal 4+ - 'infopal + @
	1 and? ( 2drop ; ) drop
	pick2 <? ( drop ; )
	drop
	dup 'dirpal 8 + - 'indicepal + @
	rdrop nip
	;

::busqpal | adr --
	'dirpal ( @+ 1? )( | dir act dirn
		cadapalb
		) 2drop
	0 ;

|--------- imprime
::dumptoken
|	diccionario
	verde
	indice> 'indicepal - 2 >> "%d palabras" print cr
|	lastpal 'palabras - "Nombres: %d bytes" print cr
	prog> iprog - "CODE: %d bytes" print cr
	dato> idato - "DATA: %d bytes" print cr
	<<boot iprog - "Boot:%d" print cr
	printpilac
	;

::saveimage
	dato> $3ffff + 'here !	| ultimo dato+256k
	<<boot ,
	dato> idato - ,
	prog> iprog - ,
	here iprog prog> over - dup 'here +! cmove
	here idato dato> over - dup 'here +! cmove
	dato> $3ffff + here over - "test.r4x" save
	;

|------------- guarda codigo comp en test.vm4
:pfin	";" ,print ;
:plit	@+ "lit %h " ,print ;
:padr	@+ "adr %h " ,print ;
:pcall	@+ "call %h " ,print ;
:pjmp	@+ "jmp %h " ,print ;
:pjmpr	c@+ "(%d) " ,print ;
#printin 'pfin 'plit 'padr 'pcall 'pjmp 'pjmpr

::,code | adr nro -- adr
	6 <? ( 2 << 'printin + @ exec ; )
	6 >? ( 19 <? ( 2 << 'indicemac + @ ,print c@+ "(%d) " ,print ; ) )
	ULTIMAP >=? ( ULTIMAP - "%d " ,print ; )
	2 << 'indicemac + @ ,print " " ,print
	;

::savecode
	dato> $3ffff + 'here !	| ultimo dato+256k
	iprog ( prog> <? )( c@+ $ff and
		over iprog - "%d " ,print
		,code
		,cr ) drop
	dato> $3ffff + here over - "test.vm4" save
	;

|------------- guarda codigo comp imprime
:ppfin	";%." print ;
:pplit	@+ "lit %h " print ;
:ppadr	@+ "adr %h " print ;
:ppcall	@+ "call %h " print ;
:ppjmp	@+ "jmp %h " print ;
:ppjmpr	c@+ "(%d) " print ;
#printinp 'ppfin 'pplit 'ppadr 'ppcall 'ppjmp 'ppjmpr

::printcode | adr nro -- adr
	6 <? ( 2 << 'printinp + @ exec ; )
	6 >? ( 19 <? ( 2 << 'indicemac + @ print c@+ "(%d) " print ; ) )
	ULTIMAP >=? ( ULTIMAP - "%d " print ; )
	2 << 'indicemac + @ print " " print
	;

