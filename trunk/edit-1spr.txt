| Editor de nsprite
| PHREDA 2008
|--------------------------------------------------
^libgui.txt
^libsprite.txt
^parse.txt
^trace.txt

^dlgsino.txt
^dlgcolor.txt

#codetxt
#codestart
#codelast
#codefin

#lugar
#nombre )( 64
#dibujo )( $1000 #dibujo>
#indpol )( $100 #indpol>
#cntpol
#trazo )( $1000 #trazo>
#modo 0
#etrazo 1
#policursor -1
#poini
#pofin
#lastnodo 0
#cursor 0
#colora $ff0000
#colorb $ff00
#coltipo 0
#colcen
#colmat
#zoom -0.5
#xd #yd
#xi #yi
#xl #yl
#grillamodo
#egrilla 2

:angulo | p1 p2 -- ang
	over d>y over d>y - >r
	swap d>x swap d>y - r>
	atan2 ;

:cltrazo
	'trazo 0 over ! 'trazo> ! ;
:++trazo | p --
	trazo> 4 - @ =? ( drop ; )
	trazo> 8 - 'trazo >=? (
		@+ pick2 angulo >r
		@ over angulo r> - abs
		$a <? ( drop trazo> 4 - ! ; )
		$7f5 >? ( drop trazo> 4 - ! ; )
		)
	drop
:+trazo | p --
	trazo> !+ 0 over ! 'trazo> ! ;
:trazo!
	trazo> 4 - dup @ $f and rot or swap ! ;

:dibnodos | a--
	( @+ 1? )( >xy 2 box ) 2drop ;

:cldibujo
	'dibujo 0 over ! 'dibujo> !
	'indpol 0 over ! 'indpol> ! ;

:-dibujo | --
	-4 'dibujo> +! ;

:+dibujo | p --
	dibujo> !+ 'dibujo> ! ;
:0dibujo
	0 dibujo> ! ;

:,indpol
	indpol> !+ 'indpol> ! ;

:haceindice
	'indpol 'indpol> !
	'dibujo dup ,indpol
	( @+ 1? )( $f and
		$c >? ( over ,indpol )
		drop ) 2drop
	-4 'indpol> +!
	dibujo> indpol> !
	;

|--------------------------------------------------
#xmax #xmin #ymax #ymin

:setparam
	'trazo
	@+ d>xy
	dup 'ymin ! 'ymax !
	dup 'xmin ! 'xmax !
	( @+ 1? )( d>xy
		ymin <? ( dup 'ymin ! ) ymax >? ( dup 'ymax ! ) drop
		xmin <? ( dup 'xmin ! ) xmax >? ( dup 'xmax ! ) drop
		) 2drop
	xmax dup 2 >> - ymax dup 2 >> - xy>d 'colcen !
    xmin dup 2 >> - ymin dup 2 >> - xy>d 'colmat !
	;

:polsolido
	colcen 7 or +dibujo       | no los usa
	colmat 8 or +dibujo       | cuando genera
	colorb 4 << $c or +dibujo | deberia sacarlos
	colora 4 << $d or +dibujo
	;
:polldeg
	colcen 7 or +dibujo
	colmat 8 or +dibujo
	colorb 4 << $c or +dibujo
	colora 4 << $e or +dibujo
	;
:polrdeg
	colcen 7 or +dibujo
	colmat 8 or +dibujo
	colorb 4 << $c or +dibujo
	colora 4 << $f or +dibujo
	;
#tiposcol polsolido polldeg polrdeg

:cierropoligono
	setparam
	'trazo @ $fffffff0 and $a or +dibujo | agrego linea fantasma
	coltipo 2 << 'tiposcol + @ exec
	0dibujo ;

:cierrocurva
	setparam -dibujo
	'trazo @ $fffffff0 and $9 or +dibujo | agrego linea fantasma
	coltipo 2 << 'tiposcol + @ exec
	0dibujo ;

:cpdibujo
	1 'etrazo !
	0 'lastnodo !
	setparam
	trazo> 'trazo - 2 >> 3 <? ( drop cltrazo ; ) drop
	dibujo> indpol> !+ 0 over ! 'indpol> !
	'trazo ( @+ 1? )(
		dup $f and 5 =? ( 3 nip ) swap $fffffff0 and or
		+dibujo ) drop
	8 - @ $f and 4 =? ( cierrocurva )( cierropoligono ) drop
	dibujo> indpol> !
	cltrazo
	;

|--------------------------------------------------
#xcycwh 0 0 0 0

:savebox
	xc yc w h 'xcycwh !+ !+ !+ ! ;

:loadbox
	'xcycwh @+ 'h ! @+ 'w ! @+ 'yc ! @ 'xc ! ;

:drawdibujo
	loadbox
|	grillamodo 0? ( blanco gc.fbox ) drop
	'dibujo nsprite
	egrilla gris 2* rgrilla
	lastnodo 0? ( drop ; )
	blink 1? ( negro )( blanco ) drop
	@ >xy 4 box
	;

|--------------------------------------------------
:indot | x y x y --
	rot - dup * swap rot - dup * + | dx2+dy2
	64 <=? ( 1 )( 0 ) nip ; |

:tocanodopoli | x y -- x y nro/ 0
	poini ( pofin <? )( dup @
		dup $f and 8 >? ( 2drop )(
			drop swap >r
			>xy 2over indot 1? ( drop r> ; )
			drop r> )
		4+ )
	drop 0 ;


|--------------------------------------------------
#oxy

:nodomove
	drop dup
	d>xy yd + swap xd + swap xy>d swap $f and or over ! ;

:polimove | x y
	xy> oxy over 'oxy !
	dxy 'yd ! 'xd !
	poini ( pofin <? )(
		dup @ dup $f and
		$a >? ( 2drop )( nodomove )
		4+ ) drop
	;

:muevenodo
	>r xy> r @ $f and
	1 =? ( | si es op busco linea fantasma
		r ( @+ $f and $9 <? )( drop ) drop
		4 - pick2 over @ $f and or swap !
		)
	or r> ! ;


|-------- dibujo de cada nodo segun tipo
#ycen #xcen

:dd1 >xy 2 box ;
:dd2 >xy 3 cruz ;
:dd3 >xy 2 fbox ;
:dd4 >xy 3 cruz ;
:dd5 >xy 2 fbox ;
:dd6 >xy 3 cruz ;
:dd7 >xy 2dup 'ycen !+ ! 2 box ; | centro
:dd8 >xy 2dup 2 cruz op xcen ycen line ; | relativo

#acdd 0 dd1 dd2 dd3 dd4 dd5 dd6 dd7 dd8

:drawnodos
	poini ( pofin <? )( @+
		dup $f and 8 >? ( 2drop )( 2 << 'acdd + @ exec )
		) drop ;


|--------------------------------------------------
:medionodos | adr -- adr nv
	dup @ over 4 - @ d>xy rot
	d>xy rot + 2/ >r + 2/ r> xy>d ;

:+nodo | adr --
	dup 4+ swap dibujo> pick2 - 2 >> 1+ move>
	4 dup 'dibujo> +! 'pofin +! 0 dibujo> !
	;

:insprimero | adr --
	dup +nodo
	8 + medionodos 3 or swap 4 - ! ;

:inscurva | adr --
	dup +nodo
	dup 8 + medionodos 4 or swap 4 - !
	dup +nodo
	8 + medionodos 2 or swap 4 - !
	;

#accinsnodo 0 insprimero inscurva insprimero 0 0 0 0
|	7 =? ( 2drop inspoli ; )

:ins-nodo
	lastnodo 0? ( drop ; )
	dup @ $7 and
	2 << 'accinsnodo + @ 0? ( 2drop )( exec )
	haceindice
	;

|-------------------------
:-nodo | adr --
	dup 4+ dibujo> pick2 - 2 >> move
	-4 dup 'dibujo> +! 'pofin +! 0 dibujo> !
	;

:quitapoli | adr --
	drop
:del-poli
	poini pofin 4+ dibujo> over - 2 >> move
	pofin poini - 4+ neg 'dibujo> +! 0 dibujo> !
	0 dup dup 'poini ! 'pofin ! 'lastnodo !
	haceindice
	;

:quitaylinea
	dup -nodo dup @ $fffffff0 and 3 or swap !
	;

:delnodo2 | adr --
	4+ dup @ $f and
	4 =? ( drop 4 - quitaylinea ; ) | curva real
	drop 4 - dup -nodo
	dup @ $fffffff0 and $a or swap ! | ultima
	;

:delnodo1 | adr --
	dup -nodo
	dup @ $f and
	2 =? ( over 4+ dup @ $fffffff0 and 3 or swap ! )
	8 >? ( drop quitapoli ; )
	drop
	dup @ $fffffff0 and dup 1 or pick2 ! | adr v
	swap ( @+ $f and $9 <? )( drop ) drop | v adr'
	4 - dup @ $f and rot or swap !
	;

:delnodo4
	4 - quitaylinea ;

#accdelnodo 0 delnodo1 delnodo2 -nodo delnodo4 0 0 0

:del-nodo
	lastnodo 0? ( drop ; )
	dup @ $7 and
	2 << 'accdelnodo + @ 0? ( 2drop )( exec )
	haceindice
	;

:deltrazo
	lastnodo 0? ( drop ; )
	0 over ! dup 'trazo> ! 4 -
	'trazo <? ( 0 nip 1 'etrazo ! )
	'lastnodo ! ;

|-------------------------
:acurva1 | adr --
	4+ dup @ $f and | el siguiente es
	2 =? ( drop quitaylinea ; ) | curva
	$a =? ( drop dup +nodo
			medionodos 2 or swap !+
			dup @ $fffffff0 and 9 or swap ! ; )
	drop dup +nodo
	medionodos 2 or swap !+
	dup @ $fffffff0 and 4 or swap !
	;

#acccurvn 0 'acurva1 'delnodo2 'acurva1 'acurva1 0 0 0

:curv-nodo | --
	lastnodo 0? ( drop ; )
	dup @ $7 and
	2 << 'acccurvn + @ 0? ( 2drop )( exec )
	haceindice
	;

|--- auxpolis
:tocopy | adr --
	'dibujo
:tocopyto | hast des --
	( over <? )( @+ , ) 2drop ;
:copyto | adr --
	( @+ 1? )( , ) , drop ;

:prevpoli | ad -- ad'
	( 'dibujo >? )( dup @ $f and
		$c >? ( drop 4+ ; )
		drop 4 - )  ;

:nextpoli | ad -- 'ad
	( dibujo> <? )( dup @ $f and $c >? ( drop ; ) drop 4+ ) ;

:abapoli
	poini 0? ( drop ; )
	'dibujo =? ( drop ; )
	dup 8 - prevpoli over =? ( 2drop ; ) | no hay otro atras
	clear
	dup tocopy	| poini pnex
	pofin 4+ pick2 tocopyto | poini pnex
	tocopyto
	pofin 4+ copyto
	0 ,
:recopy
	'dibujo mem ( @+ 1? )( rot !+ swap ) rot !+
	4 - 'dibujo> ! drop
	haceindice
	0 dup dup 'poini ! 'pofin ! 'lastnodo !
	;

|---------
:del-poli
	poini 0? ( drop ; )
	pofin 4+
	dibujo> >=? ( drop 0 over ! 4 - 'dibujo> ! haceindice ; )
	zcopy 4 - 'dibujo> !
	haceindice
	;
|-----------------------------------------------
#curcola
#curcolb

:colordepoli
	0 dup 'curcola !+ !
	poini 0? ( drop ; )
	( pofin <=? )( dup @ $f and
			$c =? ( over dup @ 4 >> 'colorb ! 'curcolb ! )
			$d =? ( over dup @ 4 >> 'colora ! 'curcola ! 0 'coltipo ! )
			$e =? ( over dup @ 4 >> 'colora ! 'curcola ! 1 'coltipo ! )
			$f =? ( over dup @ 4 >> 'colora ! 'curcola ! 2 'coltipo ! )
			drop 4+ ) drop ;

:elijecolor
	coltipo colora colorb
	dlgcolor
	'coltipo ! 'colora ! 'colorb !
	colora 4 << coltipo $d + or curcola 0? ( 2drop )( ! )
	colorb 4 << $c or curcolb 0? ( 2drop )( ! )
	;

:btncolor
	colorb colora vbtn
	'elijecolor onUp
	;

|--------------------------------------------------
:resetspr
	cldibujo
	cltrazo
	0 dup 'poini ! 'pofin !
	-1 'policursor !
	0 'colora !
	$ffffff 'colorb !
	1 'coltipo !
	1 'etrazo !
	0 'lastnodo !
	haceindice
	;

|--cursor ab
#xa #ya #xb #yb

:cur.clr	0 0
:cur.set	dup 'ya ! 'yb ! dup 'xa ! 'xb ! ;

|-- caja
:caja.ins
	xa xb =? ( drop ; ) ya yb =? ( 2drop ; )
	xy> 1 or +trazo xa yb xy> 3 or +trazo
	xb yb xy> 3 or +trazo xb ya xy> 3 or +trazo
|	4 0? ( xa ya xy> 2 or +trazo ) drop
	;

|-- elip
:elip.ins
	xa xb =? ( drop ; ) ya yb =? ( 2drop ; )
	yb ya - abs xb xa - abs
	>r >r r - 2dup 2dup xy> 1 or +trazo |op
    swap r> r> dup >r swap >r  - swap 2dup xy> 2 or +trazo	|cp
	r + 2dup xy> 4 or +trazo |curve
	r + 2dup xy> 2 or +trazo |cp
	swap r> r> dup >r swap >r + swap 2dup xy> 4 or +trazo |curve
	swap r> r> dup >r swap >r + swap 2dup xy> 2 or +trazo |cp
	r - 2dup xy> 4 or +trazo |curve
	r> - xy> 2 or +trazo |cp
	xy> 4 or +trazo |curve
	rdrop
	;

|------------------------------------------------
:circlemode
	drawdibujo
	[ elip.ins cpdibujo cur.clr ; ] onUp
	[ xymouse 'yb ! 'xb ! ; ] onMove
	[ xymouse cur.set ; ] onDn
	blink 1? ( colora )( colorb ) ink drop
	xa xb =? ( drop ; ) ya yb =? ( 2drop ; )
	yb ya - abs xb xa - abs ellipse ;


|------------------------------------------------
:cajamode
	drawdibujo
	[ caja.ins cpdibujo cur.clr ; ] onUp
	[ xymouse 'yb ! 'xb ! ; ] onMove
	[ xymouse cur.set ; ] onDn
	blink 1? ( colora )( colorb ) ink drop
	xa xb =? ( drop ; ) ya yb =? ( 2drop ; )
	2dup 2dup op drop yb 2dup line nip xb swap 2dup line drop ya line line
	;

|------------------------------------------------
:trazomode
	drawdibujo
	[ cltrazo xymouse xy> 1 or +trazo ; ] onDn
	[ xymouse xy> 5 or +trazo ; ] onMove
	[ cpdibujo ; ] onUp
	blink 1? ( colora )( colorb ) ink drop
	'trazo nsprite
	;

|--------------------------------------------------
:nodomode
	drawdibujo
	[ trazo> 4 - 'lastnodo ! ; ] onUp
	[ xymouse xy> etrazo or +trazo
		etrazo 1 =? ( 5 nip ) 'etrazo !
		; ] onDn
	[ xymouse xy> trazo! ; ] onMove
	blink 1? ( colora )( colorb ) ink drop
	'trazo dup nsprite dibnodos
	;

|--------------------------------------------------
:editmode
	loadbox
	[ 0 'cursor ! ; ] onUp
	[ xymouse tocanodopoli 1? ( dup 'lastnodo ! ) 'cursor ! xy> 'oxy ! ; ] onDn
	[ xymouse cursor 1? ( muevenodo ; ) drop polimove ; ] onMove
	drawdibujo
	blink 1? ( negro )( blanco ) drop
    drawnodos
	;

|--------------------------------------------------
:vistamode
	[ xymouse 'yd ! 'xd ! ; ] onDn
	[ xymouse loadbox dup yd - 'yc +! 'yd ! dup xd - 'xc +! 'xd ! savebox ; ] onMove
	loadbox
	zoom 1.3 + sh 16 *>> dup 'w ! 'h !
	savebox
	drawdibujo
	;

|--------------------------------------------------
#tocado
#maxpoli

:policlick | n --
	dup @+ 'poini ! @ 4 - 'pofin !
	over 'policursor !
	0 'lastnodo !
	1 'modo !
	colordepoli ;

:polinuevo
	cpdibujo 1 'etrazo !
	-1 'policursor !
	0 'modo !
	haceindice ;

:nuevopoli
	'polinuevo onUp
	policursor  -1 <>? ( 0.8 blanco )( colorb colora vbtn
    	blink 1? ( verde )( amarillo ) drop
		1.0 ) fzoom drop
	2 font cr2  "*" printc ;

:cadapoli | n -- n
	maxpoli >? ( ; )
	maxpoli =? ( nuevopoli ; )
	policursor =? ( 1.0 )( 0.8 ) fzoom
	dup 2 << 'indpol +
    'policlick  onUp
	4+ @ dup 8 - @ 4 >> swap 4 - @ 4 >> vbtn | col1 col2 --
	policursor <>? ( ; )
	2 sfont cr2
	blink 0? ( negro )( blanco ) drop
	dup "%d" printc ;

:viewpolis
	| poner cantidad de poligonos
	modo 5 =? ( drop 'zoom .vslide ; ) drop
	indpol> 'indpol - 2 >> dup 'maxpoli ! 1+
	5 max
	'cadapoli .vlist ;

:eslinea	0 'modo ! ;
:escaja     2 'modo ! ;
:eselipse   3 'modo ! ;
:opczoom    5 'modo ! ;

|--------------------------------------------------
#btnnuevo 6
$ff0000 'ifin 'exit
$ffff00 'ilupa 'opczoom
$ffff00 'idibuja 'eslinea
$ffff00 'istop 'escaja
$ffff00 'irec 'eselipse
$ff0000 'imenos 'deltrazo

#btnnodos 6
$ff0000 'ifin 'exit
$ff00 'imenos 'del-nodo
$ff00 'imas 'ins-nodo
$ff00 'iarr 'abapoli
$ff00 'icurva 'curv-nodo
$ff0000 'imenos 'del-poli

#btntrazo 6
$ff0000 'ifin 'exit
$ff00 'iborrar 'deltrazo
0 0 0
0 0 0
0 0 0
0 0 0

:modo0 	0 'modo ! ;
:zoom1 	-0.5 'zoom ! ;
:zoom2 	-0.2 'zoom ! ;
:zoom3 	0.0 'zoom ! ;
:zoom4 	0.2 'zoom ! ;
:zoom5	2.0 'zoom !	;

#btnvista 6
$ff0000 'ifin 'modo0
$ffff00 'imenos 'zoom1
$ffff00 'imenos 'zoom2
$ffff00 'istop 'zoom3
$ffff00 'imas 'zoom4
$ffff00 'imas 'zoom5

#btns 'btnnuevo 'btnnodos 'btnnuevo 'btnnuevo 'btntrazo 'btnvista

:botonherra
	modo 2 << 'btns + @
	escf1.. ;

:execescf1 | nro
	dup dup + + 2 <<
	12 +
	modo 2 << 'btns + @
	+
	@ exec ;

#modogui 4   'itrazo 'irec 'idibuja 'ilupa
:viewestado
	'modo 'modogui .vradio drop ;

#accmodos 'nodomode 'editmode 'cajamode 'circlemode 'trazomode 'vistamode

:viewdibujo
	modo 2 << 'accmodos + @ >r ;

:dumpdibujo
	0.8 0.9 fdim fonti
	verde
|	codetxt "%d " print
|	codelast "%d " print
|	azul pofin poini "%d %d" print cr
	0 'dibujo ( dibujo> <? )(
		poini =? ( rojo )
		pofin =? ( verde )
		@+ "%h " print
		swap 1+ $7 nand? ( cr ) swap
		) 2drop
	;
:aa
	cyan cr
|	azul pofin poini "%d %d" print cr
	policursor "policursor:%d " print
	pofin poini "ini:%d fin%d " print cr
	coltipo colorb colora "colA:%h colB:%h tipo:%h " print cr
	modo "modo:%d" print cr
	etrazo "etrazo:%d" print cr
	lastnodo "lastnodo:%d" print cr
	indpol> 'indpol - "indpol:%d" print cr
	maxpoli "%d" print cr
	'nombre lugar "%d %s" print
 	;

:borrodib
	codefin 'here ! 	| dlgsino utiliza here
	"Borro Dibujo ?" dlgsino
	1? ( resetspr ) drop
	;


|------------------------------------------------
#editbotgui 5
$ff00ff 'iborrar 'borrodib
0 0 0
0 0 0
0 0 0
0 0 0

:btnsis
	'editbotgui .hbtns ;

|-----------------------------------
#editgui | $gui
0.5 0.1 -0.25 -0.45 'btnsis
0.2 0.1 0.3 0.45 'btncolor
0.8 0.8 0 0 'viewdibujo
0.6 0.1 -0.2 0.45 'botonherra
|0.1 0.5 -0.45 0 'viewestado
0.1 1.0 0.45 0 'viewpolis
0

:editando
	inikey
	[ 0 execescf1 ; ] >esc<
	[ 1 execescf1 ; ] <f1>
	[ 2 execescf1 ; ] <f2>
	[ 3 execescf1 ; ] <f3>
	[ 4 execescf1 ; ] <f4>
	[ 5 execescf1 ; ] <f5>
	0 0 fpos
	zoom 1.3 + sh 16 *>> dup 'w ! 'h !
	savebox
	0 'modo !
	show cls
		scr dumpdibujo
		scr 'editgui gui
|		scr 16 sfont azul 'nombre  printc
		cflecha
		;

| code a dibujo
|--------------------------------------------------
|::?numero | str -- 0 / str' nro 1

:getnro | txt -- txt' 0 / nro
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ ) drop
	dup ?numero 0? ( ; )
	drop rot drop ;

:load-code
	'dibujo >r
	codestart
	( c@+ 13 >? )( drop ) drop
	( getnro 1? )( r!+ ) r !
	r> 'dibujo> !
	( c@+ 33 <? )( drop ) drop 1-
	'codelast !
    haceindice
	;

:loadbin
	'dibujo "./nom/1spr.mem" load
	'dibujo =? ( resetspr ) drop
	haceindice
	;

| savecode
|--------------------------------------------------
:newline 13 ,c 10 ,c ; | m#@$#!%@$#

#compnombre )( 64

:compone | ".ext" "n" -- "n.ext"
	 'compnombre swap
	( c@+ 1? )( rot c!+ swap )  2drop
	swap
	( c@+ 1? )( rot c!+ swap ) rot c!
	drop 'compnombre ;

|--- quita los tokens innecesarios ( los degrade y la matriz )
#buffopt )( $4000
#buffopt> 'buffopt

:codedibu
	0 'buffopt
	buffopt> >=? ( 2drop ; )
	codestart "%w |spr" ,print newline
	( buffopt> <? )(
		@+ 0? ( " %d" )( " $%h" ) ,print
		swap 1+ 8 >? ( drop 0 newline )
		swap ) 2drop
	newline
	;

:procbuff | adr --
	'buffopt swap
	( @+ 1? )(
		dup $f and
		$d =? ( drop rot 12 - rot rot dup )
		drop
		rot !+ swap
		)
	rot !+ 'buffopt> !
	drop
	;

:save-code
	codefin 'here !
	'dibujo procbuff
	here codetxt codestart over - dup 'here +!
	cmove
	codedibu newline
	here codelast codefin over - dup 'here +!
	cmove
	codefin here over -
	'nombre
	save
	;

|--------------------------------------------------
:	33
	resetspr
	'lugar "./nom/1spr.nom" load
	'lugar =? ( resetspr ) drop

	clear
	here $ffff + dup 'codetxt !
	'nombre load 'codefin !
	codetxt
	lugar ( 1? )( 1- swap c@+ 13 =? ( drop 1+ dup ) drop  swap ) drop
	'codestart !

	load-code | loadbin
	editando
	save-code

|	'dibujo $1000 "./nom/1spr.mem" save

	"edit-code.txt" run ;

