El mejor manual es el que no es necesario leer...

Manual de Usuario :r4
Otro lenguaje mas...para aumentar la confusion general.

Caracteristicas
	Lenguaje Breve
	Sin reglas sintacticas
	Desarrollo rapido
	Multiplataforma

Cambia Reglas de Codificacion
	No hay variables locales
	No hay parametros explicitos
	No hay llamadas ni saltos
	Conviene rehacer antes que emparchar
	Definiciones Cortas

Cambia Reglas de Analisis del problema
	Se buscan componentes.
	Se construye volabulario.
	Se expresa la solucion al problema.

Descripcion
	Posfijo ( 2 3 +  en vez de 2 + 3 )
	Pila de Datos Enteros
	El codigo es un Diccionario
	Palabras separadas por espacio

El codigo se encuentra en los archivos .TXT en la distribucion.
La secuencia de palabras contenidas en estos archivos se llaman
CODIGO

El codigo se divide secuencia de caracteres separados por espacios llamados
PALABRAS

* Cuando la palabra es un numero lo apila en una pila llamada PILA DE DATOS

ademas de numeros :r4 define prefijos para indicar la funcion de cada palabra, esto son:

	^ incluye
	| comentario
	" cadena
	: accion
	# dato
	' direccion
	$ numero hexa
	% numero bin

asi :r4 puede encontrar numeros decimales, hexagesimales y  binarios

455 $ffff %10101011   | <-- numeros validos que son apilados

los prefijos se utilizan para

* ^elarchivojuancarlos.txt | <-- incluye estas definiciones en el diccionarios

* | comentario hasta el fin de lines...

* :accion ... ;	| <-- define la palabra ACCION como una secuencia de palabras hasta ;

Definicion de accion
con PREFIJO :

:amelonarse | <-- defino la palabra amelonarse
		hago algo para convertirme en melon ;  | definicion valida :r4

::toupp | c -- C
	$60 >? ( $7b <? ( $20 - ) ) ;

#dato 4	| <-- define la variable DATO como una numero de 32 bits con el valor 4

Definicion de datos
con PREFIJO #

#latasdetomate 5 | <-- defino latasdetomate con valor 5
#puntos 0
#dibujos 'dibu1 'dibu2 'dibu3 'dibu4
#buffer )( 1024

* 'dato		| <-- obtiene la direccion de dato, no su valor, y lo apila
* "hola "	| <-- guarda el cadena de caracteres y apila su direccion

si tampoco tiene prefijo se busca en el

* DICCIONARIO

Si no existe en el diccionario entonces el codigo tiene uno error.. NO EXISTE ESA PALABRA
Por lo tanto toda palabra que usemos debemos definirla antes.

Si la palabra existe se realiza su ejecucion y cuando termina sigue con la siguiente palabra

El programa en :r4 se ejecuta de abajo para arriba, arriba estan las definiciones basicas y
al fin del codigo, el lugar donde comienza el programa.

: (dos puntos solo)

la palabra : indica el comienzo del programa, tambien puede ser llamado lugar de boot.
Si un archivo no contiene la palabra : puede ser una libreria

Se puede buscar en los codigos de la distribucion, la ultima lines es el comienzo del programa,
indicado con los :

Usamos palabra para indicar un conjunto de signos, sin espacio entre ellos.
<**>				es una palabra valida pero
>:< =ouuch=		son 2 palabras validas

para guardar nombres con espacios entre medio se puede usar las comillas dobles
"funciona como almacen de palabras"		| apila la direccion de esta cadena de caracteres
" con espacio al inicio y al final    "			| apila otra direccion

Este diccionario comienza con un grupo de palabras llamadas

DICCIONARIO BASE

la primer palabra es ; (punto y coma), significa fin

; <- cuando :r4 lee ; en el codigo termina en
	tiempo de ejecucion siempre y en
	tiempo de compilacion solo cuando no esta anidado con ( ) y )(

ejemplo:
:definirpalabra
	"hola " print
	; | <-- fin de definicion

), ( y )( son tres palabras que construyen grupos de palabras

ejemplo:
	0? ( hola )( adios )
	dup ( drop produce 1? )

Estos grupos se utilizan con los condicionales

Sobre el tope de la pila, No producen ni consumen la pila.
0? 1? +? -?	| --

entre el segundo y el tope de la pila que es consumido.
=? <>? >? <? >=? <=? | a --

se utilizan para armar los condicionales y bucles, o sea las estructuras de control:

condicional IF: ?? ( verdad )( falso ) o ?? ( verdad )

0? ( "es cero el tope de la pila" )( "no es cero el tope de la pila" ) print
4 5 <? ( "cuatro es menor que cinco" print )

Bucle Mientras o WHILE:  (   test x? )( bucle )

	0 ( 100 <? )( 1+	| mientras el tope sea menor a 100..sumar 1
		) drop		| limpiar la pila despues de usarla

Buque Hasta o UNTIL: ( bucle x? )

	0 ( "." print 1+ 4 >? ) drop

Repeticion: ( bucle )

	prender ( girar descansar ) apagar  	| girar y descansar se repiten siempre


[ y ] agrupan las palabras pero guardando su ejecucion como una definicion anonima

[ "aqui no pasa" print ; ]

apila la direccion donde se ejecuta esto, el ; es obligatorio al final !!!

Manejo de Memoria
Acceso directo a la memoria

@ fetch (peek)
	'puntos @
	'punto 10 + @

! store (poke)
	10 'puntos !
	puntos 1 + 'puntos !


Como Funciona

Para cada palabra

  Diccionario Basico ? -> hace
                 +-> (:)accion -> hace
  Diccionario ?  +-> (#)dato -> apila valor
                 +-> 'direccion -> apila direccion
  Es numero ?  -> apila valor
  Es error !!!

