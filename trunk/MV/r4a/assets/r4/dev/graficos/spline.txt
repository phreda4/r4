XDec0Const = (Ai<<5) + (Ai<<4); /* Used to init diffc constant */
XDec2Const = XDec0Const>>1; /* Used to init 2nd order diffc function */
XDec1Const = XDec2Const + (Bi<<4); /* Used to init 1st order diffc function */
YDecConst = Di<<3; /* Difference constant for a Y step */
XDecConst = Ci<<3; /* Used to init 1st/2nd order diffc fcts */
Temp1 = (Ai<<3)*X; /* Used several times to save multiplies */
if (X < XEnd) { /* If plotting in positive X direction */
XStep = 1; /* Set X increment */
XDec0 = XDec0Const; /* Difference constant for an X step */
XDec1 = (Temp1<<2) + (Temp1<<1) /* Init 1st order diffc function */
+ XDec0Const + XDec1Const;
XDec2 = ((Temp1<<1) + Temp1 /* Init 2nd order diffc function */
+ XDec1Const + XDec2Const)*X
+ XDec1Const + (Ai<<1) + XDecConst;
Dec = ((Temp1 + (XDec1Const>>1))*X /* Init decision variable */
+ (XDec1Const>>1) - (XDec2Const>>2)
+ XDecConst)*X + Ai + (Bi<<1)
+ (Ci<<2);
} else { /* If plotting in negative X direction */
XStep = -1; /* Set X increment */
XDec0 = -XDec0Const; /* Diffc constant for an X step */
XDec1 = (Temp1<<2) + (Temp1<<1) /* Init 1st order diffc function */
- (XDec0Const<<1) + XDec1Const;
XDec2 = (-(Temp1<<1) - Temp1 /* Init 2nd order diffc function */
+ XDec0Const + XDec2Const
- XDec1Const)*X + XDec1Const
- XDec0Const - (Ai<<1) - XDecConst;
Dec = ((Temp1 + (XDec1Const>>1) /* Init decision variable */
- XDec2Const)*X - (XDec1Const>>1)
+ XDec2Const - (XDec2Const>>2)
+ XDecConst)*X - (Ci<<2) + (Bi<<1)
- XDecConst;
} /* end if */
if (Y < YEnd) { /* If plotting in positive Y direction */
YStep = 1; /* Set Y increment */
Dec = Dec - YDecConst*Y - YDecConst; /* Final decision variable init'zation */
} else { /* If plotting in negative Y direction */
YStep = -1; /* Set Y increment */
XDec0 = -XDec0; /* Negate X differences */
XDec1 = -XDec1;
XDec2 = -XDec2;
Dec = -Dec + YDecConst*Y - YDecConst; /* Final decision varaible init'zation */
} /* end if */


if (Y < YEnd) /* If plotting toward positive Y */
SkipSize = 1; /* Positive skip size */
else SkipSize = -1; /* Otherwise negative skip size */
YLastXStep = Y; /* Where last X step was made */
YDecSkipConst = YDecConst; /* Used when updating decision vari
CheckShift = 1; /* Range w/i which skipping begins 
NextPlot = PtPlot; /* Set first plot type */
while (X != XEnd) { /* While we haven't reached the las
(*NextPlot)(X,Y,X,YLastXStep); /* Peform a line or point plot */
if (Dec >= 0) { /* no X step */ /* If not making an X step, don't s
Y += YStep; /* Increment Y */
Dec -= YDecConst; /* Update decison variable */
NextPlot = PtPlot; /* Indicate next plot type */
} else { /* adjust skip size, plot */ /* If making an X step */
RunHighBits = abs(Y-YLastXStep)>>CheckShift; /* Find most sig bits in len last r
if (RunHighBits != 0) { /* If > 2*skip size, adjust size */
NumHighBits = 1; /* How many times to double skip si
while (RunHighBits != 1) { /* While more doubling required */
NumHighBits++; /* Record one more doubling */
RunHighBits >>= 1; /* Elim one doubling from RunHighBi
} /* end while */
SkipSize <<= NumHighBits; /* Double skip size needed num time
YDecSkipConst <<= NumHighBits; /* Dble decvar diffc const to match
CheckShift += NumHighBits; /* Change most sig bit rng for last
} /* end if */
YLastXStep = Y+YStep; /* Record location new X step */
Y += SkipSize; /* Increment Y by skip size */
X += XStep; /* Increment X to perform X step */
Dec += XDec2 - YDecSkipConst; /* Update decision variable */
XDec2 += XDec1; /* Update 2nd order diffc function 
XDec1 += XDec0; /* Update 1st order diffc function 
NextPlot = LinPlot; /* Indicate next plot type */
} /* end if */
} /* end while */
(*LinPlot)(XEnd,YEnd,X,YLastXStep); /* Indicate next plot type */