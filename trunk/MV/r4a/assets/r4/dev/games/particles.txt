| particles.txt
| PHREDA 2011
|----------------

^r4/lib/btn.txt

|color advection airdrag airloss loss collision gravity diffusion hotair falldown flammable explosive meltable
#info.part
$000000 0.0 0.00 1.00 0.00  0.0  0.0  0.00  0.000   0 0    0 0
$FFE0A0 0.7 0.02 0.96 0.80  0.0  0.1  0.00  0.000   1 10   0 0
$2030D0 0.6 0.01 0.98 0.95  0.0  0.1  0.00  0.000   2 0    0 0
$404010 0.6 0.01 0.98 0.95  0.0  0.1  0.00  0.000   2 20   0 0
$FF1000 0.9 0.04 0.97 0.20  0.0 -0.1  0.00  0.001   1 0    0 0
$A0A0A0 0.4 0.04 0.94 0.95 -0.1  0.3  0.00  0.000   1 1    0 5
$E05010 0.3 0.02 0.95 0.80  0.0  0.15 0.00  0.0003  2 0    0 0
$C0C0D0 0.7 0.02 0.94 0.80 -0.1  0.1  0.00  0.000   1 600  1 0
$20E010 0.5 0.02 0.92 0.97  0.0  0.2  0.00  0.000   2 1000 2 0
$FFD010 0.0 0.00 0.90 0.00  0.0  0.0  0.00  0.000   0 0    0 0
$E0FF20 1.0 0.01 0.99 0.30 -0.1  0.0  0.75  0.001   0 600  0 0
$D080E0 0.0 0.00 0.90 0.00  0.0  0.0  0.00  0.000   0 1000 2 50
$804000 0.1 0.00 0.97 0.50  0.0  0.0  0.00  0.000   0 0    0 0
$A0C0FF 0.0 0.00 0.90 0.00  0.0  0.0  0.00 -0.0003  0 0    0 0
$404060 0.0 0.00 0.90 0.00  0.0  0.0  0.00  0.000   0 0    0 1
$FFFF80 0.0 0.00 0.90 0.00  0.0  0.0  0.00  0.001   0 0    0 0
$C0E0FF 0.7 0.01 0.96 0.90 -0.1  0.05 0.01 -0.00005 1 0    0 0
$C0A040 0.0 0.00 0.90 0.00  0.0  0.0  0.00  0.000   0 0    0 0
$20E0FF 0.0 0.00 1.00 1.00 -0.99 0.0  0.01  0.002   0 20   0 0
$407020 0.4 0.01 0.99 0.95  0.0  0.4  0.00  0.000   1 0    0 0

|char *names[] = {
|char *descs[] = {
#name.part
   "    "     "Erases particles."
   "DUST"    "Very light dust. Flammable."
   "WATR"    "Liquid. Conducts electricity. Freezes. Extinguishes fires."
   "OIL "    "Liquid. Flammable."
    "FIRE"    "Ignites flammable materials. Heats air."
    "STNE"    "Heavy particles. Meltable."
    "LAVA"    "Heavy liquid. Ignites flammable materials. Solidifies when cold."
    "GUN "    "Light dust. Explosive."
    "NITR"    "Liquid. Pressure sensitive explosive."
    "CLNE"    "Solid. Duplicates any particles it touches."
    "GAS "    "Gas. Diffuses. Flammable. Liquifies under pressure."
    "C-4 "    "Solid. Pressure sensitive explosive."
    "GOO "    "Solid. Deforms and disappears under pressure."
    "ICE "    "Solid. Freezes water. Crushes under pressure. Cools down air."
    "METL"    "Solid. Conducts electricity. Meltable."
    "SPRK"    "Electricity. Conducted by metal and water."
    "SNOW"    "Light particles."
    "WOOD"    "Solid. Flammable."
    "NEUT"    "Neutrons. Interact with matter in odd ways."
    "PLUT"    "Heavy particles. Fissile. Generates neutrons under pressure."

|  AIR FLOW SIMULATOR

#TSTEPP 0.3
#TSTEPV 0.4
#VADV 0.3
#VLOSS 0.999
#PLOSS 0.9999

|float vx[YRES/CELL][XRES/CELL], ovx[YRES/CELL][XRES/CELL];
|float vy[YRES/CELL][XRES/CELL], ovy[YRES/CELL][XRES/CELL];
|float pv[YRES/CELL][XRES/CELL], opv[YRES/CELL][XRES/CELL];
|float fvx[YRES/CELL][XRES/CELL], fvy[YRES/CELL][XRES/CELL];

#airflow 0 | vx vy pv ovx ovy opv fvx fvy | 8*yres*xres*4

:vx[] 	@ ; | air -- vx
:vy[] 	4+ @ ; | air -- vy
:pv[] 	8 + @ ; | air -- pv

:ovx[]	12 + @ ; | air -- ovx
:ovy[]	16 + @ ; | air -- ovy
:opv[]	20 + @ ; | air -- opv

:fvx[]	24 + @ ; | air -- fvx
:fvy[]	28 + @ ; | air -- fvy

:[x-1] 32 - ;
:[y-1] 400 - ;
:[x+1] 32 + ;
:[y+1] 400 + ;

:vx! ! ;
:vy! 4+ ! ;
:pv	8 + ;

|unsigned char bmap[YRES/CELL][XRES/CELL];
|unsigned char emap[YRES/CELL][XRES/CELL];
|unsigned cmode = 3;

#map 0 | bmap emap | 4*tres*xres

#kernel
0.011344 0.083819 0.011344
0.083819 0.619347 0.083819
0.011344 0.083819 0.011344
#kernel>

:update_air
	airflow 32 400 *
	1 ( 400 <? )( 32 +
		1 ( 400 <? )(
			rot
			dup [x-1] vx[] over vx[] -
			over [y-1] vy[] pick2 vy[] - +
			TSTEPP *.
			over pv[] PLOSS *.
			+ over pv !
			32 + rot rot
			1+ ) drop
		1+ ) 2drop

	airflow
	0 ( 399 <? )(
		0 ( 399 <? )(
			rot
			dup pv[] over [x+1] pv[] - TSTEPV *.
			over vx[] VLOSS *. +
			over vx!
			dup pv[] over [y+1] pv[] - TSTEPV *.
			over vy[] VLOSS *. +
			over vy!

| falta
|	    if(bmap[y][x]==1 || bmap[y][x+1]==1 ||
|	       bmap[y][x]==8 || bmap[y][x+1]==8 ||
|	       (bmap[y][x]==7 && !emap[y][x]) ||
|	       (bmap[y][x+1]==7 && !emap[y][x+1]))
|		vx[y][x] = 0;
|	    if(bmap[y][x]==1 || bmap[y+1][x]==1 ||
|	       bmap[y][x]==8 || bmap[y+1][x]==8 ||
|	       (bmap[y][x]==7 && !emap[y][x]) ||
|	       (bmap[y+1][x]==7 && !emap[y+1][x]))
|		vy[y][x] = 0;

			32 + rot rot
			1+ ) drop
		swap 32 + swap
		1+ ) 2drop

	airflow
	0 ( 400 <? )(
		0 ( 400 <? )(
			rot
			'kernel ( kernel> <? )(
				@+
				) drop
			32 + rot rot
			1+ ) drop
		1+ ) 2drop

    for(y=0; y<YRES/CELL; y++)
	for(x=0; x<XRES/CELL; x++) {
	    dx = 0.0f;
	    dy = 0.0f;
	    dp = 0.0f;
	    for(j=-1; j<2; j++)
		for(i=-1; i<2; i++)
		    if(y+j>0 && y+j<YRES/CELL-1 &&
		       x+i>0 && x+i<XRES/CELL-1 &&
		       bmap[y+j][x+i]!=1 &&
		       bmap[y+j][x+i]!=8 &&
		       (bmap[y+j][x+i]!=7 || emap[y+j][x+i])) {
			f = kernel[i+1+(j+1)*3];
		        dx += vx[y+j][x+i]*f;
		        dy += vy[y+j][x+i]*f;
			dp += pv[y+j][x+i]*f;
		    } else {
			f = kernel[i+1+(j+1)*3];
		        dx += vx[y][x]*f;
		        dy += vy[y][x]*f;
			dp += pv[y][x]*f;
		    }

	    tx = x - dx*0.7f;
	    ty = y - dy*0.7f;
	    i = (int)tx;
	    j = (int)ty;
	    tx -= i;
	    ty -= j;

	    if(i>=2 && i<XRES/CELL-3 &&
	       j>=2 && j<YRES/CELL-3) {
		dx *= 1.0f - VADV;
		dy *= 1.0f - VADV;

		dx += VADV*(1.0f-tx)*(1.0f-ty)*vx[j][i];
		dy += VADV*(1.0f-tx)*(1.0f-ty)*vy[j][i];

		dx += VADV*tx*(1.0f-ty)*vx[j][i+1];
		dy += VADV*tx*(1.0f-ty)*vy[j][i+1];

		dx += VADV*(1.0f-tx)*ty*vx[j+1][i];
		dy += VADV*(1.0f-tx)*ty*vy[j+1][i];

		dx += VADV*tx*ty*vx[j+1][i+1];
		dy += VADV*tx*ty*vy[j+1][i+1];
	    }

	    if(bmap[y][x] == 4){
		dx += fvx[y][x];
		dy += fvy[y][x];
	    }

	    if(dp > 256.0f) dp = 256.0f;
	    if(dp < -256.0f) dp = -256.0f;
	    if(dx > 256.0f) dx = 256.0f;
	    if(dx < -256.0f) dx = -256.0f;
	    if(dy > 256.0f) dy = 256.0f;
	    if(dy < -256.0f) dy = -256.0f;

	    ovx[y][x] = dx;
	    ovy[y][x] = dy;
	    opv[y][x] = dp;
	}
    memcpy(vx, ovx, sizeof(vx));
    memcpy(vy, ovy, sizeof(vy));
    memcpy(pv, opv, sizeof(pv));
	;

:clamp_flt | min max f -- c |(float f, float min, float max)
	over >? ( 3drop $ff ; )
	pick2 <? ( 3drop 0 ; )
	pick2 - swap rot - $ff swap */ ;

:draw_air
	airflow
	0 ( 400 <? )(
		10 over setxy
		0 ( 400 <? )(
			rot
			0 8.0 pick2 vx[] abs clmp_flt >r
			0 8.0 pick2 pv[] clmp_flt >r
			0 8.0 pick2 vy[] abs clmp_flt 8 << r> or 8 << r> or
			px!+
			32 + rot rot
			1+ ) drop
		1+ ) 2drop
	;


|---------------------
:ram
	mark
	here dup 'airflow ! | vx ovx vy ovy pv opv fvx fvy | 8*yres*xres*4
	4 8 * 400 * 400 * +
	dup 'map !
	4 400 * 400 * + | 4*tres*xres
	'here !
	;

:main
	usogui
	main clrscr
		update_air
		draw_air
		'exit >esc<
		;

: ram 33 main ;