| eval-code.txt
| PHREDA 2007
|---------------------------------------
^reda4.txt
^gui3.txt
^r4code.txt
^medit.txt
^fontt.txt

#nombre )( 64
#linea )( 1024	| error y mem aux

#primerword
#:hojapal 0

#pilavars )( 1024
#pilavars> 'pilavars

::+variable | nroword --
	pilavars> !+ 'pilavars> ! ;

::-executa | --
	-4 'pilavars> +! ;

|-------- infopal
:printwordal | n --
	4 << 'indicepal +
	@+ "%w " print @+ " %h  " print @+ " %h  " print @+ " %h  " print cr
	drop ;

:printwordin | n --
	4 << 'indicepal +
	@+ "%w " verde print
	@+ drop |"%h " cyan print
	blanco
	@+ "%h " print

|	dup 24 >> "R:%d " print
|	dup 8 << 24 >> "D:%d " print
|	$ff and "F:%b " print

	@+ "%h " print cr
	drop ;

|----------------- muestra lista palabras
::printwordname | n --
|	dup "%d." blanco print | nro de palabra
	4 << 'indicepal +
	indicepal> >=? ( drop ; )
	dup 8 + @ 1 and? ( drop @ "#%w " violeta print ; ) drop
	@+ ":%w " rojo print
	drop
	;
:ll
	verde
	@+ drop |"%d " print direccion
	@+
	dup 24 >> "%d" print
	dup 8 << 24 >> "%d" print
	$fff and  "%b" print
| 	"%h" print
	@ "%d" print
	;

:drawtoken
	primerword
	rows ( 1? )( 1- swap
|		actword =? ( vidi )
		dup printwordin
|		dup printwordname cr
|		actword =? ( vidi )
		1+ swap  )
	2drop
	;

|------------------ definicion con ayuda
:tokeninfolist | cnt adr --
	( swap 1? )( 1- swap | cnt adr
		|dup "%h :" print
		<<ip =? ( blink 1? ( negro )( blanco ) drop ">" print )
|		dup 4 - movstackprint
		tokenprint
		<<ip 4+ =? ( blink 1? ( negro )( blanco ) drop "<" print )
		" " print
		lout? 1? ( cr ) drop
		) 2drop ;


:esvar | adr --
	@ "#%w " violeta print ;

:exprintword | n --
	4 << 'indicepal +
	indicepal> >=? ( drop ; )
	dup 8 + @ 1 and? ( drop esvar ; ) drop
	dup @ ":%w " rojo print
	dup 12 + @
	swap 4+ @
	tokeninfolist ;

:drawtrace
	dumpvm
	'pilaexe
	( pilaexe> <? )( @+ exprintword cr ) drop
	;

|||||||||||||||||||||||||

|------------------ dibuja la memoria
:printvariable | n --
	4 << 'indicepal +
	indicepal> >=? ( drop ; )
	dup 8 + @ 1 nand? ( 2drop ; ) drop
	@+ "#%w " violeta print amarillo
	@ @ " %d " print
|	drop
	;

:drawmemvar
	'pilavars
	( pilavars> <? )(
		@+ printvariable cr ) drop
	;

|------------------ estado MV
:drawstat
	cntvars cntword "pal:%d vars:%d " print cr amarillo
	str> str - 	cte> cte - 2 >> prog> prog - 2 >> "tok:%d cons:%d str:%d" print cr
	<<ip "IP:%h " verde print rojo
	<<ip @ dup $ff and swap 8 >> swap "%d-%d" print
	;

|------------------------------------------------
| genera codigo en :r4 y lo graba en "plain.txt"
| Sin includes
| Sin locales/exportadas ::->:  ##->#
|------------------------------------------------
:getcte		8 >> cte + @ ;
:getstr     8 >> str + ;

|:nro>dicn2   8 >> 4 << 'indicepal + @ ; | nombre de palabra original
:nro>dicn   8 >> "w%h" mprint ;			| w<nro palabra>

:coldefw nro>dicn ":%w" ,print ;
:coldefv nro>dicn "#%w" ,print ;

:colitd	getcte ,d ;

:colitf |getcte ,f" ;
:colitb	|getcte "%%%b" ,print ;
:colith getcte "$%h" ,print ;  | todos los nros en hexa

:colits	getstr """%s""" ,print ;
:colwor	nro>dicn "%w" ,print ;
:colvar	nro>dicn "%w" ,print ;
:coldwo	nro>dicn "'%w" ,print ;
:coldva	nro>dicn "'%w" ,print ;

#codei 0 'coldefw 'coldefv colitd colith colitb colitf colits colwor colvar coldwo coldva

:,token | a -- a.
	@+ dup $ff and
	12 <? ( 2 << 'codei + @ exec ; ) nip
	nro>macro ,s ;

||| Codigo
:gencod | adrr --
	dup @ swap 8 + @
	( 1? )( 1- swap ,sp ,token swap
		$1f nand? ( ,cr ) )
	2drop ;

||| Variables
:genvar | adrr --
	@
	( @+ dup $ff and
		1 =? ( 0 nip ) | corta con defc
		2 =? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		,sp
		12 <? ( 2 << 'codei + @ exec )( nip nro>macro ,s )
		$7c nand? ( ,cr )
		)
	3drop ;

:gencodigo | nro llamadas -- nro llamadas
	over 4 << 'indicepal +
	dup 8 + @ 1 and? ( 'genvar "#" )( 'gencod ":" ) ,s nip
	swap
	|@+ "%w" ,print | *nombre textual
	4+
	pick3 "w%h" ,print
	swap exec | ,cr
	;

:genplain
	mark
	0 ( cntword cntvars + 1- <? )(
		dup getllamadas 1? ( ,cr gencodigo ) drop
		1+ )
	": " ,s 4 << 'indicepal + 4+ gencod
	"plain.txt" savemem
	empty
	exit
	;

|----------------------------------------
|
|----------------------------------------
#pagina 0
#actual 0

:refresca
	actual -? ( 0 nip )
	pagina <? ( dup 'pagina ! )
	pagina rows 11 - + >? ( dup rows 11 - - 'pagina ! )
	'actual !
	;

:printlineword | n --
	4 << 'indicepal +
	indicepal> >=? ( drop ; )

|	dup 8 + @ 1 and? ( violeta "#" )( rojo ":" ) 1 boxprint drop
	dup 8 + @ 1 and? ( violeta "#" )( rojo ":" ) nip
	swap @+ rot
	"%s%w" .cell |20 boxprint blanco
	@+ drop |"%d " print direccion
	@+
	dup 24 >> "%d" .cell		| pilaR
	dup 8 << 24 >> "%d" .cell	| pilaD
	$fff and "%b" .cell		| flags
	@ "%d" .cell | largo en bytes
	;

:vercod
	0 dup 'pagina ! 'actual !
	inigui
	'exit >esc<
	[ 1 'actual +! refresca ; ] <dn>
	[ -1 'actual +! refresca ; ] <up>
	[ rows 10 - 'actual +! refresca ; ] <pgdn>
	[ rows 10 - neg 'actual +! refresca ; ] <pgup>
	show clrscr cr
		vard-12
		verde
		cr
		.table
		"Nro" 4 .col "Nombre" 21 .col "RS" 5 .col "DS" 5  .col 
		"Flags" 12 .col "Tokens" 7 .col "Calls" 7 .col " '" 2 .col
		cr
		pagina 10 ( 1? )( 1- swap
			verde
			.row
			dup actual =? ( ">%h<" )( " %h " ) .cell
			dup printlineword
			dup getllamadas 1? ( "%d" )( "" nip ) .cell
			dup getflags 1? ( "%d" )( "" nip ) .cell
			cr
			1+ swap ) 2drop
		blanco .grid
		cr
     	verde
		actual printword
		cmano ;

|----------------------------------------
|----------------------------------------
:consola
	indicepal< 'indicepal - 4 >> | iniciodicc
	'primerword !

	indicepal> 'indicepal - 4 >> | fin dicc
	1- dup +executa

	( primerword 1- >? )(
		dup	4 << 'indicepal +
		8 + @ 1 and? ( over +variable ) drop
		1- ) drop

|	indicepal> 12 - @ 'actual> !
|	ajusta

	inigui
	'exit >esc<
	'stepvm <f1>
	'stepvmf <f2>
	startvm | cambia las direcciones de variable!!
	show clrscr	fonti | 	25 fonth
		"r4Eval: " print blanco 'nombre print cr
		msg 1? ( rojo print cr )( drop )
		drawstat cr
		|drawtoken		|drawmemvar
		drawtrace
		cr cr
		0 rows 2 - at
		blanco
		'exit "ESC" sp .link sp
		'stepvm "F1-Step" .link sp
		'playvm "F2-Play" .link sp
		'savecode |[ savestat ; ]
			"F4-Graba" .link sp
		cr
		cmano ;


|----- Sistema
:errorcompila
	mark
	saverror
	"debug.err" savemem
	empty
|	savestat
	"edit-code.txt" run ;

:errorpost
	;

:compila
|	savetokens
	"r4fasm.txt" run ;

|----------- principal
:main
	'nombre "./nom/editor.nom" load drop
	'nombre tokencomp
	msg 1? ( drop errorcompila ; ) drop
	tokenpost
	msg 1? ( drop errorpost ; ) drop

	inigui
	'exit >esc<
	'consola <f1>
	'vercod <f2>
	'genplain <f3>
	'compila <f4>
	show clrscr verde
		dup "(%d)" print
		"Programa compilado" print cr

		blanco
		"F1-Debuger" print cr
		"F2-Ver Diccionario" print cr
		"F3-Generar codigo (plain.txt)" print cr
		"F4-Compilar (cod.asm,dat.asm)" print cr
		;

: 0 paper 4 main "edit-code.txt" run  ;