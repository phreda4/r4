| phreda 2008 
| dtabla 
| tabla de datos
|--------
| el registro 0 contiene los nombres de los campos
^reda4.txt
^parse.txt

|--- tabla actual
#dtNombre			| direccion a nombre tabla
#:dt.cCol			| cantidad de campos
#:dt.cRow			| cantidad de registros
#dtMaxReg			| maximo de registros ( si supera..redimenciona)
#dtRtabla			| direccion a tabla de camp*maxreg*4
#dtMtabla			| direccion a datos de tabla
#dtCntMtabla		| cant datos tabla
#dtMaxMtabla		| max datos tabla

#ndefine

|--- memoria de tablas
::dt.create | inimem columnas "Nombre" -- finmem
	'dtnombre !
	'dt.cCol !
	0 'dt.cRow !
	16 'dtMaxReg !
:dt.calcm | inimem
	dup 'dtRtabla !
	dtMaxReg dt.cCol * 2 << + 
	dup 'dtMtabla !
	dt.cCol 2 << +
	dup 'dtCntMtabla !
	256 +
	dup 'dtMaxMtabla !
	0 'ndefine ! ;


::dt.addcol | "" tipo --
	ndefine 2 << dtRtabla + !
	dtCntMtabla strcpyl 
	dtCntMtabla dtMtabla -
	ndefine 2 << dtMtabla + !
	'dtCntMtabla ! 
	1 'ndefine +! ;

::dt.new | inimem "Nombre" -- finmem
	1 swap dt.create ;

::dt.load | "" --
	
	drop ;

::dt.save | "" --

	drop ;


|-----------------------------------------------------------------------------
|  1,0 bits .... Como se obtiene $00 00 00 0f
| 0000 -- numero en tabla
| 0001 -- string 0-termina 1-separa 2-sub 3-subsub
| 0010 -- bin 1erint largo...dato
| 0011 -- exec executa y retorna un valor con su formato de presentacion
| ............... Como se presenta $00 00 00 f0
| 0000 -- numero (alto es cantidad de decimales)
| 0001 -- texto ( alto=0 linea alto<>0 memo )
| 0010 -- timestamp (alto no se usa)
| 0011 -- imagen
| ............... ancho y alto en unidades de celda
| $ff 00 00 00 ancho
| $00 ff 00 00 alto

|0 8 TNRO
::TNRO | dec largo -- v
	$ff and 24 << swap 
	$ff and 16 << or
	$00 or ;

|50 TTXT
::TTXT | largo -- v
	$ff and 24 << 
	$11 or ;

|----------------------------
:tipo1 | v t -- vr	; numero en la tabla
	drop
	;
:tipo2 | v t -- vr	; string en memoria
	drop
	dtMtabla + @
	;
:tipo3 | v t -- vr	; binario (no implementado)
	drop ;
:tipo4 | v t -- vr  ;ejecutable (no implementado)
	drop ;

#tipoo 'tipo1 'tipo2 'tipo3 'tipo4

::dt.celda | camp reg -- valor
	dt.cRow >? ( 2drop 0 ; )
	over 2 << dtRtabla + @ >r		| tipo campo
	dt.cCol * + 2 << dtRtabla + @ 
	r> dup $3 and 2 << 'tipoo + @ exec ;
|---------------------------

::dt.vcelda | camp reg -- valor
	dt.cRow >? ( 2drop 0 ; )
	dt.cCol * + 2 << dtRtabla + @ ;

|-------------------------------
:stipo1 | v l -- ; nro en tabla
	! ;
:stipo2 | v l -- ; string en memoria
	swap dtCntMtabla strcpyl 
	dtCntMtabla rot !
	'dtCntMtabla ! ;
:stipo3
	2drop ;
:stipo4
	2drop ;
	
#stipoo 'stipo1 'stipo2 'stipo3 'stipo4
	
:dt.setvalor | valor lugar tipo --
	$3 and 2 << 'stipoo + @ exec ;

|--------------------------------

::dt.celda! | valor camp reg --
	over 2 << dtRtabla + @ >r 
	dt.cCol * + 2 << dtRtabla + | lugar
	r> dt.setvalor ;

::dt.tcampo | nro -- tcampo
	2 << dtRtabla + @ ;

::dt.ncampo | nro -- nombre
	2 << dtMtabla + @ dtMtabla + ;

::dt.insert | "aaa,2323,dsfdsf,dserwr" --

	1 'dt.cRow +! ;


